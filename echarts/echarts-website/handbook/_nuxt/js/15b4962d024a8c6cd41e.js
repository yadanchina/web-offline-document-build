(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{493:function(e,n,r){"use strict";r.r(n),n.default="# Basic Line Chart\r\n\r\n## Simple Example\r\n\r\nWe can use the following code to build a line chart which has x-axis as `category`, y-axis as `value`:\r\n\r\n```js live\r\noption = {\r\n  xAxis: {\r\n    type: 'category',\r\n    data: ['A', 'B', 'C']\r\n  },\r\n  yAxis: {\r\n    type: 'value'\r\n  },\r\n  series: [\r\n    {\r\n      data: [120, 200, 150],\r\n      type: 'line'\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\nIn this case, we set the type of axis to `category` and `value` under `xAxis` and `yAxis`. We also clarified the content on the x-axis through `data`. In `series`, we set the type to `line`, and specify the values of three points through `data`. In this way, we got a simple line chart.\r\n\r\n> The `type` here can be omitted because the defaults of the axis are `value` while `xAxis` has specified the category's `data`. In this case, `ECharts` can recognize that this is a category axis.\r\n\r\n## Line Chart in Cartesian Coordinate System\r\n\r\nHow to implement if we want the line chart to be continuous? The answer is simple, as long as every value in `data` of the `series` is represented by an array containing two elements.\r\n\r\n```js live\r\noption = {\r\n  xAxis: {},\r\n  yAxis: {},\r\n  series: [\r\n    {\r\n      data: [\r\n        [20, 120],\r\n        [50, 200],\r\n        [40, 50]\r\n      ],\r\n      type: 'line'\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n## Customized Line Chart\r\n\r\n### Line Style\r\n\r\nLine style can be changed by `lineStyle` setting. You can specify color, line width, polyline type and opacity etc.. For details, please see the handbook [`series.lineStyle`](${optionPath}series-line.lineStyle) to figure out.\r\n\r\nHere is an example of setting color, line width and type.\r\n\r\n```js live\r\noption = {\r\n  xAxis: {\r\n    data: ['A', 'B', 'C', 'D', 'E']\r\n  },\r\n  yAxis: {},\r\n  series: [\r\n    {\r\n      data: [10, 22, 28, 23, 19],\r\n      type: 'line',\r\n      lineStyle: {\r\n        normal: {\r\n          color: 'green',\r\n          width: 4,\r\n          type: 'dashed'\r\n        }\r\n      }\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\nWhen we set the line width here, the line width of items will not change. The line style of items needs to be set separately.\r\n\r\n### Item Style\r\n\r\nItem style can be change by [`series.itemStyle`](${optionPath}series-line.itemStyle). It included `color`, `borderColor`, `borderStyle`, `borderWidth`, `borderType`, `shadowColor`, `opacity` and so on. It works the same as the `lineType`, so we will not do further discuss.\r\n\r\n## Display Value on Items.\r\n\r\nIn the series, the label of the item was specified by [`series.label`](${optionPath}series-line.label). If we change the `show` under `label` to `true`, the value will be displayed by default. Otherwise, if [`series.emphasis.label.show`](${optionPath}series-line.emphasis.label.show) is `true`, the label will show only if the mouse moved across the item.\r\n\r\n```js live\r\noption = {\r\n  xAxis: {\r\n    data: ['A', 'B', 'C', 'D', 'E']\r\n  },\r\n  yAxis: {},\r\n  series: [\r\n    {\r\n      data: [10, 22, 28, 23, 19],\r\n      type: 'line',\r\n      label: {\r\n        show: true,\r\n        position: 'bottom',\r\n        textStyle: {\r\n          fontSize: 20\r\n        }\r\n      }\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n## Empty Data\r\n\r\nIn a `series`, there are empty data. It has some difference with `0`. While there are empty elements, the lines chart will ignore that point without pass through it----empty elements will not be connected by the points next by.\r\n\r\nIn ECharts, we use `'-'` to represent null data, It is applicable for data in other series.\r\n\r\n```js live\r\noption = {\r\n  xAxis: {\r\n    data: ['A', 'B', 'C', 'D', 'E']\r\n  },\r\n  yAxis: {},\r\n  series: [\r\n    {\r\n      data: [0, 22, '-', 23, 19],\r\n      type: 'line'\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n> Please note the difference between the empty data and 0.\r\n"}}]);
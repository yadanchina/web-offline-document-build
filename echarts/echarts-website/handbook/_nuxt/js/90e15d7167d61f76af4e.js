(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{473:function(n,r,e){"use strict";e.r(r),r.default="# Axis\r\n\r\nThe x/y-axis in the Cartesian coordinate system.\r\n\r\n## x-axis, y-axis\r\n\r\nBoth x-axis and y-axis included axis line, tick, label and title. Some chart will use the grid to assist the data viewing and calculating.\r\n\r\n<img max-width=\"830\" width=\"100%\" height=\"100%\"\r\nsrc=\"images/design/axis/charts_axis_img02.jpg\">\r\n</img>\r\n\r\nA normal 2D coordinate system has x-axis and y-axis. X-axis located at the bottom while y-axis at the left side in common. The Config is shown below:\r\n\r\n```js\r\noption = {\r\n  xAxis: {\r\n    // ...\r\n  },\r\n  yAxis: {\r\n    // ...\r\n  }\r\n  // ...\r\n};\r\n```\r\n\r\nThe x-axis is usually used to declare the number of categories which was also called the aspects of observing the data: \"Sales Time\", \"Sales Location\" and \"product name\", etc.. The y-axis usually used to indicate the numerical value of categories. These data are used to examine the quantitative value of a certain type of data or some indicator you need to analyze, such as \"Sales Quantity\" and \"Sales Price\".\r\n\r\n```js\r\noption = {\r\n  xAxis: {\r\n    type: 'time',\r\n    name: 'Sales Time'\r\n    // ...\r\n  },\r\n  yAxis: {\r\n    type: 'value',\r\n    name: 'Sales Quantity'\r\n    // ...\r\n  }\r\n  // ...\r\n};\r\n```\r\n\r\nWhen x-axis has a large span, we can use the zoom method to display part of the data in the chart.\r\n\r\n```js\r\noption = {\r\n  xAxis: {\r\n    type: 'time',\r\n    name: 'Sales Time'\r\n    // ...\r\n  },\r\n  yAxis: {\r\n    type: 'value',\r\n    name: 'Sales Quantity'\r\n    // ...\r\n  },\r\n  dataZoom: []\r\n  // ...\r\n};\r\n```\r\n\r\nIn two-dimensional data, there can be more than two axes. There are usually two x or y axes at the same time in ECharts. You can change the config [offset](${optionPath}xAxis.offset) to avoid overlaps of axes at the same place. X-axes can be displayed at the top and bottom, y-axes at left and right.\r\n\r\n```js\r\noption = {\r\n  xAxis: {\r\n    type: 'time',\r\n    name: 'Sales Time'\r\n    // ...\r\n  },\r\n  yAxis: [\r\n    {\r\n      type: 'value',\r\n      name: 'Sales Quantity'\r\n      // ...\r\n    },\r\n    {\r\n      type: 'value',\r\n      name: 'Sales Price'\r\n      // ...\r\n    }\r\n  ]\r\n  // ...\r\n};\r\n```\r\n\r\n## Axis Line\r\n\r\nECharts provide the config of [axisLine](${optionPath}xAxis.axisLine). You can change the setting according to the demand, such as the arrow on two sides and the style of axes.\r\n\r\n```js\r\noption = {\r\n  xAxis: {\r\n    axisLine: {\r\n      symbol: 'arrow',\r\n      lineStyle: {\r\n        type: 'dashed'\r\n        // ...\r\n      }\r\n    }\r\n    // ...\r\n  },\r\n  yAxis: {\r\n    axisLine: {\r\n      symbol: 'arrow',\r\n      lineStyle: {\r\n        type: 'dashed'\r\n        // ...\r\n      }\r\n    }\r\n  }\r\n  // ...\r\n};\r\n```\r\n\r\n## Tick\r\n\r\nECharts provide the config [axisTick](${optionPath}xAxis.axisTick). You can change the setting according to the demand, such as the length of ticks, and the style of ticks.\r\n\r\n```js\r\noption = {\r\n  xAxis: {\r\n    axisTick: {\r\n      length: 6,\r\n      lineStyle: {\r\n        type: 'dashed'\r\n        // ...\r\n      }\r\n    }\r\n    // ...\r\n  },\r\n  yAxis: {\r\n    axisTick: {\r\n      length: 6,\r\n      lineStyle: {\r\n        type: 'dashed'\r\n        // ...\r\n      }\r\n    }\r\n  }\r\n  // ...\r\n};\r\n```\r\n\r\n## Label\r\n\r\nECharts provide the config [axisLabel](${optionPath}xAxis.axisLabel). You can change the setting according to the demand, such as the text alignment and the customized label content.\r\n\r\n```js\r\noption = {\r\n  xAxis: {\r\n    axisLabel: {\r\n      formatter: '{value} kg',\r\n      align: 'center'\r\n      // ...\r\n    }\r\n    // ...\r\n  },\r\n  yAxis: {\r\n    axisLabel: {\r\n      formatter: '{value} ¥',\r\n      align: 'center'\r\n      // ...\r\n    }\r\n  }\r\n  // ...\r\n};\r\n```\r\n\r\n## Example\r\n\r\nThe y-axis on the left side represents the monthly average temperature in Tokyo, the y-axis on the right side represents the precipitation of Tokyo. The x-axis represents the time. It reflects the trend and relation between the average temperature and precipitation.\r\n\r\n```js live\r\noption = {\r\n  tooltip: {\r\n    trigger: 'axis',\r\n    axisPointer: { type: 'cross' }\r\n  },\r\n  legend: {},\r\n  xAxis: [\r\n    {\r\n      type: 'category',\r\n      axisTick: {\r\n        alignWithLabel: true\r\n      },\r\n      axisLabel: {\r\n        rotate: 30\r\n      },\r\n      data: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n      ]\r\n    }\r\n  ],\r\n  yAxis: [\r\n    {\r\n      type: 'value',\r\n      name: 'Precipitation',\r\n      min: 0,\r\n      max: 250,\r\n      position: 'right',\r\n      axisLabel: {\r\n        formatter: '{value} ml'\r\n      }\r\n    },\r\n    {\r\n      type: 'value',\r\n      name: 'Temperature',\r\n      min: 0,\r\n      max: 25,\r\n      position: 'left',\r\n      axisLabel: {\r\n        formatter: '{value} °C'\r\n      }\r\n    }\r\n  ],\r\n  series: [\r\n    {\r\n      name: 'Precipitation',\r\n      type: 'bar',\r\n      yAxisIndex: 0,\r\n      data: [6, 32, 70, 86, 68.7, 100.7, 125.6, 112.2, 78.7, 48.8, 36.0, 19.3]\r\n    },\r\n    {\r\n      name: 'Temperature',\r\n      type: 'line',\r\n      smooth: true,\r\n      yAxisIndex: 1,\r\n      data: [\r\n        6.0,\r\n        10.2,\r\n        10.3,\r\n        11.5,\r\n        10.3,\r\n        13.2,\r\n        14.3,\r\n        16.4,\r\n        18.0,\r\n        16.5,\r\n        12.0,\r\n        5.2\r\n      ]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\nThese are the concise intro of the usage of axis config. Check more details at: [Official Website](${optionPath}xAxis).\r\n"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{503:function(n,e,t){"use strict";t.r(e),e.default="# Asynchronous Data Loading and Dynamic Update\r\n\r\n## Asynchronous Loading\r\n\r\nData in [Getting Started Example](${lang}/get-started) is directly updated by using `setOption`. But in many cases, the data needs to be filled by asynchronous loading frequently. `ECharts` can implement asynchronous loading in a simple way. You can get data asynchronously through a function such as jQuery and use `setOption` to fill in data and configs after the chart initialized.\r\n\r\n```js\r\nvar myChart = echarts.init(document.getElementById('main'));\r\n\r\n$.get('data.json').done(function(data) {\r\n  // Structure of data:\r\n  // {\r\n  //     categories: [\"Shirt\",\"Wool sweater\",\"Chiffon shirt\",\"Pants\",\"High-heeled shoes\",\"socks\"],\r\n  //     values: [5, 20, 36, 10, 10, 20]\r\n  // }\r\n  myChart.setOption({\r\n    title: {\r\n      text: 'Asynchronous Loading Example'\r\n    },\r\n    tooltip: {},\r\n    legend: {},\r\n    xAxis: {\r\n      data: data.categories\r\n    },\r\n    yAxis: {},\r\n    series: [\r\n      {\r\n        name: 'Sales',\r\n        type: 'bar',\r\n        data: data.values\r\n      }\r\n    ]\r\n  });\r\n});\r\n```\r\n\r\nOr display empty axes with all styles defined before fill in the data:\r\n\r\n```js\r\nvar myChart = echarts.init(document.getElementById('main'));\r\n// Show title, legends and empty axes\r\nmyChart.setOption({\r\n  title: {\r\n    text: 'Asynchronous Loading Example'\r\n  },\r\n  tooltip: {},\r\n  legend: {\r\n    data: ['Sales']\r\n  },\r\n  xAxis: {\r\n    data: []\r\n  },\r\n  yAxis: {},\r\n  series: [\r\n    {\r\n      name: 'Sales',\r\n      type: 'bar',\r\n      data: []\r\n    }\r\n  ]\r\n});\r\n\r\n// Asynchronous Data Loading\r\n$.get('data.json').done(function(data) {\r\n  // Fill in the data\r\n  myChart.setOption({\r\n    xAxis: {\r\n      data: data.categories\r\n    },\r\n    series: [\r\n      {\r\n        // Find series by name\r\n        name: 'Sales',\r\n        data: data.data\r\n      }\r\n    ]\r\n  });\r\n});\r\n```\r\n\r\nFor example:\r\n\r\n<md-example src=\"doc-example/tutorial-async\"></md-example>\r\n\r\nYou need to use `name` to \"navigate\" ECharts when updating data. In the previous example, the chart can update normally depending on the order of series, but we recommend you to add the `name` data while updating data.\r\n\r\n## loading Animation\r\n\r\nWhen it takes a long time to load the data, the user is facing the empty chart with only axes will wonder if there is a bug.\r\n\r\nECharts have a simple loading animation by default. You can call [showLoading](${mainSitePath}/api.html#echartsInstance.showLoading) to display. When the data loading was completed, call [hideLoading](${mainSitePath}/api.html#echartsInstance.hideLoading) to hide the animation.\r\n\r\n```js\r\nmyChart.showLoading();\r\n$.get('data.json').done(function (data) {\r\n    myChart.hideLoading();\r\n    myChart.setOption(...);\r\n});\r\n```\r\n\r\nHere is the effect:\r\n\r\n<md-example src=\"doc-example/tutorial-loading\"></md-example>\r\n\r\n## Dynamic Update\r\n\r\nECharts was driven by data, change in data will drive changes in the presentation of the chart. Therefore, It's surprisingly simple to implement a dynamic update.\r\n\r\nAll data's updates were implemented by [setOption](${mainSitePath}/api.html#echartsInstance.setOption). You only need to fetch the data periodically. ECharts will find the difference between two groups of data to use the proper way to choose the animation.\r\n\r\nCheck the following example.\r\n\r\n<md-example src=\"doc-example/tutorial-dynamic-data\"></md-example>\r\n"}}]);
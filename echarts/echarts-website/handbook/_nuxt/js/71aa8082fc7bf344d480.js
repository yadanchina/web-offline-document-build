(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{512:function(r,n,e){"use strict";e.r(n),n.default="# Apache ECharts 5.2.0 特性介绍\r\n\r\n## 全局过渡动画\r\n\r\n在 Apache ECharts 中我们一直把自然流畅的过渡动画作为一个重要特性。通过避免数据带来的突变，不仅仅可以改善视觉效果，更为表达数据的关联和演变提供了可能。因此，在 5.2.0 中，我们进一步将过渡动画从表现系列内部数据的变化，泛化到全局能力。接下来，我们会看到这种**全局过渡动画 Universal Transition**是如何为图表增加表现力和叙事能力的。\r\n\r\n在之前的版本中，过渡动画有一定的局限性：只能用于相同类型的图形的位置、尺寸、形状，而且只能作用在相同类型的系列上。比如，下面例子就是通过饼图中扇区形状的变化反映了数据分布的变化：\r\n\r\n```js live {layout: 'lr'}\r\nfunction makeRandomData() {\r\n  return [\r\n    {\r\n      value: Math.random(),\r\n      name: 'A'\r\n    },\r\n    {\r\n      value: Math.random(),\r\n      name: 'B'\r\n    },\r\n    {\r\n      value: Math.random(),\r\n      name: 'C'\r\n    }\r\n  ];\r\n}\r\noption = {\r\n  series: [\r\n    {\r\n      type: 'pie',\r\n      radius: [0, '50%'],\r\n      data: makeRandomData()\r\n    }\r\n  ]\r\n};\r\n\r\nsetInterval(() => {\r\n  myChart.setOption({\r\n    series: {\r\n      data: makeRandomData()\r\n    }\r\n  });\r\n}, 2000);\r\n```\r\n\r\n而从 5.2.0 开始，我们引入了更强大的全局过渡动画能力，让过渡动画不再局限于相同类型的系列之间。现在，我们可以使用这种跨系列的形变，为任意类型的系列和任意类型的图形做形变动画。\r\n\r\n这会有多酷呢？我们一起来感受一下！\r\n\r\n### 跨系列的形变动画\r\n\r\n在设置`universalTransition: true`开启全局过渡动画后，从饼图切换成柱状图，或者从柱状图切换成散点图，甚至旭日图和矩形树图这类复杂的图表之间，都可以通过形变的方式自然的进行动画过渡。\r\n\r\n如下，饼图和柱状图之间的切换：\r\n\r\n```js live {layout: 'bt'}\r\nconst dataset = {\r\n  dimensions: ['name', 'score'],\r\n  source: [\r\n    ['Hannah Krause', 314],\r\n    ['Zhao Qian', 351],\r\n    ['Jasmin Krause ', 287],\r\n    ['Li Lei', 219],\r\n    ['Karle Neumann', 253],\r\n    ['Mia Neumann', 165],\r\n    ['Böhm Fuchs', 318],\r\n    ['Han Meimei', 366]\r\n  ]\r\n};\r\nconst pieOption = {\r\n  dataset: [dataset],\r\n  series: [\r\n    {\r\n      type: 'pie',\r\n      // 通过 id 关联需要过渡动画的系列\r\n      id: 'Score',\r\n      radius: [0, '50%'],\r\n      universalTransition: true,\r\n      animationDurationUpdate: 1000\r\n    }\r\n  ]\r\n};\r\nconst barOption = {\r\n  dataset: [dataset],\r\n  xAxis: {\r\n    type: 'category'\r\n  },\r\n  yAxis: {},\r\n  series: [\r\n    {\r\n      type: 'bar',\r\n      // 通过 id 关联需要过渡动画的系列\r\n      id: 'Score',\r\n      // 每个数据都是用不同的颜色\r\n      colorBy: 'data',\r\n      encode: { x: 'name', y: 'score' },\r\n      universalTransition: true,\r\n      animationDurationUpdate: 1000\r\n    }\r\n  ]\r\n};\r\n\r\noption = barOption;\r\n\r\nsetInterval(() => {\r\n  option = option === pieOption ? barOption : pieOption;\r\n  // 使用 notMerge 的形式可以移除坐标轴\r\n  myChart.setOption(option, true);\r\n}, 2000);\r\n```\r\n\r\n更多的常见基础图表之间的过渡：\r\n\r\n![](images/5-2-0/universal-transition.gif)\r\n\r\n这样的动画过渡不再仅仅局限于基础的折、柱、饼中，在柱状图和地图之间:\r\n\r\n![](images/5-2-0/universal-transition-2.gif)\r\n\r\n或者旭日图和矩形树图之间，甚至非常灵活的自定义系列之间都可以进行动画的过渡。\r\n\r\n![](images/5-2-0/universal-transition-3.gif)\r\n\r\n> 注意需要配置系列的 id 来保证需要动画过渡的系列之间能够一一对应。\r\n\r\n> 按需引入的代码需要单独引入该特性\r\n>\r\n> ```ts\r\n> import { UniversalTransition } from 'echarts/features';\r\n> echarts.use([UniversalTransition]);\r\n> ```\r\n\r\n### 数据的分裂和合并动画\r\n\r\n除了常见的数据值的更新，有时候我们还会碰到数据的聚合、下钻等交互后的更新，这个时候我们就不能直接应用一对一的动画过渡，而需要使用更多像分裂、合并这样的动画效果，来通过正确的图形动画表达出数据的变换。\r\n\r\n为了能够表达数据之间可能存在的多对多联系，在 5.2.0 中我们新引入了一个数据组`groupId`的概念，我们可以通过 [series.dataGroupId](${optionPath}series-bar.dataGroupId) 设置整个系列所属的组，或者更细粒度的通过 [series.data.groupId](${optionPath}series-bar.dataGroupId) 设置每个数据所属的组。如果你使用了`dataset`管理数据则更方便了，可以使用`encode.itemGroupId`来指定一个维度编码成`groupId`。\r\n\r\n比如我们要实现一个柱状图下钻的动画，可以将下钻后的整个系列的数据都设置同一个`groupId`，然后跟下钻前的数据对应起来：\r\n\r\n```js live {layout: 'lr'}\r\noption = {\r\n  xAxis: {\r\n    data: ['Animals', 'Fruits', 'Cars']\r\n  },\r\n  yAxis: {},\r\n  dataGroupId: '',\r\n  animationDurationUpdate: 500,\r\n  series: {\r\n    type: 'bar',\r\n    id: 'sales',\r\n    data: [\r\n      {\r\n        value: 5,\r\n        groupId: 'animals'\r\n      },\r\n      {\r\n        value: 2,\r\n        groupId: 'fruits'\r\n      },\r\n      {\r\n        value: 4,\r\n        groupId: 'cars'\r\n      }\r\n    ],\r\n    universalTransition: {\r\n      enabled: true,\r\n      divideShape: 'clone'\r\n    }\r\n  }\r\n};\r\n\r\nconst drilldownData = [\r\n  {\r\n    dataGroupId: 'animals',\r\n    data: [\r\n      ['Cats', 4],\r\n      ['Dogs', 2],\r\n      ['Cows', 1],\r\n      ['Sheep', 2],\r\n      ['Pigs', 1]\r\n    ]\r\n  },\r\n  {\r\n    dataGroupId: 'fruits',\r\n    data: [\r\n      ['Apples', 4],\r\n      ['Oranges', 2]\r\n    ]\r\n  },\r\n  {\r\n    dataGroupId: 'cars',\r\n    data: [\r\n      ['Toyota', 4],\r\n      ['Opel', 2],\r\n      ['Volkswagen', 2]\r\n    ]\r\n  }\r\n];\r\n\r\nmyChart.on('click', event => {\r\n  if (event.data) {\r\n    const subData = drilldownData.find(data => {\r\n      return data.dataGroupId === event.data.groupId;\r\n    });\r\n    if (!subData) {\r\n      return;\r\n    }\r\n    myChart.setOption({\r\n      xAxis: {\r\n        data: subData.data.map(item => {\r\n          return item[0];\r\n        })\r\n      },\r\n      series: {\r\n        type: 'bar',\r\n        id: 'sales',\r\n        dataGroupId: subData.dataGroupId,\r\n        data: subData.data.map(item => {\r\n          return item[1];\r\n        }),\r\n        universalTransition: {\r\n          enabled: true,\r\n          divideShape: 'clone'\r\n        }\r\n      },\r\n      graphic: [\r\n        {\r\n          type: 'text',\r\n          left: 50,\r\n          top: 20,\r\n          style: {\r\n            text: 'Back',\r\n            fontSize: 18\r\n          },\r\n          onclick: function() {\r\n            myChart.setOption(option, true);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n通过`groupId`，我们还可以实现更丰富的聚合，下钻动画。\r\n\r\n数据的聚合：\r\n\r\n![](images/5-2-0/group-transition.gif)\r\n\r\n单系列下钻成两个系列：\r\n\r\n![](images/5-2-0/group-transition-2.gif)\r\n\r\n全局过渡动画使得数据的关系和演变的表达能力走上新的台阶，为你的可视化创作灵感插上翅膀。\r\n\r\n看到这里，我们知道你已经跃跃欲试了。但是别急，5.2.0 还有更多值得一看的新功能。\r\n\r\n## 调色盘的取色策略\r\n\r\n在上面全局过渡动画的示例中，大家可能有注意到我们使用了一个之前版本没有的`colorBy`配置项，这个配置项也是我们这个版本新增加的一个特性，用来给系列配置不同粒度的调色盘取色。这个配置目前支持两种策略：\r\n\r\n- `'series'` 按照系列分配调色盘中的颜色，同一系列中的所有数据都是用相同的颜色。\r\n- `'data'` 按照数据项分配调色盘中的颜色，每个数据项都使用不同的颜色。\r\n\r\n在之前我们是按照系列的类型固定了这个策略，比如柱状图就是固定`'series'`的策略，而饼图则是固定`'data'`的策略。\r\n\r\n而现在新增这个配置项后，我们可以在柱状图中给每个数据项都分配不同的颜色：\r\n\r\n```js live {layout: 'lr'}\r\noption = {\r\n  xAxis: {\r\n    type: 'category',\r\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n  },\r\n  yAxis: {\r\n    type: 'value'\r\n  },\r\n  series: [\r\n    {\r\n      data: [120, 200, 150, 80, 70, 110, 130],\r\n      type: 'bar',\r\n      colorBy: 'data'\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n或者在饼图中统一使用一个颜色：\r\n\r\n```js live {layout: 'lr'}\r\noption = {\r\n  series: {\r\n    type: 'pie',\r\n    colorBy: 'series',\r\n    radius: [0, '50%'],\r\n    itemStyle: {\r\n      borderColor: '#fff',\r\n      borderWidth: 1\r\n    },\r\n    data: [\r\n      {\r\n        value: 335,\r\n        name: 'Direct Visit'\r\n      },\r\n      {\r\n        value: 234,\r\n        name: 'Union Ad'\r\n      },\r\n      {\r\n        value: 1548,\r\n        name: 'Search Engine'\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\n这一配置项可以让我们避免了去找调色盘颜色然后去一一设置的麻烦，可能在特定的场景需求中提供便捷。后续我们会对这个配置项做进一步的增强，提供更多的调色盘取色的策略。\r\n\r\n## 极坐标柱状图的标签\r\n\r\n这个版本中我们实现了极坐标上的柱状图的标签，并且支持丰富的标签定位配置。下面是一个最常见的标签显示在端点的进度图：\r\n\r\n```js live {layout: 'lr'}\r\noption = {\r\n  angleAxis: {\r\n    show: false,\r\n    max: 10\r\n  },\r\n  radiusAxis: {\r\n    show: false,\r\n    type: 'category',\r\n    data: ['AAA', 'BBB', 'CCC', 'DDD']\r\n  },\r\n  polar: {},\r\n  series: [\r\n    {\r\n      type: 'bar',\r\n      data: [3, 4, 5, 6],\r\n      colorBy: 'data',\r\n      roundCap: true,\r\n      label: {\r\n        show: true,\r\n        // 试试改成 'insideStart'\r\n        position: 'start',\r\n        formatter: '{b}'\r\n      },\r\n      coordinateSystem: 'polar'\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n更多标签位置的配置：\r\n\r\n![](images/5-2-0/polar-bar-label.jpg)\r\n\r\n这一灵活的标签位置配置项大大丰富了极坐标柱状图的表达能力，让文字清晰地匹配对应的数据。\r\n\r\n## 空数据的饼图样式\r\n\r\n在之前的版本中，如果饼图没有数据，画面中可能就是完全空白的。因为没有任何的视觉元素，所以用户会疑惑是不是出现了 bug 导致图中没有内容。\r\n\r\n为了解决这个问题，这个版本我们会默认在无可显示数据的时候显示一个灰色的占位圆以防止画面中完全空白。我们可以通过`emptyCircleStyle`配置这个占位圆的样式。\r\n\r\n```js live {layout: 'lr'}\r\noption = {\r\n  series: [\r\n    {\r\n      type: 'pie',\r\n      data: [],\r\n      // showEmptyCircle: false,\r\n      emptyCircleStyle: {\r\n        // 将样式改为空心圆\r\n        color: 'transparent',\r\n        borderColor: '#ddd',\r\n        borderWidth: 1\r\n      }\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n如果不想要显示这个灰色的圆，也可以设置`showEmptyCircle: false`关闭。\r\n\r\n## 高维数据的性能增强\r\n\r\n我们从 4.0 开始引入了 [dataset](${optionPath}dataset) 用来管理图表的数据，通常情况下`dataset`提供了更方便的数据管理方式而且跟传统的方式不会有什么性能上的差别。但是在一些极端的特别高维（>100）数据的场景下，我们还是会碰到一些性能急剧下降的问题，比如下面这种通过一千个系列去可视化千维数据的场景（[#11907](https://github.com/apache/echarts/issues/11907)），甚至可能会卡住。\r\n\r\n```js\r\nconst indices = Array.from(Array(1000), (_, i) => {\r\n  return `index${i}`;\r\n});\r\nconst option = {\r\n  xAxis: { type: 'category' },\r\n  yAxis: {},\r\n  dataset: {\r\n    // dimension: ['date', ...indices],\r\n    source: Array.from(Array(10), (_, i) => {\r\n      return {\r\n        date: i,\r\n        ...indices.reduce((item, next) => {\r\n          item[next] = Math.random() * 100;\r\n          return item;\r\n        }, {})\r\n      };\r\n    })\r\n  },\r\n  series: indices.map(index => {\r\n    return { type: 'line', name: index };\r\n  })\r\n};\r\n```\r\n\r\n产生这个性能问题是因为我们在底层每个系列都会按照其需要处理一遍这个 dataset，然后保存一份处理过后的数据以及维度等元信息。这意味着刚才那个例子中需要处理并保存`1000 x 1000`个维度的信息，这带来了巨大的内存和垃圾回收的压力，从而导致了高维度的性能的急剧下降。\r\n\r\n在新版本中我们对这个问题做了优化，所有系列都尽可能共享 dataset 的数据（能否共享取决于系列怎么使用这份数据）存储而非每个系列都处理并存储一次，并且只处理和存储了使用到的维度。这些优化保证了内存不会随着 dataset 维度和系列的增长而爆炸，大幅度的提升了极端场景下的初始化性能。刚才例子的渲染耗时也从卡住降低到了可接受的 300 毫秒以下。\r\n\r\n这次优化带来收益的还不只是这种高维的场景，在使用维度不高但是数据量很大的 dataset 的时候，因为数据的共享所以多个系列只处理了一遍数据，因此也可以带来显著的性能提升。\r\n\r\n## 自定义系列的类型优化\r\n\r\n自定义系列提供了非常灵活的创建系列图形的方式，相对于其它系列，自定义系列的学习曲线可能有些陡峭，而且容易出错。因此在这个版本中，我们进一步的优化了自定义系列中的核心方法`renderItem`的类型，对于`renderItem`的参数和返回值类型做了更精确的推断，从而可以根据返回的图形类型推断出可以设置该图形的哪些属性：\r\n\r\n```ts\r\nseries = {\r\n  type: 'custom',\r\n  renderItem(params) {\r\n    return {\r\n      type: 'group',\r\n      // group 类型使用 children 存储其它类型的子元素\r\n      children: [\r\n        {\r\n          type: 'circle',\r\n          // circle 拥有下面这些可以配置的 shape 属性\r\n          shape: { r: 10, cx: 0, cy: 0 },\r\n          // 可以配置的样式\r\n          style: { fill: 'red' }\r\n        },\r\n        {\r\n          type: 'rect',\r\n          // rect 拥有下面这些可以配置的 shape 属性\r\n          shape: { x: 0, y: 0, width: 100, height: 100 }\r\n        },\r\n        {\r\n          type: 'path',\r\n          // 自定义路径图形\r\n          shape: { d: '...' }\r\n        }\r\n      ]\r\n    };\r\n  }\r\n};\r\n```\r\n\r\n## 小结\r\n\r\n以上我们介绍了 5.2.0 中的新特性以及优化，如果你对其中的一些特性感兴趣，不妨更新到最新版本的 Apache ECharts 亲自体验一下。\r\n\r\n如果你对 Apache ECharts 接下来的计划感兴趣，也可以在 [GitHub Milestone](https://github.com/apache/echarts/milestones) 关注我们的开发计划。也非常欢迎加入我们的贡献者行列（在 [Wiki](https://github.com/apache/echarts/wiki) 中了解更多）。\r\n\r\n## 完整更新记录\r\n\r\n查看[版本更新](${mainSitePath}/changelog.html#v5-2-0)\r\n"}}]);
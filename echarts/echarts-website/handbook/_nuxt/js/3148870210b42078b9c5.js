(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{513:function(r,n,e){"use strict";e.r(n),n.default="# Apache ECharts 5.3.0 特性介绍\r\n\r\nApache ECharts 5.3.0 在动画表达力、渲染性能、服务端渲染上做了大幅度的增强，同时也新增了多坐标轴刻度自动对齐、tooltip 数值格式化、地图投影等社区中期盼已久的特性。\r\n\r\n## 关键帧动画\r\n\r\n在之前 ECharts 的动画集中在图形添加、更新以及移除的过渡动画上，过渡动画往往只有开始状态和结束状态。为了表达更复杂的动画效果，我们 5.3.0 中为[自定义系列](${optionPath}series-custom)和[图形组件](${optionPath}graphic)引入了全新的关键帧动画。\r\n\r\n下面是一个简单的通过关键帧动画实现的呼吸动画的效果。\r\n\r\n```js live {layout: 'lr', height:300}\r\noption = {\r\n  graphic: {\r\n    type: 'circle',\r\n    shape: { r: 100 },\r\n    left: 'center',\r\n    top: 'center',\r\n    keyframeAnimation: [\r\n      {\r\n        duration: 3000,\r\n        loop: true,\r\n        keyframes: [\r\n          {\r\n            percent: 0.5,\r\n            easing: 'sinusoidalInOut',\r\n            scaleX: 0.1,\r\n            scaleY: 0.1\r\n          },\r\n          {\r\n            percent: 1,\r\n            easing: 'sinusoidalInOut',\r\n            scaleX: 1,\r\n            scaleY: 1\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\n在关键帧动画中，你可以配置动画时长、缓动、是否循环、每个关键帧的位置、缓动以及图形属性等。而且每个图形可以同时设置多个不同配置的关键帧动画。灵活的配置让我们可以实现非常复杂的动画效果，下面列举几个可以应用关键帧动画的场景。\r\n\r\n### 自定义加载动画\r\n\r\nECharts 默认内置了一个加载动画，可以调用`showLoading`显示。开发者经常会提需求需要更多的加载动画效果。现在有了关键帧动画后，我们可以通过图形（[graphic](${optionPath}graphic)）组件配合关键帧动画实现任何想要的加载动画效果。\r\n\r\n比如文本描边动画：\r\n\r\n```js live {layout: 'lr', height:300}\r\noption = {\r\n  graphic: {\r\n    elements: [\r\n      {\r\n        type: 'text',\r\n        left: 'center',\r\n        top: 'center',\r\n        style: {\r\n          text: 'Apache ECharts',\r\n          fontSize: 40,\r\n          fontWeight: 'bold',\r\n          lineDash: [0, 200],\r\n          lineDashOffset: 0,\r\n          fill: 'transparent',\r\n          stroke: '#000',\r\n          lineWidth: 1\r\n        },\r\n        keyframeAnimation: {\r\n          duration: 3000,\r\n          loop: true,\r\n          keyframes: [\r\n            {\r\n              percent: 0.7,\r\n              style: {\r\n                fill: 'transparent',\r\n                lineDashOffset: 200,\r\n                lineDash: [200, 0]\r\n              }\r\n            },\r\n            {\r\n              // Stop for a while.\r\n              percent: 0.8,\r\n              style: {\r\n                fill: 'transparent'\r\n              }\r\n            },\r\n            {\r\n              percent: 1,\r\n              style: {\r\n                fill: 'black'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\n或者柱状图形状的加载动画：\r\n\r\n```js live {layout: 'lr', height:300}\r\nconst columns = [];\r\nfor (let i = 0; i < 7; i++) {\r\n  columns.push({\r\n    type: 'rect',\r\n    x: i * 20,\r\n    shape: {\r\n      x: 0,\r\n      y: -40,\r\n      width: 10,\r\n      height: 80\r\n    },\r\n    style: {\r\n      fill: '#5470c6'\r\n    },\r\n    keyframeAnimation: {\r\n      duration: 1000,\r\n      delay: i * 200,\r\n      loop: true,\r\n      keyframes: [\r\n        {\r\n          percent: 0.5,\r\n          scaleY: 0.1,\r\n          easing: 'cubicIn'\r\n        },\r\n        {\r\n          percent: 1,\r\n          scaleY: 1,\r\n          easing: 'cubicOut'\r\n        }\r\n      ]\r\n    }\r\n  });\r\n}\r\noption = {\r\n  graphic: {\r\n    elements: [\r\n      {\r\n        type: 'group',\r\n        left: 'center',\r\n        top: 'center',\r\n        children: columns\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\n### 扩展更丰富的散点图动画特效\r\n\r\n带有特效动画的散点图一直以来是 ECharts 的特色功能。开发者可以使用 [effectScatter](${optionPath}series-effectScatter) 系列来实现带有涟漪特效的动态散点图，这种特效动画除了让作品更有趣，也起到了高亮提示用户的效果。跟加载动画一样，开发者也常常提出需要更多动画效果的需求。现在我们可以在自定义系列中通过使用关键帧动画来实现更复杂的特效。\r\n\r\n比如下面例子在 SVG 地图上给自定义系列绘制的图钉加上了跳动的动画效果，同时配上了涟漪动画。\r\n\r\n\x3c!-- <md-example src=\"geo-svg-custom-effect\" width=\"100%\" height=\"500\" /> --\x3e\r\n\r\n```js live {layout: 'lr', readOnly: true }\r\nfetch(\r\n  '/fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/examples/data/asset/geo/Map_of_Iceland.svg'\r\n)\r\n  .then(response => response.text())\r\n  .then(svg => {\r\n    echarts.registerMap('iceland_svg', { svg: svg });\r\n    option = {\r\n      geo: {\r\n        map: 'iceland_svg',\r\n        left: 0,\r\n        right: 0\r\n      },\r\n      series: {\r\n        type: 'custom',\r\n        coordinateSystem: 'geo',\r\n        geoIndex: 0,\r\n        zlevel: 1,\r\n        data: [\r\n          [488, 459, 100],\r\n          [770, 757, 30],\r\n          [1180, 743, 80],\r\n          [894, 1188, 61],\r\n          [1372, 477, 70],\r\n          [1378, 935, 81]\r\n        ],\r\n        renderItem(params, api) {\r\n          const coord = api.coord([\r\n            api.value(0, params.dataIndex),\r\n            api.value(1, params.dataIndex)\r\n          ]);\r\n\r\n          const circles = [];\r\n          for (let i = 0; i < 5; i++) {\r\n            circles.push({\r\n              type: 'circle',\r\n              shape: {\r\n                cx: 0,\r\n                cy: 0,\r\n                r: 30\r\n              },\r\n              style: {\r\n                stroke: 'red',\r\n                fill: 'none',\r\n                lineWidth: 2\r\n              },\r\n              // Ripple animation\r\n              keyframeAnimation: {\r\n                duration: 4000,\r\n                loop: true,\r\n                delay: (-i / 4) * 4000,\r\n                keyframes: [\r\n                  {\r\n                    percent: 0,\r\n                    scaleX: 0,\r\n                    scaleY: 0,\r\n                    style: {\r\n                      opacity: 1\r\n                    }\r\n                  },\r\n                  {\r\n                    percent: 1,\r\n                    scaleX: 1,\r\n                    scaleY: 0.4,\r\n                    style: {\r\n                      opacity: 0\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            });\r\n          }\r\n          return {\r\n            type: 'group',\r\n            x: coord[0],\r\n            y: coord[1],\r\n            children: [\r\n              ...circles,\r\n              {\r\n                type: 'path',\r\n                shape: {\r\n                  d:\r\n                    'M16 0c-5.523 0-10 4.477-10 10 0 10 10 22 10 22s10-12 10-22c0-5.523-4.477-10-10-10zM16 16c-3.314 0-6-2.686-6-6s2.686-6 6-6 6 2.686 6 6-2.686 6-6 6z',\r\n                  x: -10,\r\n                  y: -35,\r\n                  width: 20,\r\n                  height: 40\r\n                },\r\n                style: {\r\n                  fill: 'red'\r\n                },\r\n                // Jump animation.\r\n                keyframeAnimation: {\r\n                  duration: 1000,\r\n                  loop: true,\r\n                  delay: Math.random() * 1000,\r\n                  keyframes: [\r\n                    {\r\n                      y: -10,\r\n                      percent: 0.5,\r\n                      easing: 'cubicOut'\r\n                    },\r\n                    {\r\n                      y: 0,\r\n                      percent: 1,\r\n                      easing: 'bounceOut'\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n            ]\r\n          };\r\n        }\r\n      }\r\n    };\r\n\r\n    myChart.setOption(option);\r\n  });\r\n```\r\n\r\n\x3c!-- ### 在大屏图表上放入科技感的动画特效 --\x3e\r\n\r\n### 加载 Lottie 动画\r\n\r\n为了充分发掘出新的关键帧动画的能力，ECharts 团队的沈毅写了一个 [Lottie 动画的解析库](https://github.com/pissang/lottie-parser)，可以将 Lottie 动画文件解析成 ECharts 的图形格式进行渲染。结合 Lottie 的表达力我们可以进一步的在我们的项目中绘制出细腻的动画:\r\n\r\n<iframe src=\"https://codesandbox.io/embed/eager-ives-yiqn7?fontsize=14&hidenavigation=1&theme=dark&codemirror=1\"\r\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\r\n     title=\"eager-ives-yiqn7\"\r\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\r\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\r\n   ></iframe>\r\n\r\n## 图形组件过渡动画\r\n\r\n我们在 5.0 里为自定义系列中返回的图形提供了更灵活的过渡动画配置。可以通过`transition`, `enterFrom`, `leaveTo`三个配置项来配置每个图形哪些属性会拥有过渡动画，当图形创建和被移除的时候该执行怎么样的动画。例如：\r\n\r\n```js\r\nfunction renderItem() {\r\n  //...\r\n  return {\r\n    //...\r\n    x: 100,\r\n    // 'style', 'x', 'y' 会被动画\r\n    transition: ['style', 'x', 'y'],\r\n    enterFrom: {\r\n      style: {\r\n        // 淡入\r\n        opacity: 0\r\n      },\r\n      //从左侧飞入\r\n      x: 0\r\n    },\r\n    leaveTo: {\r\n      // 淡出\r\n      opacity: 0\r\n    },\r\n    // 向右侧飞出\r\n    x: 200\r\n  };\r\n}\r\n```\r\n\r\n在 5.3.0 中我们把这些过渡动画的配置扩展到了图形（graphic）组件中，并且做了更多的增强：\r\n\r\n如果你不想一一写出每个要动画的属性，现在你可以直接配置`transition: 'all'`为所有属性都加上动画过渡。\r\n\r\n与此同时我们还新增了`enterAnimation`、`updateAnimation`、`leaveAnimation`分别配置每个图形入场、更新、出场动画的时长（duration）、延迟（delay）和缓动（easing）。除此之外，渐变色现在也支持动画了。\r\n\r\n## 全新的 SVG 渲染器\r\n\r\n在 5.3.0 中我们重构了我们的 SVG 渲染器，新的 SVG 渲染器能够带来 2x ~ 10x 的性能提升，在某些特殊场景中甚至能有数十倍的提升。\r\n\r\n之前的 SVG 渲染器我们直接从渲染队列更新到 DOM。但是因为 zrender 的图形属性跟 DOM 并不是一一对应的，因此中间需要实现非常复杂的 Diff 逻辑，容易出错而且在某些场景下性能并不能做到最好。在这个版本我们重构成先全量渲染到 VDOM，然后再将 VDOM patch 到 DOM 完成渲染。全量渲染可以避免复杂的 Diff 逻辑带来的潜在 Bug。而 VDOM 和 DOM 的一一对应可以保证在 patch 的时候保证更新是最少的，从而带来巨大的性能提升。\r\n\r\n[这个例子](/examples/zh/editor.html?c=geo-svg-scatter-simple&renderer=svg) 可以给大家带来比较直观的性能提升的感受。新的版本在 SVG 模式下拖动的交互上比之前版本流畅非常多。\r\n\r\n|             5.2.2 (Before)             |            5.3.0 (After)             |\r\n| :------------------------------------: | :----------------------------------: |\r\n| ![before](images/5-3-0/svg-before.gif) | ![after](images/5-3-0/svg-after.gif) |\r\n\r\n除了性能的提升，我们还可以使用中间全量渲染得到的 VDom 做更多的事情，比如下面会介绍的服务端渲染。\r\n\r\n## 零依赖的服务端渲染\r\n\r\n在之前的版本 ECharts 也可以实现服务端的渲染，但是必须得依赖 [node-canvas](https://github.com/Automattic/node-canvas)，如果是使用 SVG 模式则需要依赖 [JSDOM](https://github.com/jsdom/jsdom) 来模拟 DOM 环境。这些依赖一是带来了额外的体积和使用要求，二是也会有更多的性能损耗。\r\n\r\n这次新的 SVG 渲染器可以让我们从中间的 VDOM 渲染得到字符串，带来了完全零依赖的服务端渲染，输出更精简并且带有 CSS 动画的 SVG 字符串。\r\n\r\n```ts\r\nconst echarts = require('echarts');\r\n\r\n// 在 SSR 模式下第一个参数不需要再传入 DOM 对象\r\nconst chart = echarts.init(null, null, {\r\n  renderer: 'svg', // 必须使用 SVG 模式\r\n  ssr: true, // 开启 SSR\r\n  width: 400, // 需要指明高和宽\r\n  height: 300\r\n});\r\n\r\n// 像正常使用一样 setOption\r\nchart.setOption({\r\n  xAxis: {\r\n    type: 'category',\r\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n  },\r\n  yAxis: {\r\n    type: 'value'\r\n  },\r\n  series: [\r\n    {\r\n      data: [120, 200, 150, 80, 70, 110, 130],\r\n      type: 'bar'\r\n    }\r\n  ]\r\n});\r\n\r\n// 输出字符串\r\nconst svgStr = chart.renderToSVGString();\r\n```\r\n\r\n我们在 CodeSandbox 中搭建一个最简单的 NodeJS 服务器然后使用 ECharts 服务端渲染的效果：\r\n\r\n<iframe src=\"https://codesandbox.io/embed/heuristic-leftpad-oq23t?autoresize=1&codemirror=1&fontsize=12&hidenavigation=1&&theme=dark\"\r\n     style=\"width:100%; height:400px; border:0; border-radius: 4px; overflow:hidden;\"\r\n     title=\"heuristic-leftpad-oq23t\"\r\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\r\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\r\n   ></iframe>\r\n\r\n在此基础上，我们优化了输出的 SVG 字符串，使其在诸如 PowerPoint 等更多的平台上有更好的显示效果。\r\n\r\n## 自定义地图投影\r\n\r\n地图一直是 ECharts 中使用非常广泛的组件。一般地图组件会使用存储了经纬度的 GeoJSON 格式的数据。而 ECharts 则计算出合适的显示区域然后把经纬度线性映射到这个区域。这是一种最简单的地图投影方式。但是简单的线性投影并无法满足某些复杂的地图场景，例如使用 [Albers](https://en.wikipedia.org/wiki/Albers_projection) 投影解决线性投影中面积失真的问题，或者在世界地图中让太平洋显示在中间等等。\r\n\r\n因此在 5.3.0 里中我们引入了自定义的地图投影，可以通过`project`和`unproject`两个方法告诉 ECharts 如何投影坐标，以及如何根据投影后坐标计算经纬度。下面是简单的使用墨卡托投影的例子：\r\n\r\n```ts\r\nseries = {\r\n  type: 'map',\r\n  projection: {\r\n    project: point => [\r\n      (point[0] / 180) * Math.PI,\r\n      -Math.log(Math.tan((Math.PI / 2 + (point[1] / 180) * Math.PI) / 2))\r\n    ],\r\n    unproject: point => [\r\n      (point[0] * 180) / Math.PI,\r\n      ((2 * 180) / Math.PI) * Math.atan(Math.exp(point[1])) - 90\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\n除了我们自己实现投影公式，我们也可以使用 [d3-geo](https://github.com/d3/d3-geo) 等第三方库提供的现成的投影实现：\r\n\r\n```ts\r\nconst projection = d3.geoConicEqualArea();\r\n// ...\r\nseries = {\r\n  type: 'map',\r\n  projection: {\r\n    project: point => projection(point),\r\n    unproject: point => projection.invert(point)\r\n  }\r\n};\r\n```\r\n\r\n配合在 5.2 里新增的全局过渡动画特性，我们可以实现不同投影效果之间的动画过渡：\r\n\r\n![地图投影动画](images/5-3-0/map-projection.gif)\r\n\r\n除了地图的投影之外，我们在这个版本对于地图还做了下面两个增强：\r\n\r\n- 对 GeoJSON 数据提供了`'LineString'`和`'MultiLineString'`的支持。\r\n- 将默认标签位置的计算从包围盒中心改为最大区域的重心坐标，计算结果更加准确。\r\n\r\n## 多坐标轴的刻度对齐\r\n\r\n多坐标轴的刻度对齐是社区中提了很久的一个需求，我们在网上也可以看到很多开发者写的如何在 ECharts 中实现坐标轴对齐的文章，通常都会比较麻烦而且会有比较多的局限性。\r\n\r\n在 5.3.0 中我们终于引入了数值轴坐标轴刻度对齐的功能。可以在需要对齐刻度的坐标轴中配置`alignTicks: true`。该坐标轴就会根据第一个坐标轴的刻度划分去调整自己的刻度，实现自动对齐。\r\n\r\n```js live { layout: 'bt' }\r\noption = {\r\n  tooltip: {\r\n    trigger: 'axis'\r\n  },\r\n  legend: {},\r\n  xAxis: [\r\n    {\r\n      type: 'category',\r\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n      axisPointer: {\r\n        type: 'shadow'\r\n      }\r\n    }\r\n  ],\r\n  yAxis: [\r\n    {\r\n      type: 'value',\r\n      name: 'Precipitation',\r\n      alignTicks: true,\r\n      axisLabel: {\r\n        formatter: '{value} ml'\r\n      }\r\n    },\r\n    {\r\n      type: 'value',\r\n      name: 'Temperature',\r\n      axisLabel: {\r\n        formatter: '{value} °C'\r\n      }\r\n    }\r\n  ],\r\n  series: [\r\n    {\r\n      name: 'Evaporation',\r\n      type: 'bar',\r\n      // prettier-ignore\r\n      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]\r\n    },\r\n    {\r\n      name: 'Precipitation',\r\n      type: 'bar',\r\n      // prettier-ignore\r\n      data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]\r\n    },\r\n    {\r\n      name: 'Temperature',\r\n      type: 'line',\r\n      yAxisIndex: 1,\r\n      data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n## 支持高亮和选中状态的关闭\r\n\r\nECharts 中高亮状态可以在鼠标移到图形上的时候给用户提供反馈，但是在图表中有海量图形的时候，高亮的动画也可能带来交互上的性能问题。特别在 [tooltip](${optionPath}tooltip) 或者[图例组件](${optionPath}legend)联动触发的高亮会同时高亮多个图形。\r\n\r\n因此在这个版本中我们新增了`emphasis.disabled`配置项。如果不需要高亮的反馈，又对交互性能非常在意的话，可以通过这个配置项来关闭高亮状态。\r\n\r\n与此同时，对于选中状态，我们也新增了`select.disabled`。该配置项可以用于细粒度配置部分数据不可选。\r\n\r\n## 支持整个系列的选中\r\n\r\n在 5.3.0 中我们支持将`selectedMode`配置为`'series'`以实现系列所有数据的选中。\r\n\r\n## tooltip 中的数值格式化\r\n\r\ntooltip 可以在用户移到图形上的时候通过提示框显示更详细的相关信息，ECharts 也提供了`formatter`回调函数可以让开发者更灵活的自定义提示框的内容。\r\n\r\n但是我们发现大部分时候开发者只是需要格式化提示框中的数字部分，例如固定精度，加上`$`前缀等等，而之前为了格式化数字开发者只能通过`formatter`重写整个提示框的内容。特别是在 5.0 后 ECharts 的提示框结构更复杂，样式更美观了，重写变得成本很大而且很难达到默认的效果。\r\n\r\n因此在这个版本我们为 tooltip 新增了`valueFormatter`配置项用于数值部分的格式化。\r\n\r\n还是刚才那个坐标轴对齐的例子，我们可以为提示框中的数值部分加上 °C 和 ml 的后缀。\r\n\r\n```js live { layout: 'bt' }\r\noption = {\r\n  tooltip: {\r\n    trigger: 'axis'\r\n  },\r\n  legend: {},\r\n  xAxis: [\r\n    {\r\n      type: 'category',\r\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n      axisPointer: {\r\n        type: 'shadow'\r\n      }\r\n    }\r\n  ],\r\n  yAxis: [\r\n    {\r\n      type: 'value',\r\n      name: 'Precipitation',\r\n      alignTicks: true,\r\n      axisLabel: {\r\n        formatter: '{value} ml'\r\n      }\r\n    },\r\n    {\r\n      type: 'value',\r\n      name: 'Temperature',\r\n      axisLabel: {\r\n        formatter: '{value} °C'\r\n      }\r\n    }\r\n  ],\r\n  series: [\r\n    {\r\n      name: 'Evaporation',\r\n      type: 'bar',\r\n      tooltip: {\r\n        valueFormatter: value => value + ' ml'\r\n      },\r\n      // prettier-ignore\r\n      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]\r\n    },\r\n    {\r\n      name: 'Precipitation',\r\n      type: 'bar',\r\n      tooltip: {\r\n        valueFormatter: value => value + ' ml'\r\n      },\r\n      // prettier-ignore\r\n      data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]\r\n    },\r\n    {\r\n      name: 'Temperature',\r\n      type: 'line',\r\n      yAxisIndex: 1,\r\n      tooltip: {\r\n        valueFormatter: value => value + ' °C'\r\n      },\r\n      data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n每个系列都可以根据自己的数值格式配置自己的`valueFormatter`。\r\n\r\n## 更灵活的扇区圆角\r\n\r\n在 5.0 中我们为扇区新增了圆角的配置，可以让饼图，旭日图变得更有趣。之前圆角的配置只支持内半径和外半径分开配置，这次我们更进一步，支持扇区的四个角都配置成不同的圆角大小，带来更灵活的呈现。\r\n\r\n```js live { layout: 'lr', height: 400 }\r\noption = {\r\n  tooltip: {\r\n    trigger: 'item'\r\n  },\r\n  legend: {\r\n    top: '5%',\r\n    left: 'center'\r\n  },\r\n  series: [\r\n    {\r\n      name: 'Access From',\r\n      type: 'pie',\r\n      radius: ['30%', '70%'],\r\n      roseType: 'angle',\r\n      itemStyle: {\r\n        borderRadius: [20, 5, 5, 10],\r\n        borderColor: '#fff',\r\n        borderWidth: 2\r\n      },\r\n      label: {\r\n        show: false\r\n      },\r\n      data: [\r\n        { value: 800, name: 'Search Engine' },\r\n        { value: 735, name: 'Direct' },\r\n        { value: 580, name: 'Email' },\r\n        { value: 484, name: 'Union Ads' },\r\n        { value: 400, name: 'Video Ads' }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n## 饼图的复杂标签优化\r\n\r\n饼图一直是 ECharts 中标签呈现最复杂的图表之一，我们从 5.0 开始就一直在饼图的标签布局、显示上做了很多的优化。\r\n\r\n这次我们针对使用了换行，背景色，富文本等格式比较复杂的饼图标签做了深度的优化。在宽度的自适应、超出容器、引导线的计算上比之前有了更好的效果：\r\n\r\n|                5.2.2 (Before)                 |                5.3.0 (After)                |\r\n| :-------------------------------------------: | :-----------------------------------------: |\r\n| ![before](images/5-3-0/pie-label-before.png)  | ![after](images/5-3-0/pie-label-after.png)  |\r\n| ![before](images/5-3-0/pie-label-before2.png) | ![after](images/5-3-0/pie-label-after2.png) |\r\n\r\n## 柱状图 large 模式优化\r\n\r\n在数据量很多（> 2k）的时候，我们支持柱状图通过开启 [large](${optionPath}series-bar.large) 模式来加速渲染，提升交互性能，但是之前 [large](${optionPath}series-bar.large) 模式下对柱状图布局比较简单，不支持多系列堆叠后的布局。在 5.3.0 中我们对 [large](${optionPath}series-bar.large) 模式的布局进行了优化，跟普通模式保持了一致性。我们可以在更多的场景中通过开启 [large](${optionPath}series-bar.large) 来优化柱状图的性能。\r\n\r\n除此之外，优化后的柱状图布局也修复了在对数轴这样的非线性轴上堆叠效果不正确的 bug。\r\n\r\n## 非兼容改动\r\n\r\n### registerMap 和 getMap 方法需要在引入地图组件后才能使用\r\n\r\n为了减少最小打包的体积，我们从核心模块中移除了地图数据管理的方法`getMap`和`registerMap`。\r\n\r\n如果你是[按需引入](/handbook/zh/basics/import/#%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5-echarts-%E5%9B%BE%E8%A1%A8%E5%92%8C%E7%BB%84%E4%BB%B6) ECharts 组件的话，需要保证先引入了`GeoComponent`或者`MapChart`之后，才能使用`registerMap`注册地图数据。\r\n\r\n```ts\r\nimport * as echarts from 'echarts/core';\r\nimport { MapChart } from 'echarts/charts';\r\n\r\necharts.use([MapChart]);\r\n\r\n// 必须在使用 use 方法注册了 MapChart 后才能使用 registerMap 注册地图\r\necharts.registerMap('world', worldJSON);\r\n```\r\n\r\n如果你是使用`import * as echarts from 'echarts'`全量引入，这次改动不会对你产生任何影响。\r\n\r\n### 折线图移除默认高亮加粗的效果\r\n\r\n我们在 5.0 里对折线图引入了默认高亮加粗的效果，但是社区反馈这个在很多场景效果并不好，所以在这个版本我们将这个效果从默认开启改为默认关闭，如果需要使用高亮加粗，则可以显式配置：\r\n\r\n```ts\r\nseries = {\r\n  type: 'line',\r\n  //...\r\n  emphasis: {\r\n    lineStyle: {\r\n      width: 'bolder'\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n## 完整更新记录\r\n\r\n查看[版本更新](${mainSitePath}/changelog.html#v5-3-0)\r\n"}}]);
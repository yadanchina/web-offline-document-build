import{_ as e,o as r,c as s,a as o}from"./app.dbaf790a.js";const u=JSON.parse('{"title":"预览选项","description":"","frontmatter":{},"headers":[{"level":2,"title":"preview.host","slug":"preview-host","link":"#preview-host","children":[]},{"level":2,"title":"preview.port","slug":"preview-port","link":"#preview-port","children":[]},{"level":2,"title":"preview.strictPort","slug":"preview-strictport","link":"#preview-strictport","children":[]},{"level":2,"title":"preview.https","slug":"preview-https","link":"#preview-https","children":[]},{"level":2,"title":"preview.open","slug":"preview-open","link":"#preview-open","children":[]},{"level":2,"title":"preview.proxy","slug":"preview-proxy","link":"#preview-proxy","children":[]},{"level":2,"title":"preview.cors","slug":"preview-cors","link":"#preview-cors","children":[]},{"level":2,"title":"preview.headers","slug":"preview-headers","link":"#preview-headers","children":[]}],"relativePath":"config/preview-options.md"}'),t={name:"config/preview-options.md"},p=o(`<h1 id="preview-options" tabindex="-1">预览选项 <a class="header-anchor" href="#preview-options" aria-hidden="true">#</a></h1><h2 id="preview-host" tabindex="-1">preview.host <a class="header-anchor" href="#preview-host" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>string | boolean</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-host"><code>server.host</code></a></li></ul><p>为开发服务器指定 ip 地址。 设置为 <code>0.0.0.0</code> 或 <code>true</code> 会监听所有地址，包括局域网和公共地址。</p><p>还可以通过 CLI 进行设置，使用 <code>--host 0.0.0.0</code> 或 <code>--host</code>。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>在某些情况下，可能响应的是其他服务器而不是 Vite。 查看 <a href="./server-options.html#server-host"><code>server.host</code></a> 了解更多细节。</p></div><h2 id="preview-port" tabindex="-1">preview.port <a class="header-anchor" href="#preview-port" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>number</code></li><li><strong>默认：</strong> <code>4173</code></li></ul><p>指定开发服务器端口。注意，如果设置的端口已被使用，Vite 将自动尝试下一个可用端口，所以这可能不是最终监听的服务器端口。</p><p><strong>示例：</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3030</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">preview</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="preview-strictport" tabindex="-1">preview.strictPort <a class="header-anchor" href="#preview-strictport" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-strictport"><code>server.strictPort</code></a></li></ul><p>设置为 <code>true</code> 时，如果端口已被使用，则直接退出，而不会再进行后续端口的尝试。</p><h2 id="preview-https" tabindex="-1">preview.https <a class="header-anchor" href="#preview-https" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>boolean | https.ServerOptions</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-https"><code>server.https</code></a></li></ul><p>启用 TLS + HTTP/2。注意，只有在与 <a href="./server-options.html#server-proxy"><code>server.proxy</code> 选项</a> 同时使用时，才会降级为 TLS。</p><p>该值也可以传递给 <code>https.createServer()</code> 的 <a href="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener" target="_blank" rel="noreferrer">options 对象</a>。</p><h2 id="preview-open" tabindex="-1">preview.open <a class="header-anchor" href="#preview-open" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>boolean | string</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-open"><code>server.open</code></a></li></ul><p>开发服务器启动时，自动在浏览器中打开应用程序。当该值为字符串时，它将被用作 URL 的路径名。如果你想在你喜欢的某个浏览器打开该开发服务器，你可以设置环境变量 <code>p<wbr>rocess.env.BROWSER</code> （例如 <code>firefox</code>）。欲了解更多细节，请参阅 <a href="https://github.com/sindresorhus/open#app" target="_blank" rel="noreferrer"><code>open</code> 包的源码</a>。</p><p><code>BROWSER</code> 和 <code>BROWSER_ARGS</code> 是两个特殊的环境变量，你可以在 <code>.env</code> 文件中设置它们用以配置本选项。查看 <a href="https://github.com/sindresorhus/open#app" target="_blank" rel="noreferrer"><code>open</code> 这个包</a> 了解更多详情。</p><h2 id="preview-proxy" tabindex="-1">preview.proxy <a class="header-anchor" href="#preview-proxy" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>Record&lt;string, string | ProxyOptions&gt;</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-proxy"><code>server.proxy</code></a></li></ul><p>为开发服务器配置自定义代理规则。其值的结构为 <code>{ key: options }</code> 的对象。如果 key 以 <code>^</code> 开头，它将被识别为 <code>RegExp</code>，其中 <code>configure</code> 选项可用于访问代理实例。</p><p>基于 <a href="https://github.com/http-party/node-http-proxy" target="_blank" rel="noreferrer"><code>http-proxy</code></a> 实现，完整的参数列表参见 <a href="https://github.com/http-party/node-http-proxy#options" target="_blank" rel="noreferrer">此链接</a>。</p><h2 id="preview-cors" tabindex="-1">preview.cors <a class="header-anchor" href="#preview-cors" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>boolean | CorsOptions</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-cors"><code>server.cors</code></a></li></ul><p>为开发服务器配置 CORS。此功能默认启用并支持任何来源。可传递一个 <a href="https://github.com/expressjs/cors#configuration-options" target="_blank" rel="noreferrer">options 对象</a> 来进行配置，或者传递 <code>false</code> 来禁用此行为。</p><h2 id="preview-headers" tabindex="-1">preview.headers <a class="header-anchor" href="#preview-headers" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>OutgoingHttpHeaders</code></li></ul><p>指明服务器返回的响应头。</p>`,32),n=[p];function a(l,i,c,d,h,v){return r(),s("div",null,n)}const y=e(t,[["render",a]]);export{u as __pageData,y as default};

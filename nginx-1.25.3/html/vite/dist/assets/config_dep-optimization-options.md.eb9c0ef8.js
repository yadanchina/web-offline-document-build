import{_ as e,o as s,c as o,a as i}from"./app.dbaf790a.js";const h=JSON.parse('{"title":"依赖优化选项","description":"","frontmatter":{},"headers":[{"level":2,"title":"optimizeDeps.entries","slug":"optimizedeps-entries","link":"#optimizedeps-entries","children":[]},{"level":2,"title":"optimizeDeps.exclude","slug":"optimizedeps-exclude","link":"#optimizedeps-exclude","children":[]},{"level":2,"title":"optimizeDeps.include","slug":"optimizedeps-include","link":"#optimizedeps-include","children":[]},{"level":2,"title":"optimizeDeps.esbuildOptions","slug":"optimizedeps-esbuild-options","link":"#optimizedeps-esbuild-options","children":[]},{"level":2,"title":"optimizeDeps.force","slug":"optimizedeps-force","link":"#optimizedeps-force","children":[]},{"level":2,"title":"optimizeDeps.disabled","slug":"optimizedeps-disabled","link":"#optimizedeps-disabled","children":[]},{"level":2,"title":"optimizeDeps.needsInterop","slug":"optimizedeps-needsinterop","link":"#optimizedeps-needsinterop","children":[]}],"relativePath":"config/dep-optimization-options.md"}'),n={name:"config/dep-optimization-options.md"},l=i(`<h1 id="dep-optimization-options" tabindex="-1">依赖优化选项 <a class="header-anchor" href="#dep-optimization-options" aria-hidden="true">#</a></h1><ul><li><strong>相关内容：</strong> <a href="/guide/dep-pre-bundling.html">依赖预构建</a></li></ul><h2 id="optimizedeps-entries" tabindex="-1">optimizeDeps.entries <a class="header-anchor" href="#optimizedeps-entries" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>string | string[]</code></li></ul><p>默认情况下，Vite 会抓取你的 <code>index.html</code> 来检测需要预构建的依赖项（忽略了<code>node_modules</code>、<code>build.outDir</code>、<code>__tests__</code> 和 <code>coverage</code>）。如果指定了 <code>build.rollupOptions.input</code>，Vite 将转而去抓取这些入口点。</p><p>如果这两者都不合你意，则可以使用此选项指定自定义条目——该值需要遵循 <a href="https://github.com/mrmlnc/fast-glob#basic-syntax" target="_blank" rel="noreferrer">fast-glob 模式</a> ，或者是相对于 Vite 项目根目录的匹配模式数组。当显式声明了 <code>optimizeDeps.entries</code> 时默认只有 <code>node_modules</code> 和 <code>build.outDir</code> 文件夹会被忽略。如果还需忽略其他文件夹，你可以在模式列表中使用以 <code>!</code> 为前缀的、用来匹配忽略项的模式。</p><h2 id="optimizedeps-exclude" tabindex="-1">optimizeDeps.exclude <a class="header-anchor" href="#optimizedeps-exclude" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li></ul><p>在预构建中强制排除的依赖项。</p><div class="warning custom-block"><p class="custom-block-title">CommonJS</p><p>CommonJS 的依赖不应该排除在优化外。如果一个 ESM 依赖被排除在优化外，但是却有一个嵌套的 CommonJS 依赖，则应该为该 CommonJS 依赖添加 <code>optimizeDeps.include</code>。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">include</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">esm-dep &gt; cjs-dep</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></div><h2 id="optimizedeps-include" tabindex="-1">optimizeDeps.include <a class="header-anchor" href="#optimizedeps-include" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li></ul><p>默认情况下，不在 <code>node_modules</code> 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包。</p><p><strong>实验性：</strong> 如果你使用的是一个有很多深层导入的库，你也可以指定一个尾部的 glob 模式来一次性地预构建所有深层导入。这将避免在使用新的深层导入时不断地预构建。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">include</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-lib/components/**/*.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="optimizedeps-esbuild-options" tabindex="-1">optimizeDeps.esbuildOptions <a class="header-anchor" href="#optimizedeps-esbuild-options" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <a href="https://esbuild.github.io/api/#simple-options" target="_blank" rel="noreferrer"><code>EsbuildBuildOptions</code></a></li></ul><p>在依赖扫描和优化过程中传递给 esbuild 的选项。</p><p>某些选项进行了省略，因为修改它们与 Vite 的优化方案并不兼容。</p><ul><li>忽略了 <code>external</code> 选项，请使用 Vite 的 <code>optimizeDeps.exclude</code> 选项</li><li><code>plugins</code> 与 Vite 的 dep 插件合并</li></ul><h2 id="optimizedeps-force" tabindex="-1">optimizeDeps.force <a class="header-anchor" href="#optimizedeps-force" aria-hidden="true">#</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li></ul><p>设置为 <code>true</code> 可以强制依赖预构建，而忽略之前已经缓存过的、已经优化过的依赖。</p><h2 id="optimizedeps-disabled" tabindex="-1">optimizeDeps.disabled <a class="header-anchor" href="#optimizedeps-disabled" aria-hidden="true">#</a></h2><ul><li><strong>实验性：</strong> <a href="https://github.com/vitejs/vite/discussions/13839" target="_blank" rel="noreferrer">提供反馈</a></li><li><strong>类型：</strong> <code>boolean | &#39;build&#39; | &#39;dev&#39;</code></li><li><strong>默认：</strong> <code>&#39;build&#39;</code></li></ul><p>禁用依赖优化，值为 <code>true</code> 将在构建和开发期间均禁用优化器。传 <code>&#39;build&#39;</code> 或 <code>&#39;dev&#39;</code> 将仅在其中一种模式下禁用优化器。默认情况下，仅在开发阶段启用依赖优化。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在构建模式下依赖优化是 <strong>实验性</strong> 的。如果开启此项，那么它将消除开发与构建最终产物之间的最明显的区别之一。<a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noreferrer"><code>@rollup/plugin-commonjs</code></a> 在此处将不再需要，因为 esbuild 会将纯 CJS 依赖转换为 ESM。</p><p>如果你想尝试该构建策略，你可以使用 <code>optimizeDeps.disabled: false</code>。<code>@rollup/plugin-commonjs</code> 可以通过设置 <code>build.commonjsOptions: { include: [] }</code> 来移除。</p></div><h2 id="optimizedeps-needsinterop" tabindex="-1">optimizeDeps.needsInterop <a class="header-anchor" href="#optimizedeps-needsinterop" aria-hidden="true">#</a></h2><ul><li><strong>实验性</strong></li><li><strong>类型:</strong> <code>string[]</code></li></ul><p>当导入这些依赖项时，会强制 ESM 转换。Vite 能够正确检测到依赖项是否需要转换处理（interop），因此通常不需要使用此选项。然而，不同的依赖项组合可能导致其中一些包以不同方式预构建。将这些包添加到 <code>needsInterop</code> 中可以通过避免重新加载整个页面、加快冷启动速度。如果某个依赖项符合此情况，Vite 将抛出警告，建议你在配置中添加该包名。</p>`,30),p=[l];function t(a,d,c,r,u,m){return s(),o("div",null,p)}const g=e(n,[["render",t]]);export{h as __pageData,g as default};

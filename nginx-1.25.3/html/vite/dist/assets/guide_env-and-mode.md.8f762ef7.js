import{_ as e,o as s,c as n,a}from"./app.dbaf790a.js";const h=JSON.parse('{"title":"环境变量和模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"环境变量","slug":"env-variables","link":"#env-variables","children":[{"level":3,"title":"生产环境替换","slug":"production-replacement","link":"#production-replacement","children":[]}]},{"level":2,"title":".env 文件","slug":"env-files","link":"#env-files","children":[{"level":3,"title":"TypeScript 的智能提示","slug":"intellisense","link":"#intellisense","children":[]}]},{"level":2,"title":"HTML 环境变量替换","slug":"html-env-replacement","link":"#html-env-replacement","children":[]},{"level":2,"title":"模式","slug":"modes","link":"#modes","children":[]}],"relativePath":"guide/env-and-mode.md"}'),o={name:"guide/env-and-mode.md"},l=a(`<h1 id="env-variables-and-modes" tabindex="-1">环境变量和模式 <a class="header-anchor" href="#env-variables-and-modes" aria-hidden="true">#</a></h1><h2 id="env-variables" tabindex="-1">环境变量 <a class="header-anchor" href="#env-variables" aria-hidden="true">#</a></h2><p>Vite 在一个特殊的 <strong><code>i<wbr>mport.meta.env</code></strong> 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量：</p><ul><li><p><strong><code>i<wbr>mport.meta.env.MODE</code></strong>: {string} 应用运行的<a href="#modes">模式</a>。</p></li><li><p><strong><code>i<wbr>mport.meta.env.BASE_URL</code></strong>: {string} 部署应用时的基本 URL。他由<a href="/config/shared-options.html#base"><code>base</code> 配置项</a>决定。</p></li><li><p><strong><code>i<wbr>mport.meta.env.PROD</code></strong>: {boolean} 应用是否运行在生产环境。</p></li><li><p><strong><code>i<wbr>mport.meta.env.DEV</code></strong>: {boolean} 应用是否运行在开发环境 (永远与 <code>i<wbr>mport.meta.env.PROD</code>相反)。</p></li><li><p><strong><code>i<wbr>mport.meta.env.SSR</code></strong>: {boolean} 应用是否运行在 <a href="./ssr.html#conditional-logic">server</a> 上。</p></li></ul><h3 id="production-replacement" tabindex="-1">生产环境替换 <a class="header-anchor" href="#production-replacement" aria-hidden="true">#</a></h3><p>在生产环境中，这些环境变量会在构建时被<strong>静态替换</strong>，因此，在引用它们时请使用完全静态的字符串。动态的 key 将无法生效。例如，动态 key 取值 <code>i<wbr>mport.meta.env[key]</code> 是无效的。</p><p>它还将替换出现在 JavaScript 和 Vue 模板中的字符串。这本应是非常少见的，但也可能是不小心为之的。在这种情况下你可能会看到类似 <code>Missing Semicolon</code> 或 <code>Unexpected token</code> 等错误，例如当 <code>&quot;p<wbr>rocess.env.NODE_ENV&quot;</code> 被替换为 <code>&quot;&quot;development&quot;: &quot;</code>。有一些方法可以避免这个问题：</p><ul><li><p>对于 JavaScript 字符串，你可以使用 unicode 零宽度空格来分割这个字符串，例如： <code>&#39;i<wbr>mport.meta\\u200b.env.MODE&#39;</code>。</p></li><li><p>对于 Vue 模板或其他编译到 JavaScript 字符串的 HTML，你可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr" target="_blank" rel="noreferrer"><code>&lt;wbr&gt;</code> 标签</a>，例如：<code>i<wbr>mport.meta.&lt;wbr&gt;env.MODE</code>。</p></li></ul><h2 id="env-files" tabindex="-1"><code>.env</code> 文件 <a class="header-anchor" href="#env-files" aria-hidden="true">#</a></h2><p>Vite 使用 <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noreferrer">dotenv</a> 从你的 <a href="/config/shared-options.html#envdir">环境目录</a> 中的下列文件加载额外的环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.env                # 所有情况下都会加载</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">环境加载优先级</p><p>一份用于指定模式的文件（例如 <code>.env.production</code>）会比通用形式的优先级更高（例如 <code>.env</code>）。</p><p>另外，Vite 执行时已经存在的环境变量有最高的优先级，不会被 <code>.env</code> 类文件覆盖。例如当运行 <code>VITE_SOME_KEY=123 vite build</code> 的时候。</p><p><code>.env</code> 类文件会在 Vite 启动一开始时被加载，而改动会在重启服务器后生效。</p></div><p>加载的环境变量也会通过 <code>i<wbr>mport.meta.env</code> 以字符串形式暴露给客户端源码。</p><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 <code>VITE_</code> 为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这些环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">VITE_SOME_KEY=123</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_PASSWORD=foobar</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>只有 <code>VITE_SOME_KEY</code> 会被暴露为 <code>i<wbr>mport.meta.env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VITE_SOME_KEY) </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DB_PASSWORD) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span></code></pre></div><p>此外，Vite 使用 <a href="https://github.com/motdotla/dotenv-expand" target="_blank" rel="noreferrer">dotenv-expand</a> 来直接拓展变量。想要了解更多相关语法，请查看 <a href="https://github.com/motdotla/dotenv-expand#what-rules-does-the-expansion-engine-follow" target="_blank" rel="noreferrer">它们的文档</a>。</p><p>请注意，如果想要在环境变量中使用 <code>$</code> 符号，则必须使用 <code>\\</code> 对其进行转义。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">KEY=123</span></span>
<span class="line"><span style="color:#A6ACCD;">NEW_KEY1=test$foo   # test</span></span>
<span class="line"><span style="color:#A6ACCD;">NEW_KEY2=test\\$foo  # test$foo</span></span>
<span class="line"><span style="color:#A6ACCD;">NEW_KEY3=test$KEY   # test123</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果你想自定义 env 变量的前缀，请参阅 <a href="/config/shared-options.html#envprefix">envPrefix</a>。</p><div class="warning custom-block"><p class="custom-block-title">安全注意事项</p><ul><li><p><code>.env.*.local</code> 文件应是本地的，可以包含敏感变量。你应该将 <code>*.local</code> 添加到你的 <code>.gitignore</code> 中，以避免它们被 git 检入。</p></li><li><p>由于任何暴露给 Vite 源码的变量最终都将出现在客户端包中，<code>VITE_*</code> 变量应该不包含任何敏感信息。</p></li></ul></div><h3 id="intellisense" tabindex="-1">TypeScript 的智能提示 <a class="header-anchor" href="#intellisense" aria-hidden="true">#</a></h3><p>默认情况下，Vite 在 <a href="https://github.com/vitejs/vite/blob/main/packages/vite/client.d.ts" target="_blank" rel="noreferrer"><code>vite/client.d.ts</code></a> 中为 <code>i<wbr>mport.meta.env</code> 提供了类型定义。随着在 <code>.env[mode]</code> 文件中自定义了越来越多的环境变量，你可能想要在代码中获取这些以 <code>VITE_</code> 为前缀的用户自定义环境变量的 TypeScript 智能提示。</p><p>要想做到这一点，你可以在 <code>src</code> 目录下创建一个 <code>env.d.ts</code> 文件，接着按下面这样增加 <code>ImportMetaEnv</code> 的定义：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">vite/client</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">VITE_APP_TITLE</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 更多环境变量...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMeta</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果你的代码依赖于浏览器环境的类型，比如 <a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.dom.d.ts" target="_blank" rel="noreferrer">DOM</a> 和 <a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.webworker.d.ts" target="_blank" rel="noreferrer">WebWorker</a>，你可以在 <code>tsconfig.json</code> 中修改 <a href="https://www.typescriptlang.org/tsconfig#lib" target="_blank" rel="noreferrer">lib</a> 字段来获取类型支持。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">WebWorker</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="html-env-replacement" tabindex="-1">HTML 环境变量替换 <a class="header-anchor" href="#html-env-replacement" aria-hidden="true">#</a></h2><p>Vite 还支持在 HTML 文件中替换环境变量。<code>i<wbr>mport.meta.env</code> 中的任何属性都可以通过特殊的 <code>%ENV_NAME%</code> 语法在 HTML 文件中使用：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Vite is running in %MODE%</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Using data from %VITE_API_URL%</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>如果环境变量在 <code>i<wbr>mport.meta.env</code> 中不存在，比如不存在的 <code>%NON_EXISTENT%</code>，则会将被忽略而不被替换，这与 JS 中的 <code>i<wbr>mport.meta.env.NON_EXISTENT</code> 不同，JS 中会被替换为 <code>undefined</code>。</p><h2 id="modes" tabindex="-1">模式 <a class="header-anchor" href="#modes" aria-hidden="true">#</a></h2><p>默认情况下，开发服务器 (<code>dev</code> 命令) 运行在 <code>development</code> (开发) 模式，而 <code>build</code> 命令则运行在 <code>production</code> (生产) 模式。</p><p>这意味着当执行 <code>vite build</code> 时，它会自动加载 <code>.env.production</code> 中可能存在的环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># .env.production</span></span>
<span class="line"><span style="color:#A6ACCD;">VITE_APP_TITLE=My App</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在你的应用中，你可以使用 <code>i<wbr>mport.meta.env.VITE_APP_TITLE</code> 渲染标题。</p><p>在某些情况下，若想在 <code>vite build</code> 时运行不同的模式来渲染不同的标题，你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。例如，如果你想在 staging （预发布）模式下构建应用：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vite</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mode</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">staging</span></span>
<span class="line"></span></code></pre></div><p>还需要新建一个 <code>.env.staging</code> 文件：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># .env.staging</span></span>
<span class="line"><span style="color:#A6ACCD;">VITE_APP_TITLE=My App (staging)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>由于 <code>vite build</code> 默认运行生产模式构建，你也可以通过使用不同的模式和对应的 <code>.env</code> 文件配置来改变它，用以运行开发模式的构建：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># .env.testing</span></span>
<span class="line"><span style="color:#A6ACCD;">NODE_ENV=development</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,43),t=[l];function p(c,r,i,d,y,D){return s(),n("div",null,t)}const m=e(o,[["render",p]]);export{h as __pageData,m as default};

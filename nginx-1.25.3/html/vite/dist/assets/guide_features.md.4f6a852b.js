import{r as n,o as l,c as o,b as e,u as p,a as s}from"./app.dbaf790a.js";const t=`<svg viewBox="0 0 1440 495" fill="none" xmlns="http://www.w3.org/2000/svg">\r
<rect y="191" width="315" height="146" rx="10" fill="#C3E88C"/>\r
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="105.5" y="278.545">Entry</tspan></text>\r
<rect x="556" width="360" height="141" rx="10" fill="#C3E88C"/>\r
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="594" y="85.0455">async chunk A</tspan></text>\r
<rect x="1080" y="169" width="360" height="141" rx="10" fill="#C3E88C"/>\r
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="1091.5" y="254.045">common chunk C</tspan></text>\r
<rect x="556" y="354" width="360" height="141" rx="10" fill="#C3E88C"/>\r
<text fill="#15505C" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="40" font-weight="600" letter-spacing="0em"><tspan x="595.5" y="439.045">async chunk B</tspan></text>\r
<path d="M546.44 71.5452C546.741 70.1977 545.893 68.8613 544.545 68.5602L522.587 63.6533C521.239 63.3522 519.903 64.2004 519.602 65.5479C519.301 66.8954 520.149 68.2318 521.496 68.5329L541.015 72.8946L536.653 92.4132C536.352 93.7607 537.2 95.0971 538.548 95.3983C539.895 95.6994 541.232 94.8511 541.533 93.5036L546.44 71.5452ZM326.34 212.111L334.161 207.146L331.482 202.925L323.66 207.889L326.34 212.111ZM349.804 197.218L365.447 187.289L362.767 183.068L347.125 192.996L349.804 197.218ZM381.09 177.361L396.733 167.432L394.053 163.211L378.41 173.139L381.09 177.361ZM412.375 157.504L428.018 147.575L425.339 143.354L409.696 153.282L412.375 157.504ZM443.661 137.646L459.304 127.718L456.625 123.496L440.982 133.425L443.661 137.646ZM474.947 117.789L490.59 107.861L487.91 103.639L472.267 113.568L474.947 117.789ZM506.233 97.9322L521.875 88.0036L519.196 83.7821L503.553 93.7107L506.233 97.9322ZM537.518 78.075L545.34 73.1107L542.66 68.8893L534.839 73.8536L537.518 78.075ZM548.88 72.0904C549.482 69.3955 547.785 66.7226 545.09 66.1204L501.174 56.3065C498.479 55.7043 495.806 57.4008 495.203 60.0958C494.601 62.7907 496.298 65.4636 498.993 66.0658L538.03 74.7892L529.307 113.826C528.704 116.521 530.401 119.194 533.096 119.796C535.791 120.399 538.464 118.702 539.066 116.007L548.88 72.0904ZM327.679 214.221L335.501 209.257L330.142 200.814L322.321 205.779L327.679 214.221ZM351.144 199.329L366.787 189.4L361.428 180.957L345.785 190.886L351.144 199.329ZM382.429 179.471L398.072 169.543L392.713 161.1L377.071 171.029L382.429 179.471ZM413.715 159.614L429.358 149.686L423.999 141.243L408.356 151.171L413.715 159.614ZM445.001 139.757L460.644 129.829L455.285 121.386L439.642 131.314L445.001 139.757ZM476.287 119.9L491.929 109.971L486.571 101.529L470.928 111.457L476.287 119.9ZM507.572 100.043L523.215 90.1143L517.856 81.6714L502.213 91.6L507.572 100.043ZM538.858 80.1858L546.679 75.2215L541.321 66.7785L533.499 71.7428L538.858 80.1858Z" fill="#0B7285"/>\r
<path d="M544.718 442.395C546.04 441.998 546.791 440.605 546.395 439.282L539.935 417.729C539.539 416.407 538.145 415.656 536.823 416.052C535.5 416.449 534.749 417.842 535.146 419.165L540.888 438.323L521.729 444.065C520.407 444.461 519.656 445.855 520.052 447.177C520.449 448.5 521.842 449.251 523.165 448.854L544.718 442.395ZM323.814 324.201L331.636 328.415L334.007 324.013L326.186 319.799L323.814 324.201ZM347.278 336.844L362.921 345.272L365.293 340.871L349.65 332.442L347.278 336.844ZM378.564 353.701L394.207 362.129L396.579 357.728L380.936 349.299L378.564 353.701ZM409.85 370.558L425.493 378.987L427.864 374.585L412.222 366.156L409.85 370.558ZM441.136 387.415L456.778 395.844L459.15 391.442L443.507 383.013L441.136 387.415ZM472.421 404.272L488.064 412.701L490.436 408.299L474.793 399.871L472.421 404.272ZM503.707 421.129L519.35 429.558L521.722 425.156L506.079 416.728L503.707 421.129ZM534.993 437.987L542.814 442.201L545.186 437.799L537.364 433.585L534.993 437.987ZM545.435 444.79C548.081 443.997 549.582 441.21 548.79 438.565L535.871 395.459C535.078 392.814 532.291 391.312 529.646 392.105C527 392.898 525.499 395.685 526.292 398.33L537.775 436.646L499.459 448.129C496.814 448.922 495.312 451.709 496.105 454.354C496.898 457 499.685 458.501 502.33 457.708L545.435 444.79ZM322.628 326.402L330.45 330.616L335.193 321.813L327.372 317.598L322.628 326.402ZM346.093 339.045L361.735 347.473L366.479 338.67L350.836 330.241L346.093 339.045ZM377.378 355.902L393.021 364.33L397.765 355.527L382.122 347.098L377.378 355.902ZM408.664 372.759L424.307 381.187L429.05 372.384L413.407 363.955L408.664 372.759ZM439.95 389.616L455.593 398.045L460.336 389.241L444.693 380.813L439.95 389.616ZM471.235 406.473L486.878 414.902L491.622 406.098L475.979 397.67L471.235 406.473ZM502.521 423.33L518.164 431.759L522.907 422.955L507.265 414.527L502.521 423.33ZM533.807 440.187L541.628 444.402L546.372 435.598L538.55 431.384L533.807 440.187Z" fill="#0B7285"/>\r
<text fill="#0B7285" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="35" letter-spacing="0em"><tspan x="172" y="98.7273">dynamic import</tspan></text>\r
<text fill="#1864AB" xml:space="preserve" style="white-space: pre" font-family="Inter" font-size="35" letter-spacing="0em"><tspan x="1013" y="83.7273">direct import</tspan></text>\r
<path d="M1071.89 171.899C1074.05 171.404 1075.39 169.258 1074.9 167.105L1066.85 132.017C1066.35 129.864 1064.21 128.519 1062.05 129.014C1059.9 129.508 1058.55 131.654 1059.05 133.807L1066.21 164.996L1035.02 172.154C1032.86 172.648 1031.52 174.795 1032.01 176.948C1032.51 179.101 1034.65 180.446 1036.81 179.952L1071.89 171.899ZM918.876 77.3895L1068.88 171.389L1073.12 164.611L923.124 70.6105L918.876 77.3895Z" fill="#1864AB"/>\r
<path d="M1074.95 317.66C1075.31 315.481 1073.84 313.419 1071.66 313.055L1036.15 307.114C1033.97 306.75 1031.91 308.22 1031.55 310.399C1031.18 312.578 1032.65 314.64 1034.83 315.004L1066.39 320.285L1061.11 351.846C1060.75 354.025 1062.22 356.087 1064.4 356.452C1066.58 356.816 1068.64 355.345 1069 353.167L1074.95 317.66ZM923.323 427.256L1073.32 320.256L1068.68 313.744L918.677 420.744L923.323 427.256Z" fill="#1864AB"/>\r
</svg>\r
`,c=s(`<h1 id="features" tabindex="-1">功能 <a class="header-anchor" href="#features" aria-hidden="true">#</a></h1><p>对非常基础的使用来说，使用 Vite 开发和使用一个静态文件服务器并没有太大区别。然而，Vite 还通过原生 ESM 导入提供了许多主要用于打包场景的增强功能。</p><h2 id="npm-dependency-resolving-and-pre-bundling" tabindex="-1">NPM 依赖解析和预构建 <a class="header-anchor" href="#npm-dependency-resolving-and-pre-bundling" aria-hidden="true">#</a></h2><p>原生 ES 导入不支持下面这样的裸模块导入：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">someMethod</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-dep</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>上面的代码会在浏览器中抛出一个错误。Vite 将会检测到所有被加载的源文件中的此类裸模块导入，并执行以下操作:</p><ol><li><p><a href="./dep-pre-bundling.html">预构建</a> 它们可以提高页面加载速度，并将 CommonJS / UMD 转换为 ESM 格式。预构建这一步由 <a href="http://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a> 执行，这使得 Vite 的冷启动时间比任何基于 JavaScript 的打包器都要快得多。</p></li><li><p>重写导入为合法的 URL，例如 <code>/node_modules/.vite/deps/my-dep.js?v=f3sf2ebd</code> 以便浏览器能够正确导入它们。</p></li></ol><p><strong>依赖是强缓存的</strong></p><p>Vite 通过 HTTP 头来缓存请求得到的依赖，所以如果你想要编辑或调试一个依赖，请按照 <a href="./dep-pre-bundling.html#浏览器缓存">这里</a> 的步骤操作。</p><h2 id="hot-module-replacement" tabindex="-1">模块热替换 <a class="header-anchor" href="#hot-module-replacement" aria-hidden="true">#</a></h2><p>Vite 提供了一套原生 ESM 的 <a href="./api-hmr.html">HMR API</a>。 具有 HMR 功能的框架可以利用该 API 提供即时、准确的更新，而无需重新加载页面或清除应用程序状态。Vite 内置了 HMR 到 <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue" target="_blank" rel="noreferrer">Vue 单文件组件（SFC）</a> 和 <a href="https://github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react" target="_blank" rel="noreferrer">React Fast Refresh</a> 中。也通过 <a href="https://github.com/JoviDeCroock/prefresh/tree/main/packages/vite" target="_blank" rel="noreferrer">@prefresh/vite</a> 对 Preact 实现了官方集成。</p><p>注意，你不需要手动设置这些 —— 当你通过 <a href="./"><code>create-vite</code></a> 创建应用程序时，所选模板已经为你预先配置了这些。</p><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h2><p>Vite 天然支持引入 <code>.ts</code> 文件。</p><h3 id="transpile-only" tabindex="-1">仅执行转译 <a class="header-anchor" href="#transpile-only" aria-hidden="true">#</a></h3><p>请注意，Vite 仅执行 <code>.ts</code> 文件的转译工作，<strong>并不执行</strong> 任何类型检查。并假定类型检查已经被你的 IDE 或构建过程处理了。</p><p>Vite 之所以不把类型检查作为转换过程的一部分，是因为这两项工作在本质上是不同的。转译可以在每个文件的基础上进行，与 Vite 的按需编译模式完全吻合。相比之下，类型检查需要了解整个模块图。把类型检查塞进 Vite 的转换管道，将不可避免地损害 Vite 的速度优势。</p><p>Vite 的工作是尽可能快地将源模块转化为可以在浏览器中运行的形式。为此，我们建议将静态分析检查与 Vite 的转换管道分开。这一原则也适用于其他静态分析检查，例如 ESLint。</p><ul><li><p>在构建生产版本时，你可以在 Vite 的构建命令之外运行 <code>tsc --noEmit</code>。</p></li><li><p>在开发时，如果你需要更多的 IDE 提示，我们建议在一个单独的进程中运行 <code>tsc --noEmit --watch</code>，或者如果你喜欢在浏览器中直接看到上报的类型错误，可以使用 <a href="https://github.com/fi3ework/vite-plugin-checker" target="_blank" rel="noreferrer">vite-plugin-checker</a>。</p></li></ul><p>Vite 使用 <a href="https://github.com/evanw/esbuild" target="_blank" rel="noreferrer">esbuild</a> 将 TypeScript 转译到 JavaScript，约是 <code>tsc</code> 速度的 20~30 倍，同时 HMR 更新反映到浏览器的时间小于 50ms。</p><p>使用 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export" target="_blank" rel="noreferrer">仅含类型的导入和导出</a> 形式的语法可以避免潜在的 “仅含类型的导入被不正确打包” 的问题，写法示例如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">T</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">only/types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">T</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="typescript-compiler-options" tabindex="-1">TypeScript 编译器选项 <a class="header-anchor" href="#typescript-compiler-options" aria-hidden="true">#</a></h3><p><code>tsconfig.json</code> 中 <code>compilerOptions</code> 下的一些配置项需要特别注意。</p><h4 id="isolatedmodules" tabindex="-1"><code>isolatedModules</code> <a class="header-anchor" href="#isolatedmodules" aria-hidden="true">#</a></h4><p>应该设置为 <code>true</code>。</p><p>这是因为 <code>esbuild</code> 只执行没有类型信息的转译，它并不支持某些特性，如 <code>const enum</code> 和隐式类型导入。</p><p>你必须在 <code>tsconfig.json</code> 中的 <code>compilerOptions</code> 下设置 <code>&quot;isolatedModules&quot;: true</code>。如此做，TS 会警告你不要使用隔离（isolated）转译的功能。</p><p>然而，一些库（如：<a href="https://github.com/vuejs/core/issues/1228" target="_blank" rel="noreferrer"><code>vue</code></a>）不能很好地与 <code>&quot;isolatedModules&quot;: true</code> 共同工作。你可以在上游仓库修复好之前暂时使用 <code>&quot;skipLibCheck&quot;: true</code> 来缓解这个错误。</p><h4 id="usedefineforclassfields" tabindex="-1"><code>useDefineForClassFields</code> <a class="header-anchor" href="#usedefineforclassfields" aria-hidden="true">#</a></h4><p>从 Vite v2.5.0 开始，如果 TypeScript 的 target 是 <code>ESNext</code> 或 <code>ES2022</code> 及更新版本，此选项默认值则为 <code>true</code>。这与 <a href="https://github.com/microsoft/TypeScript/pull/42663" target="_blank" rel="noreferrer"><code>tsc</code> v4.3.2 及以后版本的行为</a> 一致。这也是标准的 ECMAScript 的运行时行为。</p><p>但对于那些习惯其他编程语言或旧版本 TypeScript 的开发者来说，这可能是违反直觉的。 你可以参阅 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier" target="_blank" rel="noreferrer">TypeScript 3.7 发布日志</a> 中了解更多关于如何兼容的信息。</p><p>如果你正在使用一个严重依赖 class fields 的库，请注意该库对此选项的预期设置。</p><p>大多数库都希望 <code>&quot;useDefineForClassFields&quot;: true</code>，如 <a href="https://mobx.js.org/installation.html#use-spec-compliant-transpilation-for-class-properties" target="_blank" rel="noreferrer">MobX</a>。</p><p>但是有几个库还没有兼容这个新的默认值，其中包括 <a href="https://github.com/lit/lit-element/issues/1030" target="_blank" rel="noreferrer"><code>lit-element</code></a>。如果遇到这种情况，请将 <code>useDefineForClassFields</code> 设置为 <code>false</code>。</p><h4 id="other-compiler-options-affecting-the-build-result" tabindex="-1">影响构建结果的其他编译器选项 <a class="header-anchor" href="#other-compiler-options-affecting-the-build-result" aria-hidden="true">#</a></h4><ul><li><a href="https://www.typescriptlang.org/tsconfig#extends" target="_blank" rel="noreferrer"><code>extends</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues" target="_blank" rel="noreferrer"><code>importsNotUsedAsValues</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#preserveValueImports" target="_blank" rel="noreferrer"><code>preserveValueImports</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFactory" target="_blank" rel="noreferrer"><code>jsxFactory</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFragmentFactory" target="_blank" rel="noreferrer"><code>jsxFragmentFactory</code></a></li></ul><p>如果你的代码库很难迁移到 <code>&quot;isolatedModules&quot;: true</code>，或许你可以尝试通过第三方插件来解决，比如 <a href="https://www.npmjs.com/package/rollup-plugin-friendly-type-imports" target="_blank" rel="noreferrer">rollup-plugin-friendly-type-imports</a>。但是，这种方式不被 Vite 官方支持。</p><h3 id="client-types" tabindex="-1">客户端类型 <a class="header-anchor" href="#client-types" aria-hidden="true">#</a></h3><p>Vite 默认的类型定义是写给它的 Node.js API 的。要将其补充到一个 Vite 应用的客户端代码环境中，请添加一个 <code>d.ts</code> 声明文件：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">vite/client</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>或者，你也可以将 <code>vite/client</code> 添加到 <code>tsconfig.json</code> 中的 <code>compilerOptions.types</code> 下：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite/client</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这将会提供以下类型定义补充：</p><ul><li>资源导入 (例如：导入一个 <code>.svg</code> 文件)</li><li><code>i<wbr>mport.meta.env</code> 上 Vite 注入的环境变量的类型定义</li><li><code>i<wbr>mport.meta.hot</code> 上的 <a href="./api-hmr.html">HMR API</a> 类型定义</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要覆盖默认的类型定义，请添加一个包含你所定义类型的文件，请在三斜线注释 reference <code>vite/client</code> 前添加定义。</p><p>例如，要为 React 组件中的 <code>*.svg</code> 文件定义类型：</p><ul><li><code>vite-env-override.d.ts</code> (the file that contains your typings):<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.svg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">SVGProps</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">SVGElement</span><span style="color:#89DDFF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li>The file containing the reference to <code>vite/client</code>:<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">./vite-env-override.d.ts</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">vite/client</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"></span></code></pre></div></li></ul></div><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-hidden="true">#</a></h2><p>Vite 为 Vue 提供第一优先级支持：</p><ul><li>Vue 3 单文件组件支持：<a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue" target="_blank" rel="noreferrer">@vitejs/plugin-vue</a></li><li>Vue 3 JSX 支持：<a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue-jsx" target="_blank" rel="noreferrer">@vitejs/plugin-vue-jsx</a></li><li>Vue 2.7 SFC 支持：<a href="https://github.com/vitejs/vite-plugin-vue2" target="_blank" rel="noreferrer">@vitejs/plugin-vue2</a></li><li>Vue 2.7 JSX support via <a href="https://github.com/vitejs/vite-plugin-vue2-jsx" target="_blank" rel="noreferrer">@vitejs/plugin-vue2-jsx</a></li></ul><h2 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-hidden="true">#</a></h2><p><code>.jsx</code> 和 <code>.tsx</code> 文件同样开箱即用。JSX 的转译同样是通过 <a href="https://esbuild.github.io" target="_blank" rel="noreferrer">esbuild</a>。</p><p>Vue 用户应使用官方提供的 <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue-jsx" target="_blank" rel="noreferrer">@vitejs/plugin-vue-jsx</a> 插件，它提供了 Vue 3 特性的支持，包括 HMR，全局组件解析，指令和插槽。</p><p>如果不是在 React 或 Vue 中使用 JSX，自定义的 <code>jsxFactory</code> 和 <code>jsxFragment</code> 可以使用 <a href="/config/shared-options.html#esbuild"><code>esbuild</code> 选项</a> 进行配置。例如对 Preact：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">esbuild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFactory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFragment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fragment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>更多细节详见 <a href="https://esbuild.github.io/content-types/#jsx" target="_blank" rel="noreferrer">esbuild 文档</a>.</p><p>你可以使用 <code>jsxInject</code>（这是一个仅在 Vite 中使用的选项）为 JSX 注入 helper，以避免手动导入：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">esbuild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxInject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">import React from &#39;react&#39;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-hidden="true">#</a></h2><p>导入 <code>.css</code> 文件将会把内容插入到 <code>&lt;style&gt;</code> 标签中，同时也带有 HMR 支持。也能够以字符串的形式检索处理后的、作为其模块默认导出的 CSS。</p><h3 id="import-inlining-and-rebasing" tabindex="-1"><code>@import</code> 内联和变基 <a class="header-anchor" href="#import-inlining-and-rebasing" aria-hidden="true">#</a></h3><p>Vite 通过 <code>postcss-import</code> 预配置支持了 CSS <code>@import</code> 内联，Vite 的路径别名也遵从 CSS <code>@import</code>。换句话说，所有 CSS <code>url()</code> 引用，即使导入的文件在不同的目录中，也总是自动变基，以确保正确性。</p><p>Sass 和 Less 文件也支持 <code>@import</code> 别名和 URL 变基（具体请参阅 <a href="#css-pre-processors">CSS Pre-processors</a>）。</p><h3 id="postcss" tabindex="-1">PostCSS <a class="header-anchor" href="#postcss" aria-hidden="true">#</a></h3><p>如果项目包含有效的 PostCSS 配置 (任何受 <a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noreferrer">postcss-load-config</a> 支持的格式，例如 <code>postcss.config.js</code>)，它将会自动应用于所有已导入的 CSS。</p><p>请注意，CSS 最小化压缩将在 PostCSS 之后运行，并会使用 <a href="/config/build-options.html#build-csstarget"><code>build.cssTarget</code></a> 选项。</p><h3 id="css-modules" tabindex="-1">CSS Modules <a class="header-anchor" href="#css-modules" aria-hidden="true">#</a></h3><p>任何以 <code>.module.css</code> 为后缀名的 CSS 文件都被认为是一个 <a href="https://github.com/css-modules/css-modules" target="_blank" rel="noreferrer">CSS modules 文件</a>。导入这样的文件会返回一个相应的模块对象：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* example.module.css */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">red</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> classes </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.module.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> classes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">red</span></span>
<span class="line"></span></code></pre></div><p>CSS modules 行为可以通过 <a href="/config/shared-options.html#css-modules"><code>css.modules</code> 选项</a> 进行配置。</p><p>如果 <code>css.modules.localsConvention</code> 设置开启了 camelCase 格式变量名转换（例如 <code>localsConvention: &#39;camelCaseOnly&#39;</code>），你还可以使用按名导入。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// .apply-color -&gt; applyColor</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">applyColor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.module.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> applyColor</span></span>
<span class="line"></span></code></pre></div><h3 id="css-pre-processors" tabindex="-1">CSS 预处理器 <a class="header-anchor" href="#css-pre-processors" aria-hidden="true">#</a></h3><p>由于 Vite 的目标仅为现代浏览器，因此建议使用原生 CSS 变量和实现 CSSWG 草案的 PostCSS 插件（例如 <a href="https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting" target="_blank" rel="noreferrer">postcss-nesting</a>）来编写简单的、符合未来标准的 CSS。</p><p>话虽如此，但 Vite 也同时提供了对 <code>.scss</code>, <code>.sass</code>, <code>.less</code>, <code>.styl</code> 和 <code>.stylus</code> 文件的内置支持。没有必要为它们安装特定的 Vite 插件，但必须安装相应的预处理器依赖：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># .scss and .sass</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># .less</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">less</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># .styl and .stylus</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stylus</span></span>
<span class="line"></span></code></pre></div><p>如果使用的是单文件组件，可以通过 <code>&lt;style lang=&quot;sass&quot;&gt;</code>（或其他预处理器）自动开启。</p><p>Vite 为 Sass 和 Less 改进了 <code>@import</code> 解析，以保证 Vite 别名也能被使用。另外，<code>url()</code> 中的相对路径引用的，与根文件不同目录中的 Sass/Less 文件会自动变基以保证正确性。</p><p>由于 Stylus API 限制，<code>@import</code> 别名和 URL 变基不支持 Stylus。</p><p>你还可以通过在文件扩展名前加上 <code>.module</code> 来结合使用 CSS modules 和预处理器，例如 <code>style.module.scss</code>。</p><h3 id="disabling-css-injection-into-the-page" tabindex="-1">禁用 CSS 注入页面 <a class="header-anchor" href="#disabling-css-injection-into-the-page" aria-hidden="true">#</a></h3><p>自动注入 CSS 内容的行为可以通过 <code>?inline</code> 参数来关闭。在关闭时，被处理过的 CSS 字符串将会作为该模块的默认导出，但样式并没有被注入到页面中。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 样式将会注入页面</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> otherStyles </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./bar.css?inline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 样式不会注入页面</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>自 Vite 4 起，CSS 文件的默认导入和按名导入（例如 <code>import style from &#39;./foo.css&#39;</code>）将弃用。请使用 <code>?inline</code> 参数代替。</p></div><h3 id="lightning-css" tabindex="-1">Lightning CSS <a class="header-anchor" href="#lightning-css" aria-hidden="true">#</a></h3><p>从 Vite 4.4 开始，已经实验性地支持 <a href="https://lightningcss.dev/" target="_blank" rel="noreferrer">Lightning CSS</a>。可以通过在配置文件中添加 <a href="./../config/shared-options.html#css-transformer"><code>css.transformer: &#39;lightningcss&#39;</code></a> 并安装可选的 <a href="https://www.npmjs.com/package/lightningcss" target="_blank" rel="noreferrer"><code>lightningcss</code></a> 依赖项来选择使用它：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lightningcss</span></span>
<span class="line"></span></code></pre></div><p>如果启用，CSS 文件将由 Lightning CSS 处理，而不是 PostCSS。可以将 Lightning CSS 的选项传递给 <a href="./../config/shared-options.html#css-lightningcss"><code>css.lightingcss</code></a> 选项来配置。</p><p>要配置 CSS Modules，需要使用 <a href="https://lightningcss.dev/css-modules.html" target="_blank" rel="noreferrer"><code>css.lightningcss.cssModules</code></a> 而不是 <a href="./../config/shared-options.html#css-modules"><code>css.modules</code></a>（后者是用于配置 PostCSS 处理 CSS Modules 的方式）。</p><p>默认情况下，Vite 使用 esbuild 来压缩 CSS。通过 <a href="./../config/build-options.html#build-cssminify"><code>build.cssMinify: &#39;lightningcss&#39;</code></a> 进行配置，也可以将 Lightning CSS 用作 CSS 最小化压缩。</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>在使用 Lightning CSS 时，不支持 <a href="#css-pre-processors">CSS 预处理器</a>。</p></div><h2 id="static-assets" tabindex="-1">静态资源处理 <a class="header-anchor" href="#static-assets" aria-hidden="true">#</a></h2><p>导入一个静态资源会返回解析后的 URL：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> imgUrl </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./img.png</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hero-img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> imgUrl</span></span>
<span class="line"></span></code></pre></div><p>添加一些特殊的查询参数可以更改资源被引入的方式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 显式加载资源为一个 URL</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> assetAsURL </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./asset.js?url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 以字符串形式加载资源</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> assetAsString </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./shader.glsl?raw</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 加载为 Web Worker</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Worker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js?worker</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在构建时 Web Worker 内联为 base64 字符串</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> InlineWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js?worker&amp;inline</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>更多细节请见 <a href="./assets.html">静态资源处理</a>。</p><h2 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-hidden="true">#</a></h2><p>JSON 可以被直接导入 —— 同样支持具名导入：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导入整个对象</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> json </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.json</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对一个根字段使用具名导入 —— 有效帮助 treeshaking！</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">field</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.json</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="glob-import" tabindex="-1">Glob 导入 <a class="header-anchor" href="#glob-import" aria-hidden="true">#</a></h2><p>Vite 支持使用特殊的 <code>i<wbr>mport.meta.glob</code> 函数从文件系统导入多个模块：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>以上将会被转译为下面的样子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite 生成的代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>你可以遍历 <code>modules</code> 对象的 key 值来访问相应的模块：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> modules) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">modules</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;">]()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mod</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>匹配到的文件默认是懒加载的，通过动态导入实现，并会在构建时分离为独立的 chunk。如果你倾向于直接引入所有的模块（例如依赖于这些模块中的副作用首先被应用），你可以传入 <code>{ eager: true }</code> 作为第二个参数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">eager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>以上会被转译为下面的样子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite 生成的代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> __glob__0_0 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> __glob__0_1 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="glob-import-as" tabindex="-1">Glob 导入形式 <a class="header-anchor" href="#glob-import-as" aria-hidden="true">#</a></h3><p><code>i<wbr>mport.meta.glob</code> 都支持以字符串形式导入文件，类似于 <a href="./assets.html#importing-asset-as-string">以字符串形式导入资源</a>。在这里，我们使用了 <a href="https://github.com/tc39/proposal-import-reflection" target="_blank" rel="noreferrer">Import Reflection</a> 语法对导入进行断言：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">as</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">raw</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">eager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>上面的代码会被转换为下面这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite（代码由 vite 输出）</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">export default &quot;foo&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">export default &quot;bar&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>{ as: &#39;url&#39; }</code> 还支持将资源作为 URL 加载。</p><h3 id="multiple-patterns" tabindex="-1">多个匹配模式 <a class="header-anchor" href="#multiple-patterns" aria-hidden="true">#</a></h3><p>第一个参数可以是一个 glob 数组，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./another/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><h3 id="negative-patterns" tabindex="-1">反面匹配模式 <a class="header-anchor" href="#negative-patterns" aria-hidden="true">#</a></h3><p>同样也支持反面 glob 匹配模式（以 <code>!</code> 作为前缀）。若要忽略结果中的一些文件，你可以添加“排除匹配模式”作为第一个参数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">!**/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite 生成的代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="named-imports" tabindex="-1">具名导入 <a class="header-anchor" href="#named-imports" aria-hidden="true">#</a></h4><p>也可能你只想要导入模块中的部分内容，那么可以利用 <code>import</code> 选项。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">import</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setup</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite 生成的代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setup)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setup)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>当与 <code>eager</code> 一同存在时，甚至可以对这些模块进行 tree-shaking。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">import</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setup</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite 生成的代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__glob__0_0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__glob__0_1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>设置 <code>import</code> 为 <code>default</code> 可以加载默认导出。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">import</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite 生成的代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> __glob__0_0 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> __glob__0_1 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="custom-queries" tabindex="-1">自定义查询 <a class="header-anchor" href="#custom-queries" aria-hidden="true">#</a></h4><p>你也可以使用 <code>query</code> 选项来提供对导入的自定义查询，以供其他插件使用。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite 生成的代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js?foo=bar&amp;bar=true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js?foo=bar&amp;bar=true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="glob-import-caveats" tabindex="-1">Glob 导入注意事项 <a class="header-anchor" href="#glob-import-caveats" aria-hidden="true">#</a></h3><p>请注意：</p><ul><li>这只是一个 Vite 独有的功能而不是一个 Web 或 ES 标准</li><li>该 Glob 模式会被当成导入标识符：必须是相对路径（以 <code>./</code> 开头）或绝对路径（以 <code>/</code> 开头，相对于项目根目录解析）或一个别名路径（请看 <a href="/config/shared-options.html#resolve-alias"><code>resolve.alias</code> 选项</a>)。</li><li>Glob 匹配是使用 <a href="https://github.com/mrmlnc/fast-glob" target="_blank" rel="noreferrer">fast-glob</a> 来实现的 —— 阅读它的文档来查阅 <a href="https://github.com/mrmlnc/fast-glob#pattern-syntax" target="_blank" rel="noreferrer">支持的 Glob 模式</a>。</li><li>你还需注意，所有 <code>i<wbr>mport.meta.glob</code> 的参数都必须以字面量传入。你 <strong>不</strong> 可以在其中使用变量或表达式。</li></ul><h2 id="dynamic-import" tabindex="-1">动态导入 <a class="header-anchor" href="#dynamic-import" aria-hidden="true">#</a></h2><p>和 <a href="#glob-import">glob 导入</a> 类似，Vite 也支持带变量的动态导入。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> module </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">./dir/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">file</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>注意变量仅代表一层深的文件名。如果 <code>file</code> 是 <code>foo/bar</code>，导入将会失败。对于更进阶的使用详情，你可以使用 <a href="#glob-import">glob 导入</a> 功能。</p><h2 id="webassembly" tabindex="-1">WebAssembly <a class="header-anchor" href="#webassembly" aria-hidden="true">#</a></h2><p>预编译的 <code>.wasm</code> 文件可以通过 <code>?init</code> 来导入。 默认导出一个初始化函数，返回值为所导出 <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Instance" target="_blank" rel="noreferrer"><code>WebAssembly.Instance</code></a> 实例对象的 Promise：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> init </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.wasm?init</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">instance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p><code>init</code> 函数还可以将传递给 <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/instantiate" target="_blank" rel="noreferrer"><code>WebAssembly.instantiate</code></a> 的导入对象作为其第二个参数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">imports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">someFunc</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>在生产构建当中，体积小于 <code>assetInlineLimit</code> 的 <code>.wasm</code> 文件将会被内联为 base64 字符串。否则，它们将被视为 <a href="./assets.html">静态资源</a> ，并按需获取。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p><a href="https://github.com/WebAssembly/esm-integration" target="_blank" rel="noreferrer">对 WebAssembly 的 ES 模块集成提案</a> 尚未支持。 请使用 <a href="https://github.com/Menci/vite-plugin-wasm" target="_blank" rel="noreferrer"><code>vite-plugin-wasm</code></a> 或其他社区上的插件来处理。</p></div><h3 id="accessing-the-webassembly-module" tabindex="-1">访问 WebAssembly 模块 <a class="header-anchor" href="#accessing-the-webassembly-module" aria-hidden="true">#</a></h3><p>如果需要访问 <code>Module</code> 对象，例如将它多次实例化，可以使用 <a href="./assets.html#explicit-url-imports">显式 URL 引入</a> 来解析资源，然后执行实例化：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> wasmUrl </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo.wasm?url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> main </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">responsePromise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">wasmUrl</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instantiateStreaming</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">responsePromise</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="fetching-the-module-in-node-js" tabindex="-1">在 Node.js 中获取模块 <a class="header-anchor" href="#fetching-the-module-in-node-js" aria-hidden="true">#</a></h3><p>在 SSR 中，作为 <code>?init</code> 导入的 <code>fetch()</code> 可能会失败，导致 <code>TypeError: Invalid URL</code> 报错。 请参见问题 <a href="https://github.com/vitejs/vite/issues/8882" target="_blank" rel="noreferrer">在 SSR 中支持 wasm</a>。</p><p>以下是一种替代方案，假设项目根目录在当前目录：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> wasmUrl </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo.wasm?url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">readFile</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node:fs/promises</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> main </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolvedUrl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">import</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./test/boot.test.wasm?url</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolvedUrl</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instantiate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="web-workers" tabindex="-1">Web Workers <a class="header-anchor" href="#web-workers" aria-hidden="true">#</a></h2><h3 id="import-with-constructors" tabindex="-1">通过构造器导入 <a class="header-anchor" href="#import-with-constructors" aria-hidden="true">#</a></h3><p>一个 Web Worker 可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker" target="_blank" rel="noreferrer"><code>new Worker()</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/SharedWorker" target="_blank" rel="noreferrer"><code>new SharedWorker()</code></a> 导入。与 worker 后缀相比，这种语法更接近于标准，是创建 worker 的 <strong>推荐</strong> 方式。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url))</span></span>
<span class="line"></span></code></pre></div><p>worker 构造函数会接受可以用来创建 “模块” worker 的选项：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="import-with-query-suffixes" tabindex="-1">带有查询后缀的导入 <a class="header-anchor" href="#import-with-query-suffixes" aria-hidden="true">#</a></h3><p>你可以在导入请求上添加 <code>?worker</code> 或 <code>?sharedworker</code> 查询参数来直接导入一个 web worker 脚本。默认导出会是一个自定义 worker 的构造函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker?worker</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyWorker</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>这个 worker 脚本也可以使用 ESM <code>import</code> 语句而不是 <code>importScripts()</code>。<strong>注意</strong>：在开发时，这依赖于 <a href="https://caniuse.com/?search=module%20worker" target="_blank" rel="noreferrer">浏览器原生支持</a>，但是在生产构建中，它会被编译掉。</p><p>默认情况下，worker 脚本将在生产构建中编译成单独的 chunk。如果你想将 worker 内联为 base64 字符串，请添加 <code>inline</code> 查询参数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker?worker&amp;inline</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>如果你想要以一个 URL 的形式读取该 worker，请添加 <code>url</code> 这个 query：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker?worker&amp;url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>关于如何配置打包全部 worker，可以查看 <a href="/config/worker-options.html">Worker 选项</a> 了解更多相关细节。</p><h2 id="build-optimizations" tabindex="-1">构建优化 <a class="header-anchor" href="#build-optimizations" aria-hidden="true">#</a></h2><blockquote><p>下面所罗列的功能会自动应用为构建过程的一部分，除非你想禁用它们，否则没有必要显式配置。</p></blockquote><h3 id="css-code-splitting" tabindex="-1">CSS 代码分割 <a class="header-anchor" href="#css-code-splitting" aria-hidden="true">#</a></h3><p>Vite 会自动地将一个异步 chunk 模块中使用到的 CSS 代码抽取出来并为其生成一个单独的文件。这个 CSS 文件将在该异步 chunk 加载完成时自动通过一个 <code>&lt;link&gt;</code> 标签载入，该异步 chunk 会保证只在 CSS 加载完毕后再执行，避免发生 <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content#:~:text=A%20flash%20of%20unstyled%20content,before%20all%20information%20is%20retrieved." target="_blank" rel="noreferrer">FOUC</a> 。</p><p>如果你更倾向于将所有的 CSS 抽取到一个文件中，你可以通过设置 <a href="/config/build-options.html#build-csscodesplit"><code>build.cssCodeSplit</code></a> 为 <code>false</code> 来禁用 CSS 代码分割。</p><h3 id="preload-directives-generation" tabindex="-1">预加载指令生成 <a class="header-anchor" href="#preload-directives-generation" aria-hidden="true">#</a></h3><p>Vite 会为入口 chunk 和它们在打包出的 HTML 中的直接引入自动生成 <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> 指令。</p><h3 id="async-chunk-loading-optimization" tabindex="-1">异步 Chunk 加载优化 <a class="header-anchor" href="#async-chunk-loading-optimization" aria-hidden="true">#</a></h3><p>在实际项目中，Rollup 通常会生成 “共用” chunk —— 被两个或以上的其他 chunk 共享的 chunk。与动态导入相结合，会很容易出现下面这种场景：</p>`,186),r=s(`<p>在无优化的情境下，当异步 chunk <code>A</code> 被导入时，浏览器将必须请求和解析 <code>A</code>，然后它才能弄清楚它也需要共用 chunk <code>C</code>。这会导致额外的网络往返：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Entry ---&gt; A ---&gt; C</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Vite 将使用一个预加载步骤自动重写代码，来分割动态导入调用，以实现当 <code>A</code> 被请求时，<code>C</code> 也将 <strong>同时</strong> 被请求：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Entry ---&gt; (A + C)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>C</code> 也可能有更深的导入，在未优化的场景中，这会导致更多的网络往返。Vite 的优化会跟踪所有的直接导入，无论导入的深度如何，都能够完全消除不必要的往返。</p>`,5),d=JSON.parse('{"title":"功能","description":"","frontmatter":{},"headers":[{"level":2,"title":"NPM 依赖解析和预构建","slug":"npm-dependency-resolving-and-pre-bundling","link":"#npm-dependency-resolving-and-pre-bundling","children":[]},{"level":2,"title":"模块热替换","slug":"hot-module-replacement","link":"#hot-module-replacement","children":[]},{"level":2,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[{"level":3,"title":"仅执行转译","slug":"transpile-only","link":"#transpile-only","children":[]},{"level":3,"title":"TypeScript 编译器选项","slug":"typescript-compiler-options","link":"#typescript-compiler-options","children":[]},{"level":3,"title":"客户端类型","slug":"client-types","link":"#client-types","children":[]}]},{"level":2,"title":"Vue","slug":"vue","link":"#vue","children":[]},{"level":2,"title":"JSX","slug":"jsx","link":"#jsx","children":[]},{"level":2,"title":"CSS","slug":"css","link":"#css","children":[{"level":3,"title":"@import 内联和变基","slug":"import-inlining-and-rebasing","link":"#import-inlining-and-rebasing","children":[]},{"level":3,"title":"PostCSS","slug":"postcss","link":"#postcss","children":[]},{"level":3,"title":"CSS Modules","slug":"css-modules","link":"#css-modules","children":[]},{"level":3,"title":"CSS 预处理器","slug":"css-pre-processors","link":"#css-pre-processors","children":[]},{"level":3,"title":"禁用 CSS 注入页面","slug":"disabling-css-injection-into-the-page","link":"#disabling-css-injection-into-the-page","children":[]},{"level":3,"title":"Lightning CSS","slug":"lightning-css","link":"#lightning-css","children":[]}]},{"level":2,"title":"静态资源处理","slug":"static-assets","link":"#static-assets","children":[]},{"level":2,"title":"JSON","slug":"json","link":"#json","children":[]},{"level":2,"title":"Glob 导入","slug":"glob-import","link":"#glob-import","children":[{"level":3,"title":"Glob 导入形式","slug":"glob-import-as","link":"#glob-import-as","children":[]},{"level":3,"title":"多个匹配模式","slug":"multiple-patterns","link":"#multiple-patterns","children":[]},{"level":3,"title":"反面匹配模式","slug":"negative-patterns","link":"#negative-patterns","children":[]},{"level":3,"title":"Glob 导入注意事项","slug":"glob-import-caveats","link":"#glob-import-caveats","children":[]}]},{"level":2,"title":"动态导入","slug":"dynamic-import","link":"#dynamic-import","children":[]},{"level":2,"title":"WebAssembly","slug":"webassembly","link":"#webassembly","children":[{"level":3,"title":"访问 WebAssembly 模块","slug":"accessing-the-webassembly-module","link":"#accessing-the-webassembly-module","children":[]},{"level":3,"title":"在 Node.js 中获取模块","slug":"fetching-the-module-in-node-js","link":"#fetching-the-module-in-node-js","children":[]}]},{"level":2,"title":"Web Workers","slug":"web-workers","link":"#web-workers","children":[{"level":3,"title":"通过构造器导入","slug":"import-with-constructors","link":"#import-with-constructors","children":[]},{"level":3,"title":"带有查询后缀的导入","slug":"import-with-query-suffixes","link":"#import-with-query-suffixes","children":[]}]},{"level":2,"title":"构建优化","slug":"build-optimizations","link":"#build-optimizations","children":[{"level":3,"title":"CSS 代码分割","slug":"css-code-splitting","link":"#css-code-splitting","children":[]},{"level":3,"title":"预加载指令生成","slug":"preload-directives-generation","link":"#preload-directives-generation","children":[]},{"level":3,"title":"异步 Chunk 加载优化","slug":"async-chunk-loading-optimization","link":"#async-chunk-loading-optimization","children":[]}]}],"relativePath":"guide/features.md"}'),i={name:"guide/features.md"},A=Object.assign(i,{setup(y){return(D,F)=>{const a=n("svg-image");return l(),o("div",null,[c,e(a,{svg:p(t)},null,8,["svg"]),r])}}});export{d as __pageData,A as default};

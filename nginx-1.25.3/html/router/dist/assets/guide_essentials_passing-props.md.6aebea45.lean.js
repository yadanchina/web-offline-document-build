import{_ as n,v as o,b as p,t as l,F as s,L as e,R as t,M as c}from"./chunks/framework.dd59a003.js";const m=JSON.parse('{"title":"Passing Props to Route Components","description":"","frontmatter":{},"headers":[],"relativePath":"guide/essentials/passing-props.md","filePath":"guide/essentials/passing-props.md"}'),r={name:"guide/essentials/passing-props.md"},y=s("h1",{id:"Passing-Props-to-Route-Components",tabindex:"-1"},[e("Passing Props to Route Components "),s("a",{class:"header-anchor",href:"#Passing-Props-to-Route-Components","aria-label":'Permalink to "Passing Props to Route Components"'},"​")],-1),B=t(`<p>Using <code>$route</code> in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain URLs. While this is not necessarily a bad thing, we can decouple this behavior with a <code>props</code> option:</p><p>We can replace</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/user/:id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> }]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">&#39;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{ path: </span><span style="color:#032F62;">&#39;/user/:id&#39;</span><span style="color:#24292E;">, component: User }]</span></span></code></pre></div><p>with</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// make sure to add a prop named exactly like the route param</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&lt;div&gt;User {{ id }}&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/user/:id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// make sure to add a prop named exactly like the route param</span></span>
<span class="line"><span style="color:#24292E;">  props: [</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">&#39;&lt;div&gt;User {{ id }}&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{ path: </span><span style="color:#032F62;">&#39;/user/:id&#39;</span><span style="color:#24292E;">, component: User, props: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }]</span></span></code></pre></div><p>This allows you to use the component anywhere, which makes the component easier to reuse and test.</p><h2 id="Boolean-mode" tabindex="-1">Boolean mode <a class="header-anchor" href="#Boolean-mode" aria-label="Permalink to &quot;Boolean mode&quot;">​</a></h2><p>When <code>props</code> is set to <code>true</code>, the <code>route.params</code> will be set as the component props.</p><h2 id="Named-views" tabindex="-1">Named views <a class="header-anchor" href="#Named-views" aria-label="Permalink to &quot;Named views&quot;">​</a></h2><p>For routes with named views, you have to define the <code>props</code> option for each named view:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/user/:id&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sidebar</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Sidebar</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sidebar</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/user/:id&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    components: { default: User, sidebar: Sidebar },</span></span>
<span class="line"><span style="color:#24292E;">    props: { default: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, sidebar: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="Object-mode" tabindex="-1">Object mode <a class="header-anchor" href="#Object-mode" aria-label="Permalink to &quot;Object mode&quot;">​</a></h2><p>When <code>props</code> is an object, this will be set as the component props as-is. Useful for when the props are static.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/promotion/from-newsletter&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Promotion</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">newsletterPopup</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/promotion/from-newsletter&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    component: Promotion,</span></span>
<span class="line"><span style="color:#24292E;">    props: { newsletterPopup: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="Function-mode" tabindex="-1">Function mode <a class="header-anchor" href="#Function-mode" aria-label="Permalink to &quot;Function mode&quot;">​</a></h2><p>You can create a function that returns props. This allows you to cast parameters into other types, combine static values with route-based values, etc.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/search&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">SearchUser</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">props</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">query</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">q</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/search&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    component: SearchUser,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: </span><span style="color:#E36209;">route</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({ query: route.query.q })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>The URL <code>/search?q=vue</code> would pass <code>{query: &#39;vue&#39;}</code> as props to the <code>SearchUser</code> component.</p><p>Try to keep the <code>props</code> function stateless, as it&#39;s only evaluated on route changes. Use a wrapper component if you need state to define the props, that way Vue can react to state changes.</p><h2 id="Via-RouterView" tabindex="-1">Via RouterView <a class="header-anchor" href="#Via-RouterView" aria-label="Permalink to &quot;Via RouterView&quot;">​</a></h2><p>You can also pass any props directly via <code>&lt;RouterView&gt;</code>:</p><div class="language-template vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">RouterView</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">component</span></span>
<span class="line"><span style="color:#ABB2BF;">    :</span><span style="color:#D19A66;">is</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">view-prop</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;value&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">   /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">RouterView</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">RouterView</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">{ Component }</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">component</span></span>
<span class="line"><span style="color:#24292E;">    :</span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">Component</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">view-prop</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;value&quot;</span></span>
<span class="line"><span style="color:#24292E;">   /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">RouterView</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In this case, <strong>all view components</strong> will receive <code>view-prop</code>. This is usually not a good idea as it means that all of the view components have declared a <code>view-prop</code> prop, which is not necessarily true. If possible, use any of the options above.</p></div>`,23);function i(d,u,h,F,A,C){const a=c("VueSchoolLink");return o(),p("div",null,[y,l(a,{href:"https://vueschool.io/lessons/route-props",title:"Learn how to pass props to route components"}),B])}const v=n(r,[["render",i]]);export{m as __pageData,v as default};

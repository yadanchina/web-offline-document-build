import{_ as s,v as a,b as n,R as o}from"./chunks/framework.dd59a003.js";const h=JSON.parse('{"title":"从 Vue2 迁移","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/migration/index.md","filePath":"zh/guide/migration/index.md"}'),l={name:"zh/guide/migration/index.md"},p=o(`<h1 id="从-Vue2-迁移" tabindex="-1">从 Vue2 迁移 <a class="header-anchor" href="#从-Vue2-迁移" aria-label="Permalink to &quot;从 Vue2 迁移&quot;">​</a></h1><p>在 Vue Router API 从 v3（Vue2）到 v4（Vue3）的重写过程中，大部分的 Vue Router API 都没有变化，但是在迁移你的程序时，你可能会遇到一些破坏性的变化。本指南将帮助你了解为什么会发生这些变化，以及如何调整你的程序，使其与 Vue Router4 兼容。</p><h2 id="破坏性变化" tabindex="-1">破坏性变化 <a class="header-anchor" href="#破坏性变化" aria-label="Permalink to &quot;破坏性变化&quot;">​</a></h2><p>变化的顺序是按其用途排列的。因此，建议按照这个清单的顺序进行。</p><h3 id="new-Router-变成-createRouter" tabindex="-1">new Router 变成 createRouter <a class="header-anchor" href="#new-Router-变成-createRouter" aria-label="Permalink to &quot;new Router 变成 createRouter&quot;">​</a></h3><p>Vue Router 不再是一个类，而是一组函数。现在你不用再写 <code>new Router()</code>，而是要调用 <code>createRouter</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 以前是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// import Router from &#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 以前是</span></span>
<span class="line"><span style="color:#6A737D;">// import Router from &#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createRouter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="新的-history-配置取代-mode" tabindex="-1">新的 <code>history</code> 配置取代 <code>mode</code> <a class="header-anchor" href="#新的-history-配置取代-mode" aria-label="Permalink to &quot;新的 \`history\` 配置取代 \`mode\`&quot;">​</a></h3><p><code>mode: &#39;history&#39;</code> 配置已经被一个更灵活的 <code>history</code> 配置所取代。根据你使用的模式，你必须用适当的函数替换它：</p><ul><li><code>&quot;history&quot;</code>: <code>createWebHistory()</code></li><li><code>&quot;hash&quot;</code>: <code>createWebHashHistory()</code></li><li><code>&quot;abstract&quot;</code>: <code>createMemoryHistory()</code></li></ul><p>下面是一个完整的代码段：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 还有 createWebHashHistory 和 createMemoryHistory</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createRouter, createWebHistory } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 还有 createWebHashHistory 和 createMemoryHistory</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  history: </span><span style="color:#6F42C1;">createWebHistory</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  routes: [],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>在 SSR 上使用时，你需要手动传递相应的 history：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// router.js</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">isServer</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createMemoryHistory</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在你的 server-entry.js 中的某个地方</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 请求 url</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 处理请求</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// router.js</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isServer </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMemoryHistory</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createWebHistory</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> router </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({ routes, history })</span></span>
<span class="line"><span style="color:#6A737D;">// 在你的 server-entry.js 中的某个地方</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(req.url) </span><span style="color:#6A737D;">// 请求 url</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">isReady</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理请求</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong>原因</strong>：为未使用的 history 启用摇树，以及为高级用例（如原生解决方案）实现自定义 history。</p><h3 id="移动了-base-配置" tabindex="-1">移动了 <code>base</code> 配置 <a class="header-anchor" href="#移动了-base-配置" aria-label="Permalink to &quot;移动了 \`base\` 配置&quot;">​</a></h3><p>现在，<code>base</code> 配置被作为 <code>createWebHistory</code> (其他 history 也一样)的第一个参数传递：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/base-directory/&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createRouter, createWebHistory } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  history: </span><span style="color:#6F42C1;">createWebHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/base-directory/&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  routes: [],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="删除了-fallback-属性" tabindex="-1">删除了 <code>fallback</code> 属性 <a class="header-anchor" href="#删除了-fallback-属性" aria-label="Permalink to &quot;删除了 \`fallback\` 属性&quot;">​</a></h3><p>创建路由时不再支持 <code>fallback</code> 属性：</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E06C75;">-new VueRouter({</span></span>
<span class="line"><span style="color:#98C379;">+createRouter({</span></span>
<span class="line"><span style="color:#E06C75;">-  fallback: false,</span></span>
<span class="line"><span style="color:#ABB2BF;">// other options...</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">-new VueRouter({</span></span>
<span class="line"><span style="color:#22863A;">+createRouter({</span></span>
<span class="line"><span style="color:#B31D28;">-  fallback: false,</span></span>
<span class="line"><span style="color:#24292E;">// other options...</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong>原因</strong>: Vue支持的所有浏览器都支持 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noreferrer">HTML5 History API</a>，因此我们不再需要使用 <code>location.hash</code>，而可以直接使用 <code>history.pushState()</code>。</p><h3 id="删除了-星标或通配符-路由" tabindex="-1">删除了 <code>*</code>（星标或通配符）路由 <a class="header-anchor" href="#删除了-星标或通配符-路由" aria-label="Permalink to &quot;删除了 \`*\`（星标或通配符）路由&quot;">​</a></h3><p>现在必须使用自定义的 regex 参数来定义所有路由(<code>*</code>、<code>/*</code>)：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// pathMatch 是参数的名称，例如，跳转到 /not/found 会得到</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// { params: { pathMatch: [&#39;not&#39;, &#39;found&#39;] } }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 这要归功于最后一个 *，意思是重复的参数，如果你</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 打算直接使用未匹配的路径名称导航到该路径，这是必要的</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/:pathMatch(.*)*&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;not-found&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">NotFound</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 如果你省略了最后的 \`*\`，在解析或跳转时，参数中的 \`/\` 字符将被编码</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/:pathMatch(.*)&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bad-not-found&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">NotFound</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果使用命名路由，不好的例子：</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bad-not-found&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">pathMatch</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;not/found&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &#39;/not%2Ffound&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 好的例子:</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;not-found&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">pathMatch</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;not&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;found&#39;</span><span style="color:#ABB2BF;">] },</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &#39;/not/found&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// pathMatch 是参数的名称，例如，跳转到 /not/found 会得到</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// { params: { pathMatch: [&#39;not&#39;, &#39;found&#39;] } }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这要归功于最后一个 *，意思是重复的参数，如果你</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打算直接使用未匹配的路径名称导航到该路径，这是必要的</span></span>
<span class="line"><span style="color:#24292E;">  { path: </span><span style="color:#032F62;">&#39;/:pathMatch(.*)*&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;not-found&#39;</span><span style="color:#24292E;">, component: NotFound },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果你省略了最后的 \`*\`，在解析或跳转时，参数中的 \`/\` 字符将被编码</span></span>
<span class="line"><span style="color:#24292E;">  { path: </span><span style="color:#032F62;">&#39;/:pathMatch(.*)&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;bad-not-found&#39;</span><span style="color:#24292E;">, component: NotFound },</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 如果使用命名路由，不好的例子：</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;bad-not-found&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  params: { pathMatch: </span><span style="color:#032F62;">&#39;not/found&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">}).href </span><span style="color:#6A737D;">// &#39;/not%2Ffound&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 好的例子:</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;not-found&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  params: { pathMatch: [</span><span style="color:#032F62;">&#39;not&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;found&#39;</span><span style="color:#24292E;">] },</span></span>
<span class="line"><span style="color:#24292E;">}).href </span><span style="color:#6A737D;">// &#39;/not/found&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你不打算使用其名称直接跳转到未找到的路由，则无需为重复的参数添加 <code>*</code>。如果你调用 <code>router.push(&#39;/not/found/url&#39;)</code>，它将提供正确的 <code>pathMatch</code> 参数。</p></div><p><strong>原因</strong>：Vue Router 不再使用 <code>path-to-regexp</code>，而是实现了自己的解析系统，允许路由排序并实现动态路由。由于我们通常在每个项目中只添加一个通配符路由，所以支持 <code>*</code> 的特殊语法并没有太大的好处。参数的编码是跨路由的，无一例外，让事情更容易预测。</p><h3 id="将-onReady-改为-isReady" tabindex="-1">将 <code>onReady</code> 改为 <code>isReady</code> <a class="header-anchor" href="#将-onReady-改为-isReady" aria-label="Permalink to &quot;将 \`onReady\` 改为 \`isReady\`&quot;">​</a></h3><p>现有的 <code>router.onReady()</code> 函数已被 <code>router.isReady()</code> 取代，该函数不接受任何参数并返回一个 Promise：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onReady</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onSuccess</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onError</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换成</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onSuccess</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onError</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或者使用 await:</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReady</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 成功</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 将</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">onReady</span><span style="color:#24292E;">(onSuccess, onError)</span></span>
<span class="line"><span style="color:#6A737D;">// 替换成</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">isReady</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(onSuccess).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(onError)</span></span>
<span class="line"><span style="color:#6A737D;">// 或者使用 await:</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">isReady</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 成功</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="scrollBehavior-的变化" tabindex="-1"><code>scrollBehavior</code> 的变化 <a class="header-anchor" href="#scrollBehavior-的变化" aria-label="Permalink to &quot;\`scrollBehavior\` 的变化&quot;">​</a></h3><p><code>scrollBehavior</code> 中返回的对象与 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions" target="_blank" rel="noreferrer"><code>ScrollToOptions</code></a> 类似：<code>x</code> 改名为 <code>left</code>，<code>y</code> 改名为 <code>top</code>。详见 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0035-router-scroll-position.md" target="_blank" rel="noreferrer">RFC</a>。</p><p><strong>原因</strong>：使该对象类似于 <code>ScrollToOptions</code>，以使其感觉更像原生 JS API，并有可能启用将来的新配置。</p><h3 id="-router-view-、-keep-alive-和-transition-" tabindex="-1"><code>&lt;router-view&gt;</code>、<code>&lt;keep-alive&gt;</code> 和 <code>&lt;transition&gt;</code> <a class="header-anchor" href="#-router-view-、-keep-alive-和-transition-" aria-label="Permalink to &quot;\`&lt;router-view&gt;\`、\`&lt;keep-alive&gt;\` 和 \`&lt;transition&gt;\`&quot;">​</a></h3><p><code>transition</code> 和 <code>keep-alive</code> 现在必须通过 <code>v-slot</code> API 在 <code>RouterView</code> <strong>内部</strong>使用：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;transition&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;component :is=&quot;Component&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/transition&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">{ Component }</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;transition&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;component :is=&quot;Component&quot; /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/transition&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>原因</strong>: 这是一个必要的变化。详见 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0034-router-view-keep-alive-transitions.md" target="_blank" rel="noreferrer">related RFC</a>.</p><h3 id="删除-router-link-中的-append-属性" tabindex="-1">删除 <code>&lt;router-link&gt;</code> 中的 <code>append</code> 属性 <a class="header-anchor" href="#删除-router-link-中的-append-属性" aria-label="Permalink to &quot;删除 \`&lt;router-link&gt;\` 中的 \`append\` 属性&quot;">​</a></h3><p><code>&lt;router-link&gt;</code> 中的 <code>append</code> 属性已被删除。你可以手动将值设置到现有的 <code>path</code> 中：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">将</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;child-route&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">append</span><span style="color:#ABB2BF;">&gt;to relative child&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">替换成</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;append($route.path, &#39;child-route&#39;)&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  to relative child</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">将</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;child-route&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">&gt;to relative child&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">替换成</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;append($route.path, &#39;child-route&#39;)&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  to relative child</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>你必须在 <em>App</em> 实例上定义一个全局的 <code>append</code> 函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">globalProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pathToAppend</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">endsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">pathToAppend</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.config.globalProperties.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">path</span><span style="color:#24292E;">, </span><span style="color:#E36209;">pathToAppend</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (path.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pathToAppend</span></span></code></pre></div><p><strong>原因</strong>：<code>append</code> 使用频率不高，用户可以很容易地实现。</p><h3 id="删除-router-link-中的-event-和-tag-属性" tabindex="-1">删除 <code>&lt;router-link&gt;</code> 中的 <code>event</code> 和 <code>tag</code> 属性 <a class="header-anchor" href="#删除-router-link-中的-event-和-tag-属性" aria-label="Permalink to &quot;删除 \`&lt;router-link&gt;\` 中的 \`event\` 和 \`tag\` 属性&quot;">​</a></h3><p><code>&lt;router-link&gt;</code> 中的 <code>event</code> 和 <code>tag</code> 属性都已被删除。你可以使用 <a href="/zh/guide/advanced/composition-api.html#uselink"><code>v-slot</code> API</a> 来完全定制 <code>&lt;router-link&gt;</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">将</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">tag</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;span&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">event</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;dblclick&quot;</span><span style="color:#ABB2BF;">&gt;About Us&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">替换成</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">custom</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ navigate }&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">@click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;navigate&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">@keypress.enter</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;navigate&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">role</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;link&quot;</span><span style="color:#ABB2BF;">&gt;About Us&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">将</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/about&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;span&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">event</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dblclick&quot;</span><span style="color:#24292E;">&gt;About Us&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">替换成</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/about&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">custom</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{ navigate }&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;navigate&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@keypress.enter</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;navigate&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">role</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;link&quot;</span><span style="color:#24292E;">&gt;About Us&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>原因</strong>：这些属性经常一起使用，以使用与 <code>&lt;a&gt;</code> 标签不同的东西，但这些属性是在 <code>v-slot</code> API 之前引入的，并且没有足够的使用，因此没有足够的理由为每个人增加 bundle 包的大小。</p><h3 id="删除-router-link-中的-exact-属性" tabindex="-1">删除 <code>&lt;router-link&gt;</code> 中的 <code>exact</code> 属性 <a class="header-anchor" href="#删除-router-link-中的-exact-属性" aria-label="Permalink to &quot;删除 \`&lt;router-link&gt;\` 中的 \`exact\` 属性&quot;">​</a></h3><p><code>exact</code> 属性已被删除，因为不再存在要修复的警告，所以你应该能够安全地删除它。但，有两件事你应该注意：</p><ul><li>路由现在是基于它们所代表的路由记录来激活的，而不是路由地址对象及其 <code>path</code>、<code>query</code> 和 <code>hash</code> 属性来激活的</li><li>只匹配 <code>path</code> 部分，<code>query</code> 和 <code>hash</code> 不再考虑</li></ul><p>如果你想自定义这种行为，例如考虑到 <code>hash</code> 部分，你应该使用 <a href="/zh/guide/advanced/composition-api.html#uselink"><code>v-slot</code> API</a> 来扩展<code>&lt;router-link&gt;</code>。</p><p><strong>原因</strong>: 详见 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0028-router-active-link.md#summary" target="_blank" rel="noreferrer">RFC about active matching</a>。</p><h3 id="忽略-mixins-中的导航守卫" tabindex="-1">忽略 mixins 中的导航守卫 <a class="header-anchor" href="#忽略-mixins-中的导航守卫" aria-label="Permalink to &quot;忽略 mixins 中的导航守卫&quot;">​</a></h3><p>目前不支持 mixins 中的导航守卫，你可以在 <a href="https://github.com/vuejs/router/issues/454" target="_blank" rel="noreferrer">vue-router#454</a> 追踪它的支持情况。</p><h3 id="删除-router-match-改为-router-resolve" tabindex="-1">删除 <code>router.match</code> 改为 <code>router.resolve</code> <a class="header-anchor" href="#删除-router-match-改为-router-resolve" aria-label="Permalink to &quot;删除 \`router.match\` 改为 \`router.resolve\`&quot;">​</a></h3><p><code>router.match</code> 和 <code>router.resolve</code> 已合并到 <code>router.resolve</code> 中，签名略有不同。<a href="/zh/api/interfaces/Router.html#Methods-resolve">详见 API</a>。</p><p><strong>原因</strong>：将用于同一目的的多种方法统一起来。</p><h3 id="删除-router-getMatchedComponents-" tabindex="-1">删除 <code>router.getMatchedComponents()</code> <a class="header-anchor" href="#删除-router-getMatchedComponents-" aria-label="Permalink to &quot;删除 \`router.getMatchedComponents()\`&quot;">​</a></h3><p><code>router.getMatchedComponents</code> 方法现在被删除，因为匹配的组件可以从 <code>router.currentRoute.value.matched</code> 中获取：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">currentRoute</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flatMap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">record</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.currentRoute.value.matched.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(</span><span style="color:#E36209;">record</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(record.components)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>原因</strong>：这个方法只在 SSR 中使用，并且是用户一行就能完成的操作。</p><h3 id="所有的导航现在都是异步的" tabindex="-1"><strong>所有</strong>的导航现在都是异步的 <a class="header-anchor" href="#所有的导航现在都是异步的" aria-label="Permalink to &quot;**所有**的导航现在都是异步的&quot;">​</a></h3><p>所有的导航，包括第一个导航，现在都是异步的，这意味着，如果你使用一个 <code>transition</code>，你可能需要等待路由 <em>ready</em> 好后再挂载程序：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注意：在服务器端，你需要手动跳转到初始地址。</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#app&#39;</span><span style="color:#ABB2BF;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router)</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：在服务器端，你需要手动跳转到初始地址。</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">isReady</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> app.</span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><p>否则会有一个初始过渡，就像你提供了 <code>appear</code> 属性到 <code>transition</code> 一样，因为路由会显示它的初始地址（什么都没有），然后显示第一个地址。</p><p>请注意，<strong>如果在初始导航时有导航守卫</strong>，你可能不想阻止程序渲染，直到它们被解析，除非你正在进行服务器端渲染。否则，在这种情况下，不等待路由准备好挂载应用会产生与 Vue2 中相同的结果。</p><h3 id="删除-router-app" tabindex="-1">删除 <code>router.app</code> <a class="header-anchor" href="#删除-router-app" aria-label="Permalink to &quot;删除 \`router.app\`&quot;">​</a></h3><p><code>router.app</code> 用于表示注入路由的最后一个根组件（Vue 实例）。Vue Router 现在可以被多个 Vue 程序同时安全使用。你仍然可以在使用路由时添加它：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">app</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router)</span></span>
<span class="line"><span style="color:#24292E;">router.app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app</span></span></code></pre></div><p>你也可以扩展 <code>Router</code> 接口的 TypeScript 定义来添加 <code>app</code> 属性。</p><p><strong>原因</strong>：Vue3 写的程序不能在 Vue2 中使用，现在我们使用同一个 Router 实例来支持多个程序，因此拥有 <code>app</code> 属性可能会产生误导，因为它是程序而不是根实例。</p><h3 id="将内容传递给路由组件的-slot-" tabindex="-1">将内容传递给路由组件的 <code>&lt;slot&gt;</code> <a class="header-anchor" href="#将内容传递给路由组件的-slot-" aria-label="Permalink to &quot;将内容传递给路由组件的 \`&lt;slot&gt;\`&quot;">​</a></h3><p>之前你可以直接传递一个模板，通过嵌套在 <code>&lt;router-view&gt;</code> 组件下，由路由组件的 <code>&lt;slot&gt;</code> 来渲染：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;In Vue Router 3, I render inside the route component&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;In Vue Router 3, I render inside the route component&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>由于 <code>&lt;router-view&gt;</code> 引入了 <code>v-slot</code> API，你必须使用 <code>v-slot</code> API 将其传递给 <code>&lt;component&gt;</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ Component }&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:is</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Component&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;In Vue Router 3, I render inside the route component&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{ Component }&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">component</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:is</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;Component&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;In Vue Router 3, I render inside the route component&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#B31D28;font-style:italic;">component</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="将-parent-从路由地址中删除" tabindex="-1">将 <code>parent</code> 从路由地址中删除 <a class="header-anchor" href="#将-parent-从路由地址中删除" aria-label="Permalink to &quot;将 \`parent\` 从路由地址中删除&quot;">​</a></h3><p><code>parent</code> 属性已从标准化路由地址（<code>this.$route</code> 和 <code>router.resolve</code> 返回的对象）中删除。你仍然可以通过 <code>matched</code> 数组访问它：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matched</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$route.matched[</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$route.matched.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span></code></pre></div><p><strong>原因</strong>：同时存在 <code>parent</code> 和 <code>children</code> 会造成不必要的循环引用，而属性可以通过 <code>matched</code> 来检索。</p><h3 id="删除-pathToRegexpOptions" tabindex="-1">删除 <code>pathToRegexpOptions</code> <a class="header-anchor" href="#删除-pathToRegexpOptions" aria-label="Permalink to &quot;删除 \`pathToRegexpOptions\`&quot;">​</a></h3><p>路由的 <code>pathToRegexpOptions</code> 和 <code>caseSensitive</code> 属性已被 <code>createRouter()</code> 的 <code>sensitive</code> 和 <code>strict</code> 配置取代。现在，当使用 <code>createRouter()</code> 创建路由时，它们也可以直接传递。<code>path-to-regexp</code> 的任何其他特定配置已被删除，因为 <code>path-to-regexp</code> 已不再用于解析路径。</p><h3 id="删除未命名的参数" tabindex="-1">删除未命名的参数 <a class="header-anchor" href="#删除未命名的参数" aria-label="Permalink to &quot;删除未命名的参数&quot;">​</a></h3><p>由于取消了 <code>path-to-regexp</code>，所以不再支持未命名的参数：</p><ul><li><code>/foo(/foo)?/suffix</code> 变成 <code>/foo/:_(foo)?/suffix</code></li><li><code>/foo(foo)?</code> 变成 <code>/foo:_(foo)?</code></li><li><code>/foo/(.*)</code> 变成 <code>/foo/:_(.*)</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请注意，你可以使用任何名称代替 <code>_</code> 作为参数。重点是要提供一个名字。</p></div><h3 id="history-state-的用法" tabindex="-1"><code>history.state</code> 的用法 <a class="header-anchor" href="#history-state-的用法" aria-label="Permalink to &quot;\`history.state\` 的用法&quot;">​</a></h3><p>Vue Router 将信息保存在 <code>history.state</code> 上。如果你有任何手动调用 <code>history.pushState()</code> 的代码，你应该避免它，或者用的 <code>router.push()</code> 和 <code>history.replaceState()</code> 进行重构：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myState</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换成</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">({ ...</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">myState</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 将</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">(myState, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, url)</span></span>
<span class="line"><span style="color:#6A737D;">// 替换成</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(url)</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">({ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">history.state, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">myState }, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>同样，如果你在调用 <code>history.replaceState()</code> 时没有保留当前状态，你需要传递当前 <code>history.state</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">({}, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换成</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 将</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">({}, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, url)</span></span>
<span class="line"><span style="color:#6A737D;">// 替换成</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">(history.state, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, url)</span></span></code></pre></div><p><strong>原因</strong>：我们使用历史状态来保存导航信息，如滚动位置，以前的地址等。</p><h3 id="options-中需要配置-routes" tabindex="-1"><code>options</code> 中需要配置 <code>routes</code> <a class="header-anchor" href="#options-中需要配置-routes" aria-label="Permalink to &quot;\`options\` 中需要配置 \`routes\`&quot;">​</a></h3><p><code>options</code> 中的 <code>routes</code> 属性现在是必需的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [] })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({ routes: [] })</span></span></code></pre></div><p><strong>原因</strong>：路由的设计是为了创建路由，尽管你可以在以后添加它们。在大多数情况下，你至少需要一条路由，一般每个应用都会编写一次。</p><h3 id="不存在的命名路由" tabindex="-1">不存在的命名路由 <a class="header-anchor" href="#不存在的命名路由" aria-label="Permalink to &quot;不存在的命名路由&quot;">​</a></h3><p>跳转或解析不存在的命名路由会产生错误：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 哎呀，我们的名字打错了</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;homee&#39;</span><span style="color:#ABB2BF;"> }) </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;homee&#39;</span><span style="color:#ABB2BF;"> }) </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 哎呀，我们的名字打错了</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;homee&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;homee&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><p><strong>原因</strong>：以前，路由会导航到 <code>/</code>，但不显示任何内容（而不是主页）。抛出一个错误更有意义，因为我们不能生成一个有效的 URL 进行导航</p><h3 id="命名路由缺少必要的-params" tabindex="-1">命名路由缺少必要的 <code>params</code> <a class="header-anchor" href="#命名路由缺少必要的-params" aria-label="Permalink to &quot;命名路由缺少必要的 \`params\`&quot;">​</a></h3><p>在没有传递所需参数的情况下跳转或解析命名路由，会产生错误：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 给与以下路由:</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users/:id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserDetails</span><span style="color:#ABB2BF;"> }]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 缺少 \`id\` 参数会失败</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 给与以下路由:</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{ path: </span><span style="color:#032F62;">&#39;/users/:id&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, component: UserDetails }]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 缺少 \`id\` 参数会失败</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;"> })</span></span></code></pre></div><p><strong>原因</strong>：同上。</p><h3 id="带有空-path-的命名子路由不再添加斜线" tabindex="-1">带有空 <code>path</code> 的命名子路由不再添加斜线 <a class="header-anchor" href="#带有空-path-的命名子路由不再添加斜线" aria-label="Permalink to &quot;带有空 \`path\` 的命名子路由不再添加斜线&quot;">​</a></h3><p>给予任何空 <code>path</code> 的嵌套命名路由：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/dashboard&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dashboard-parent&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">DashboardParent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dashboard&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">DashboardDefault</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;settings&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dashboard-settings&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">DashboardSettings</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/dashboard&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;dashboard-parent&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    component: DashboardParent,</span></span>
<span class="line"><span style="color:#24292E;">    children: [</span></span>
<span class="line"><span style="color:#24292E;">      { path: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;dashboard&#39;</span><span style="color:#24292E;">, component: DashboardDefault },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;settings&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;dashboard-settings&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        component: DashboardSettings,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>现在，导航或解析到命名的路由 <code>dashboard</code> 时，会产生一个<strong>不带斜线的</strong> URL：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dashboard&#39;</span><span style="color:#ABB2BF;"> }).</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &#39;/dashboard&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;dashboard&#39;</span><span style="color:#24292E;"> }).href </span><span style="color:#6A737D;">// &#39;/dashboard&#39;</span></span></code></pre></div><p>这对子级 <code>redirect</code> 有重要的副作用，如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/parent&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Parent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 现在将重定向到 \`/home\` 而不是 \`/parent/home\`</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">redirect</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Home</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    path: </span><span style="color:#032F62;">&#39;/parent&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    component: Parent,</span></span>
<span class="line"><span style="color:#24292E;">    children: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 现在将重定向到 \`/home\` 而不是 \`/parent/home\`</span></span>
<span class="line"><span style="color:#24292E;">      { path: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, redirect: </span><span style="color:#032F62;">&#39;home&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { path: </span><span style="color:#032F62;">&#39;home&#39;</span><span style="color:#24292E;">, component: Home },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>请注意，如果 <code>path</code> 是 <code>/parent/</code>，这也可以，因为 <code>home</code> 到 <code>/parent/</code> 的相对地址确实是 <code>/parent/home</code>，但 <code>home</code> 到 <code>/parent</code> 的相对地址是 <code>/home</code>。</p><p><strong>原因</strong>：这是为了使尾部的斜线行为保持一致：默认情况下，所有路由都允许使用尾部的斜线。可以通过使用 <code>strict</code> 配置和手动添加(或不添加)斜线来禁用它。</p><h3 id="-route-属性编码" tabindex="-1"><code>$route</code> 属性编码 <a class="header-anchor" href="#-route-属性编码" aria-label="Permalink to &quot;\`$route\` 属性编码&quot;">​</a></h3><p>无论在哪里启动导航，<code>params</code>、<code>query</code>和 <code>hash</code> 中的解码值现在都是一致的（旧的浏览器仍然会产生未编码的 <code>path</code> 和 <code>fullPath</code>）。初始导航应产生与应用内部导航相同的结果。</p><p>给定任何<a href="/zh/api/interfaces/RouteLocationNormalized.html">规范化的路由地址</a>:</p><ul><li><code>path</code>, <code>fullPath</code>中的值不再被解码了。例如，直接在地址栏上写 &quot;<a href="https://example.com/hello" target="_blank" rel="noreferrer">https://example.com/hello</a> world&quot;，将得到编码后的版本：&quot;<a href="https://example.com/hello%20world" target="_blank" rel="noreferrer">https://example.com/hello world</a>&quot;，而 &quot;path &quot;和 &quot;fullPath &quot;都是&quot;/hello%20world&quot;。</li><li><code>hash</code> 现在被解码了，这样就可以复制过来。<code>router.push({ hash: $route.hash })</code> 可以直接用于 <a href="/zh/api/interfaces/RouterOptions.html#Properties-scrollBehavior">scrollBehavior</a> 的 <code>el</code> 配置中。</li><li>当使用 <code>push</code>、<code>resolve</code> 和 <code>replace</code> 并在对象中提供 <code>string</code> 地址或 <code>path</code> 属性时，<strong>必须进行编码</strong>(像以前的版本一样)。另一方面，<code>params</code>、<code>query</code> 和 <code>hash</code> 必须以未编码的版本提供。</li><li>斜线字符(<code>/</code>)现在已在 <code>params</code> 内正确解码，同时仍在 URL 上产生一个编码版本：<code>%2F</code>。</li></ul><p><strong>原因</strong>：这样，在调用 <code>router.push()</code> 和 <code>router.resolve()</code> 时，可以很容易地复制一个地址的现有属性，并使产生的路由地址在各浏览器之间保持一致。<code>router.push()</code> 现在是幂等的，这意味着调用 <code>router.push(route.fullPath)</code>、<code>router.push({ hash: route.hash })</code>、<code>router.push({ query: route.query })</code> 和<code>router.push({ params: route.params })</code> 不会产生额外的编码。</p><h3 id="TypeScript-变化" tabindex="-1">TypeScript 变化 <a class="header-anchor" href="#TypeScript-变化" aria-label="Permalink to &quot;TypeScript 变化&quot;">​</a></h3><p>为了使类型更一致，更有表现力，有些类型被重新命名：</p><table><thead><tr><th><code>vue-router@3</code></th><th><code>vue-router@4</code></th></tr></thead><tbody><tr><td>RouteConfig</td><td>RouteRecordRaw</td></tr><tr><td>Location</td><td>RouteLocation</td></tr><tr><td>Route</td><td>RouteLocationNormalized</td></tr></tbody></table><h2 id="新功能" tabindex="-1">新功能 <a class="header-anchor" href="#新功能" aria-label="Permalink to &quot;新功能&quot;">​</a></h2><p>Vue Router4 中需要关注的一些新功能包括：</p><ul><li><a href="./../advanced/dynamic-routing.html">动态路由</a></li><li><a href="./../advanced/composition-api.html">组合式 API</a></li></ul>`,124),e=[p];function t(c,r,y,B,i,d){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{h as __pageData,F as default};

import{_ as p,v as l,b as e,t as a,F as n,L as t,R as o,M as r}from"./chunks/framework.dd59a003.js";const m=JSON.parse('{"title":"编程式导航","description":"","frontmatter":{"sidebarDepth":0},"headers":[],"relativePath":"zh/guide/essentials/navigation.md","filePath":"zh/guide/essentials/navigation.md"}'),c={name:"zh/guide/essentials/navigation.md"},y=n("h1",{id:"编程式导航",tabindex:"-1"},[t("编程式导航 "),n("a",{class:"header-anchor",href:"#编程式导航","aria-label":'Permalink to "编程式导航"'},"​")],-1),i=o(`<p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</p><h2 id="导航到不同的位置" tabindex="-1">导航到不同的位置 <a class="header-anchor" href="#导航到不同的位置" aria-label="Permalink to &quot;导航到不同的位置&quot;">​</a></h2><p><strong>注意：在 Vue 实例中，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p><p>想要导航到不同的 URL，可以使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。</p><p>当你点击 <code>&lt;router-link&gt;</code> 时，内部会调用这个方法，所以点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 相当于调用 <code>router.push(...)</code> ：</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 字符串路径</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/users/eduardo&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带有路径的对象</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users/eduardo&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 命名的路由，并加上参数，让路由建立 url</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;eduardo&#39;</span><span style="color:#ABB2BF;"> } })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带查询参数，结果是 /register?plan=private</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/register&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">plan</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;private&#39;</span><span style="color:#ABB2BF;"> } })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 带 hash，结果是 /about#team</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hash</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#team&#39;</span><span style="color:#ABB2BF;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 字符串路径</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/users/eduardo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 带有路径的对象</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/users/eduardo&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 命名的路由，并加上参数，让路由建立 url</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, params: { username: </span><span style="color:#032F62;">&#39;eduardo&#39;</span><span style="color:#24292E;"> } })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 带查询参数，结果是 /register?plan=private</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/register&#39;</span><span style="color:#24292E;">, query: { plan: </span><span style="color:#032F62;">&#39;private&#39;</span><span style="color:#24292E;"> } })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 带 hash，结果是 /about#team</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">, hash: </span><span style="color:#032F62;">&#39;#team&#39;</span><span style="color:#24292E;"> })</span></span></code></pre></div><p><strong>注意</strong>：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 <code>name</code> 或手写完整的带有参数的 <code>path</code> ：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;eduardo&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 我们可以手动建立 url，但我们必须自己处理编码</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`/user/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">username</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 同样</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`/user/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">username</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> }) </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果可能的话，使用 \`name\` 和 \`params\` 从自动 URL 编码中获益</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> } }) </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`params\` 不能与 \`path\` 一起使用</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> } }) </span><span style="color:#7F848E;font-style:italic;">// -&gt; /user</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">username</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;eduardo&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 我们可以手动建立 url，但我们必须自己处理编码</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`/user/\${</span><span style="color:#24292E;">username</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#6A737D;">// 同样</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">\`/user/\${</span><span style="color:#24292E;">username</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#6A737D;">// 如果可能的话，使用 \`name\` 和 \`params\` 从自动 URL 编码中获益</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, params: { username } }) </span><span style="color:#6A737D;">// -&gt; /user/eduardo</span></span>
<span class="line"><span style="color:#6A737D;">// \`params\` 不能与 \`path\` 一起使用</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/user&#39;</span><span style="color:#24292E;">, params: { username } }) </span><span style="color:#6A737D;">// -&gt; /user</span></span></code></pre></div><p>当指定 <code>params</code> 时，可提供 <code>string</code> 或 <code>number</code> 参数（或者对于<a href="./route-matching-syntax.html#repeatable-params">可重复的参数</a>可提供一个数组）。<strong>任何其他类型（如 <code>undefined</code>、<code>false</code> 等）都将被自动字符串化</strong>。对于<a href="./route-matching-syntax.html#repeatable-params">可选参数</a>，你可以提供一个空字符串（<code>&quot;&quot;</code>）来跳过它。</p><p>由于属性 <code>to</code> 与 <code>router.push</code> 接受的对象种类相同，所以两者的规则完全相同。</p><p><code>router.push</code> 和所有其他导航方法都会返回一个 <em>Promise</em>，让我们可以等到导航完成后才知道是成功还是失败。我们将在 <a href="./../advanced/navigation-failures.html">Navigation Handling</a> 中详细介绍。</p><h2 id="替换当前位置" tabindex="-1">替换当前位置 <a class="header-anchor" href="#替换当前位置" aria-label="Permalink to &quot;替换当前位置&quot;">​</a></h2><p>它的作用类似于 <code>router.push</code>，唯一不同的是，它在导航时不会向 history 添加新记录，正如它的名字所暗示的那样——它取代了当前的条目。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><p>也可以直接在传递给 <code>router.push</code> 的 <code>routeLocation</code> 中增加一个属性 <code>replace: true</code> ：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/home&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">replace</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 相当于</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/home&#39;</span><span style="color:#ABB2BF;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">, replace: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// 相当于</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;"> })</span></span></code></pre></div><h2 id="横跨历史" tabindex="-1">横跨历史 <a class="header-anchor" href="#横跨历史" aria-label="Permalink to &quot;横跨历史&quot;">​</a></h2>`,19),B=o(`<p>该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步，类似于 <code>window.history.go(n)</code>。</p><p>例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 向前移动一条记录，与 router.forward() 相同</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">go</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回一条记录，与 router.back() 相同</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">go</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 前进 3 条记录</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">go</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果没有那么多记录，静默失败</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">go</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">go</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 向前移动一条记录，与 router.forward() 相同</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 返回一条记录，与 router.back() 相同</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 前进 3 条记录</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 如果没有那么多记录，静默失败</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="篡改历史" tabindex="-1">篡改历史 <a class="header-anchor" href="#篡改历史" aria-label="Permalink to &quot;篡改历史&quot;">​</a></h2><p>你可能已经注意到，<code>router.push</code>、<code>router.replace</code> 和 <code>router.go</code> 是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History" target="_blank" rel="noreferrer"><code>window.history.pushState</code>、<code>window.history.replaceState</code> 和 <code>window.history.go</code></a> 的翻版，它们确实模仿了 <code>window.history</code> 的 API。</p><p>因此，如果你已经熟悉 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noreferrer">Browser History APIs</a>，在使用 Vue Router 时，操作历史记录就会觉得很熟悉。</p><p>值得一提的是，无论在创建路由器实例时传递什么样的 <a href="./../../api/#history"><code>history</code> 配置</a>，Vue Router 的导航方法( <code>push</code>、<code>replace</code>、<code>go</code> )都能始终正常工作。</p>`,7);function d(u,h,F,E,A,C){const s=r("VueSchoolLink");return l(),e("div",null,[y,a(s,{href:"https://vueschool.io/lessons/vue-router-4-programmatic-navigation",title:"Learn how to navigate programmatically"}),i,a(s,{href:"https://vueschool.io/lessons/go-back",title:"Learn how to use Vue Router to go back"}),B])}const b=p(c,[["render",d]]);export{m as __pageData,b as default};

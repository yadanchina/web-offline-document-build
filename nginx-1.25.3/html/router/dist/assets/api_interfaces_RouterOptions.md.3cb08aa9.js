import{_ as e,v as a,b as s,R as o}from"./chunks/framework.dd59a003.js";const f=JSON.parse('{"title":"Interface: RouterOptions","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/interfaces/RouterOptions.md","filePath":"api/interfaces/RouterOptions.md"}'),t={name:"api/interfaces/RouterOptions.md"},n=o(`<p><a href="./../">API Documentation</a> / RouterOptions</p><h1 id="Interface-RouterOptions" tabindex="-1">Interface: RouterOptions <a class="header-anchor" href="#Interface-RouterOptions" aria-label="Permalink to &quot;Interface: RouterOptions&quot;">​</a></h1><p>Options to initialize a <a href="./Router.html">Router</a> instance.</p><h2 id="Hierarchy" tabindex="-1">Hierarchy <a class="header-anchor" href="#Hierarchy" aria-label="Permalink to &quot;Hierarchy&quot;">​</a></h2><ul><li><p><a href="./../#PathParserOptions"><code>PathParserOptions</code></a></p><p>↳ <strong><code>RouterOptions</code></strong></p></li></ul><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="end" tabindex="-1">end <a class="header-anchor" href="#end" aria-label="Permalink to &quot;end&quot;">​</a></h3><p>• <code>Optional</code> <strong>end</strong>: <code>boolean</code></p><p>Should the RegExp match until the end by appending a <code>$</code> to it.</p><p><strong><code>Default Value</code></strong></p><p><code>true</code></p><h4 id="Inherited-from" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p>PathParserOptions.end</p><hr><h3 id="history" tabindex="-1">history <a class="header-anchor" href="#history" aria-label="Permalink to &quot;history&quot;">​</a></h3><p>• <strong>history</strong>: <a href="./RouterHistory.html"><code>RouterHistory</code></a></p><p>History implementation used by the router. Most web applications should use <code>createWebHistory</code> but it requires the server to be properly configured. You can also use a <em>hash</em> based history with <code>createWebHashHistory</code> that does not require any configuration on the server but isn&#39;t handled at all by search engines and does poorly on SEO.</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// other options...</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  history: </span><span style="color:#6F42C1;">createWebHistory</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// other options...</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><hr><h3 id="linkActiveClass" tabindex="-1">linkActiveClass <a class="header-anchor" href="#linkActiveClass" aria-label="Permalink to &quot;linkActiveClass&quot;">​</a></h3><p>• <code>Optional</code> <strong>linkActiveClass</strong>: <code>string</code></p><p>Default class applied to active <a href="./../#RouterLink">RouterLink</a>. If none is provided, <code>router-link-active</code> will be applied.</p><hr><h3 id="linkExactActiveClass" tabindex="-1">linkExactActiveClass <a class="header-anchor" href="#linkExactActiveClass" aria-label="Permalink to &quot;linkExactActiveClass&quot;">​</a></h3><p>• <code>Optional</code> <strong>linkExactActiveClass</strong>: <code>string</code></p><p>Default class applied to exact active <a href="./../#RouterLink">RouterLink</a>. If none is provided, <code>router-link-exact-active</code> will be applied.</p><hr><h3 id="parseQuery" tabindex="-1">parseQuery <a class="header-anchor" href="#parseQuery" aria-label="Permalink to &quot;parseQuery&quot;">​</a></h3><p>• <code>Optional</code> <strong>parseQuery</strong>: (<code>search</code>: <code>string</code>) =&gt; <a href="./../#LocationQuery"><code>LocationQuery</code></a></p><h4 id="Type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#Type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>search</code>): <a href="./../#LocationQuery"><code>LocationQuery</code></a></p><p>Custom implementation to parse a query. See its counterpart, <a href="./RouterOptions.html#stringifyQuery">stringifyQuery</a>.</p><h5 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>search</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h5 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><a href="./../#LocationQuery"><code>LocationQuery</code></a></p><p><strong><code>Example</code></strong></p><p>Let&#39;s say you want to use the <a href="https://github.com/ljharb/qs" target="_blank" rel="noreferrer">qs package</a> to parse queries, you can provide both <code>parseQuery</code> and <code>stringifyQuery</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">qs</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;qs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// other options...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">parseQuery</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">qs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parse</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">stringifyQuery</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">qs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stringify</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> qs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;qs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// other options...</span></span>
<span class="line"><span style="color:#24292E;">  parseQuery: qs.parse,</span></span>
<span class="line"><span style="color:#24292E;">  stringifyQuery: qs.stringify,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><hr><h3 id="routes" tabindex="-1">routes <a class="header-anchor" href="#routes" aria-label="Permalink to &quot;routes&quot;">​</a></h3><p>• <strong>routes</strong>: readonly <a href="./../#RouteRecordRaw"><code>RouteRecordRaw</code></a>[]</p><p>Initial list of routes that should be added to the router.</p><hr><h3 id="scrollBehavior" tabindex="-1">scrollBehavior <a class="header-anchor" href="#scrollBehavior" aria-label="Permalink to &quot;scrollBehavior&quot;">​</a></h3><p>• <code>Optional</code> <strong>scrollBehavior</strong>: <a href="./RouterScrollBehavior.html"><code>RouterScrollBehavior</code></a></p><p>Function to control scrolling when navigating between pages. Can return a Promise to delay scrolling. Check ScrollBehavior.</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">scrollBehavior</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// \`to\` and \`from\` are both route locations</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// \`savedPosition\` can be null if there isn&#39;t one</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scrollBehavior</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">savedPosition</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// \`to\` and \`from\` are both route locations</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// \`savedPosition\` can be null if there isn&#39;t one</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h3 id="sensitive" tabindex="-1">sensitive <a class="header-anchor" href="#sensitive" aria-label="Permalink to &quot;sensitive&quot;">​</a></h3><p>• <code>Optional</code> <strong>sensitive</strong>: <code>boolean</code></p><p>Makes the RegExp case-sensitive.</p><p><strong><code>Default Value</code></strong></p><p><code>false</code></p><h4 id="Inherited-from-1" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from-1" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p>PathParserOptions.sensitive</p><hr><h3 id="strict" tabindex="-1">strict <a class="header-anchor" href="#strict" aria-label="Permalink to &quot;strict&quot;">​</a></h3><p>• <code>Optional</code> <strong>strict</strong>: <code>boolean</code></p><p>Whether to disallow a trailing slash or not.</p><p><strong><code>Default Value</code></strong></p><p><code>false</code></p><h4 id="Inherited-from-2" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from-2" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p>PathParserOptions.strict</p><hr><h3 id="stringifyQuery" tabindex="-1">stringifyQuery <a class="header-anchor" href="#stringifyQuery" aria-label="Permalink to &quot;stringifyQuery&quot;">​</a></h3><p>• <code>Optional</code> <strong>stringifyQuery</strong>: (<code>query</code>: <a href="./../#LocationQueryRaw"><code>LocationQueryRaw</code></a>) =&gt; <code>string</code></p><h4 id="Type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#Type-declaration-1" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>query</code>): <code>string</code></p><p>Custom implementation to stringify a query object. Should not prepend a leading <code>?</code>. <a href="./RouterOptions.html#parseQuery">parseQuery</a> counterpart to handle query parsing.</p><h5 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>query</code></td><td style="text-align:left;"><a href="./../#LocationQueryRaw"><code>LocationQueryRaw</code></a></td></tr></tbody></table><h5 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>string</code></p>`,76),r=[n];function l(p,i,c,d,h,y){return a(),s("div",null,r)}const g=e(t,[["render",l]]);export{f as __pageData,g as default};

import{_ as e,v as a,b as t,R as o}from"./chunks/framework.dd59a003.js";const f=JSON.parse('{"title":"API 文档","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/index.md","filePath":"zh/api/index.md"}'),s={name:"zh/api/index.md"},n=o(`<p>API 文档</p><h1 id="API-文档" tabindex="-1">API 文档 <a class="header-anchor" href="#API-文档" aria-label="Permalink to &quot;API 文档&quot;">​</a></h1><h2 id="Enumerations" tabindex="-1">TS 枚举 <a class="header-anchor" href="#Enumerations" aria-label="Permalink to &quot;TS 枚举 %{#Enumerations}%&quot;">​</a></h2><ul><li><a href="./enums/NavigationFailureType.html">NavigationFailureType</a></li></ul><h2 id="Interfaces" tabindex="-1">TS 接口 <a class="header-anchor" href="#Interfaces" aria-label="Permalink to &quot;TS 接口 %{#Interfaces}%&quot;">​</a></h2><ul><li><a href="./interfaces/HistoryState.html">HistoryState</a></li><li><a href="./interfaces/NavigationFailure.html">NavigationFailure</a></li><li><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></li><li><a href="./interfaces/NavigationGuardNext.html">NavigationGuardNext</a></li><li><a href="./interfaces/NavigationGuardWithThis.html">NavigationGuardWithThis</a></li><li><a href="./interfaces/NavigationHookAfter.html">NavigationHookAfter</a></li><li><a href="./interfaces/RouteLocation.html">RouteLocation</a></li><li><a href="./interfaces/RouteLocationMatched.html">RouteLocationMatched</a></li><li><a href="./interfaces/RouteLocationNormalized.html">RouteLocationNormalized</a></li><li><a href="./interfaces/RouteLocationNormalizedLoaded.html">RouteLocationNormalizedLoaded</a></li><li><a href="./interfaces/RouteLocationOptions.html">RouteLocationOptions</a></li><li><a href="./interfaces/RouteMeta.html">RouteMeta</a></li><li><a href="./interfaces/RouteRecordNormalized.html">RouteRecordNormalized</a></li><li><a href="./interfaces/Router.html">Router</a></li><li><a href="./interfaces/RouterHistory.html">RouterHistory</a></li><li><a href="./interfaces/RouterLinkProps.html">RouterLinkProps</a></li><li><a href="./interfaces/RouterOptions.html">RouterOptions</a></li><li><a href="./interfaces/RouterScrollBehavior.html">RouterScrollBehavior</a></li><li><a href="./interfaces/RouterViewProps.html">RouterViewProps</a></li></ul><h2 id="Type-Aliases" tabindex="-1">TS 类型别名 <a class="header-anchor" href="#Type-Aliases" aria-label="Permalink to &quot;TS 类型别名 %{#Type-Aliases}%&quot;">​</a></h2><h3 id="Type-Aliases-LocationQuery" tabindex="-1">LocationQuery <a class="header-anchor" href="#Type-Aliases-LocationQuery" aria-label="Permalink to &quot;LocationQuery %{#Type-Aliases-LocationQuery}%&quot;">​</a></h3><p>Ƭ <strong>LocationQuery</strong>: <code>Record</code>&lt;<code>string</code>, <code>LocationQueryValue</code> | <code>LocationQueryValue</code>[]&gt;</p><p>出现在 <a href="./interfaces/RouteLocationNormalized.html">RouteLocationNormalized</a> 中的规范化查询对象。</p><hr><h3 id="Type-Aliases-LocationQueryRaw" tabindex="-1">LocationQueryRaw <a class="header-anchor" href="#Type-Aliases-LocationQueryRaw" aria-label="Permalink to &quot;LocationQueryRaw %{#Type-Aliases-LocationQueryRaw}%&quot;">​</a></h3><p>Ƭ <strong>LocationQueryRaw</strong>: <code>Record</code>&lt;<code>string</code> | <code>number</code>, <code>LocationQueryValueRaw</code> | <code>LocationQueryValueRaw</code>[]&gt;</p><p>松散的 <a href="./#locationquery">LocationQuery</a> 对象，可以被传递给诸如 <a href="./interfaces/Router.html#push">push</a>、<a href="./interfaces/Router.html#replace">replace</a> 或任何创建 <a href="./#routelocationraw">RouteLocationRaw</a> 的函数。</p><hr><h3 id="Type-Aliases-PathParserOptions" tabindex="-1">PathParserOptions <a class="header-anchor" href="#Type-Aliases-PathParserOptions" aria-label="Permalink to &quot;PathParserOptions %{#Type-Aliases-PathParserOptions}%&quot;">​</a></h3><p>Ƭ <strong>PathParserOptions</strong>: <code>Pick</code>&lt;<code>_PathParserOptions</code>, <code>&quot;end&quot;</code> | <code>&quot;sensitive&quot;</code> | <code>&quot;strict&quot;</code>&gt;</p><hr><h3 id="Type-Aliases-RouteComponent" tabindex="-1">RouteComponent <a class="header-anchor" href="#Type-Aliases-RouteComponent" aria-label="Permalink to &quot;RouteComponent %{#Type-Aliases-RouteComponent}%&quot;">​</a></h3><p>Ƭ <strong>RouteComponent</strong>: <code>Component</code> | <code>DefineComponent</code></p><p>在 <a href="./interfaces/RouteLocationMatched.html">RouteLocationMatched</a> 中允许的组件。</p><hr><h3 id="Type-Aliases-RouteLocationRaw" tabindex="-1">RouteLocationRaw <a class="header-anchor" href="#Type-Aliases-RouteLocationRaw" aria-label="Permalink to &quot;RouteLocationRaw %{#Type-Aliases-RouteLocationRaw}%&quot;">​</a></h3><p>Ƭ <strong>RouteLocationRaw</strong>: <code>string</code> | <code>RouteLocationPathRaw</code> | <code>RouteLocationNamedRaw</code></p><p>用户级别的路由位置。</p><hr><h3 id="Type-Aliases-RouteParams" tabindex="-1">RouteParams <a class="header-anchor" href="#Type-Aliases-RouteParams" aria-label="Permalink to &quot;RouteParams %{#Type-Aliases-RouteParams}%&quot;">​</a></h3><p>Ƭ <strong>RouteParams</strong>: <code>Record</code>&lt;<code>string</code>, <code>RouteParamValue</code> | <code>RouteParamValue</code>[]&gt;</p><hr><h3 id="Type-Aliases-RouteParamsRaw" tabindex="-1">RouteParamsRaw <a class="header-anchor" href="#Type-Aliases-RouteParamsRaw" aria-label="Permalink to &quot;RouteParamsRaw %{#Type-Aliases-RouteParamsRaw}%&quot;">​</a></h3><p>Ƭ <strong>RouteParamsRaw</strong>: <code>Record</code>&lt;<code>string</code>, <code>RouteParamValueRaw</code> | <code>Exclude</code>&lt;<code>RouteParamValueRaw</code>, <code>null</code> | <code>undefined</code>&gt;[]&gt;</p><hr><h3 id="Type-Aliases-RouteRecord" tabindex="-1">RouteRecord <a class="header-anchor" href="#Type-Aliases-RouteRecord" aria-label="Permalink to &quot;RouteRecord %{#Type-Aliases-RouteRecord}%&quot;">​</a></h3><p>Ƭ <strong>RouteRecord</strong>: <a href="./interfaces/RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a></p><p>一个<a href="./#routerecord">路由记录</a>的规范化版本。</p><hr><h3 id="Type-Aliases-RouteRecordName" tabindex="-1">RouteRecordName <a class="header-anchor" href="#Type-Aliases-RouteRecordName" aria-label="Permalink to &quot;RouteRecordName %{#Type-Aliases-RouteRecordName}%&quot;">​</a></h3><p>Ƭ <strong>RouteRecordName</strong>: <code>string</code> | <code>symbol</code></p><p>用户定义的路由记录的可能的名称。</p><hr><h3 id="Type-Aliases-RouteRecordRaw" tabindex="-1">RouteRecordRaw <a class="header-anchor" href="#Type-Aliases-RouteRecordRaw" aria-label="Permalink to &quot;RouteRecordRaw %{#Type-Aliases-RouteRecordRaw}%&quot;">​</a></h3><p>Ƭ <strong>RouteRecordRaw</strong>: <code>RouteRecordSingleView</code> | <code>RouteRecordSingleViewWithChildren</code> | <code>RouteRecordMultipleViews</code> | <code>RouteRecordMultipleViewsWithChildren</code> | <code>RouteRecordRedirect</code></p><hr><h3 id="Type-Aliases-UseLinkOptions" tabindex="-1">UseLinkOptions <a class="header-anchor" href="#Type-Aliases-UseLinkOptions" aria-label="Permalink to &quot;UseLinkOptions %{#Type-Aliases-UseLinkOptions}%&quot;">​</a></h3><p>Ƭ <strong>UseLinkOptions</strong>: <code>VueUseOptions</code>&lt;<code>RouterLinkOptions</code>&gt;</p><h2 id="Variables" tabindex="-1">变量 <a class="header-anchor" href="#Variables" aria-label="Permalink to &quot;变量 %{#Variables}%&quot;">​</a></h2><h3 id="Variables-RouterLink" tabindex="-1">RouterLink <a class="header-anchor" href="#Variables-RouterLink" aria-label="Permalink to &quot;RouterLink %{#Variables-RouterLink}%&quot;">​</a></h3><p>• <code>Const</code> <strong>RouterLink</strong>: <code>_RouterLinkI</code></p><p>用来渲染一个链接的组件，该链接在被点击时会触发导航。</p><hr><h3 id="Variables-RouterView" tabindex="-1">RouterView <a class="header-anchor" href="#Variables-RouterView" aria-label="Permalink to &quot;RouterView %{#Variables-RouterView}%&quot;">​</a></h3><p>• <code>Const</code> <strong>RouterView</strong>: () =&gt; { <code>$props</code>: <code>AllowedComponentProps</code> &amp; <code>ComponentCustomProps</code> &amp; <code>VNodeProps</code> &amp; <a href="./interfaces/RouterViewProps.html"><code>RouterViewProps</code></a> ; <code>$slots</code>: { <code>default?</code>: (<code>__namedParameters</code>: { <code>Component</code>: <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt; ; <code>route</code>: <a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a> }) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt;[] } }</p><h4 id="Variables-RouterView-Type-declaration" tabindex="-1">类型声明 <a class="header-anchor" href="#Variables-RouterView-Type-declaration" aria-label="Permalink to &quot;类型声明 %{#Variables-RouterView-Type-declaration}%&quot;">​</a></h4><p>• <strong>new RouterView</strong>()</p><p>用于显示用户当前所处路由的组件。</p><hr><h3 id="Variables-START_LOCATION" tabindex="-1">START_LOCATION <a class="header-anchor" href="#Variables-START_LOCATION" aria-label="Permalink to &quot;START\\_LOCATION %{#Variables-START_LOCATION}%&quot;">​</a></h3><p>• <code>Const</code> <strong>START_LOCATION</strong>: <a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a></p><p>路由器的初始路由位置。可以在导航守卫中使用来区分初始导航。</p><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">START_LOCATION</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">START_LOCATION</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 初始导航</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { START_LOCATION } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (from </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">START_LOCATION</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始导航</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="Functions" tabindex="-1">函数 <a class="header-anchor" href="#Functions" aria-label="Permalink to &quot;函数 %{#Functions}%&quot;">​</a></h2><h3 id="Functions-createMemoryHistory" tabindex="-1">createMemoryHistory <a class="header-anchor" href="#Functions-createMemoryHistory" aria-label="Permalink to &quot;createMemoryHistory %{#Functions-createMemoryHistory}%&quot;">​</a></h3><p>▸ <strong>createMemoryHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>创建一个基于内存的历史。该历史的主要目的是为了处理服务端渲染。它从一个不存在的特殊位置开始。用户可以通过调用 <code>router.push</code> 或 <code>router.replace</code> 将该位置替换成起始位置。</p><h4 id="Functions-createMemoryHistory-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-createMemoryHistory-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-createMemoryHistory-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>&#39;&#39;</code></td><td style="text-align:left;">所有 URL 的基础位置，默认为 &#39;/&#39;</td></tr></tbody></table><h4 id="Functions-createMemoryHistory-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-createMemoryHistory-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-createMemoryHistory-Returns}%&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>一个历史对象，可以传递给路由器构造函数。</p><hr><h3 id="Functions-createRouter" tabindex="-1">createRouter <a class="header-anchor" href="#Functions-createRouter" aria-label="Permalink to &quot;createRouter %{#Functions-createRouter}%&quot;">​</a></h3><p>▸ <strong>createRouter</strong>(<code>options</code>): <a href="./interfaces/Router.html"><code>Router</code></a></p><p>创建一个可以被 Vue 应用使用的 Router 实例。</p><h4 id="Functions-createRouter-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-createRouter-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-createRouter-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><a href="./interfaces/RouterOptions.html"><code>RouterOptions</code></a></td><td style="text-align:left;"><a href="./interfaces/RouterOptions.html">RouterOptions</a></td></tr></tbody></table><h4 id="Functions-createRouter-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-createRouter-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-createRouter-Returns}%&quot;">​</a></h4><p><a href="./interfaces/Router.html"><code>Router</code></a></p><hr><h3 id="Functions-createWebHashHistory" tabindex="-1">createWebHashHistory <a class="header-anchor" href="#Functions-createWebHashHistory" aria-label="Permalink to &quot;createWebHashHistory %{#Functions-createWebHashHistory}%&quot;">​</a></h3><p>▸ <strong>createWebHashHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>创建一个 hash 模式的历史。在没有主机的 web 应用 (如 <code>file://</code>) 或无法通过配置服务器来处理任意 URL 的时候非常有用。</p><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 基于 https://example.com/folder</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 给出一个 \`https://example.com/folder#\` 的 URL</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/folder/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 给出一个 \`https://example.com/folder/#\` 的 URL</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果其基础位置提供了 \`#\`，则不会被 \`createWebHashHistory\` 添加</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/folder/#/app/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 给出一个 \`https://example.com/folder/#/app/\` 的 URL</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 你应该避免这样做，因为它改变了原始的 URL 且破坏了复制 URL 的工作</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/other-folder/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 给出一个 \`https://example.com/other-folder/#\` 的 URL</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 基于 file:///usr/etc/folder/index.html</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对于没有 \`host\` 的位置，该 base 会被忽略</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/iAmIgnored&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 给出一个 \`file:///usr/etc/folder/index.html#\` 的 URL</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 基于 https://example.com/folder</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 给出一个 \`https://example.com/folder#\` 的 URL</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/folder/&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 给出一个 \`https://example.com/folder/#\` 的 URL</span></span>
<span class="line"><span style="color:#6A737D;">// 如果其基础位置提供了 \`#\`，则不会被 \`createWebHashHistory\` 添加</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/folder/#/app/&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 给出一个 \`https://example.com/folder/#/app/\` 的 URL</span></span>
<span class="line"><span style="color:#6A737D;">// 你应该避免这样做，因为它改变了原始的 URL 且破坏了复制 URL 的工作</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/other-folder/&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 给出一个 \`https://example.com/other-folder/#\` 的 URL</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 基于 file:///usr/etc/folder/index.html</span></span>
<span class="line"><span style="color:#6A737D;">// 对于没有 \`host\` 的位置，该 base 会被忽略</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/iAmIgnored&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 给出一个 \`file:///usr/etc/folder/index.html#\` 的 URL</span></span></code></pre></div><h4 id="Functions-createWebHashHistory-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-createWebHashHistory-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-createWebHashHistory-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">可选提供的基础位置。默认为 <code>location.pathname + location.search</code>。如果在 <code>head</code> 中有一个 <code>&lt;base&gt;</code> 标签，它的值会因此被忽略，<strong>但注意它会影响所有 history.pushState() 的调用</strong>，这意味着如果你使用一个 <code>&lt;base&gt;</code> 标签，它的 <code>href</code> 值<strong>必须与这个参数匹配</strong> (忽略 <code>#</code> 后的任何东西)。</td></tr></tbody></table><h4 id="Functions-createWebHashHistory-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-createWebHashHistory-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-createWebHashHistory-Returns}%&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><hr><h3 id="Functions-createWebHistory" tabindex="-1">createWebHistory <a class="header-anchor" href="#Functions-createWebHistory" aria-label="Permalink to &quot;createWebHistory %{#Functions-createWebHistory}%&quot;">​</a></h3><p>▸ <strong>createWebHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>创建一个 HTML5 历史。对于单页应用来说这是最常见的历史。</p><h4 id="Functions-createWebHistory-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-createWebHistory-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-createWebHistory-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base?</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="Functions-createWebHistory-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-createWebHistory-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-createWebHistory-Returns}%&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><hr><h3 id="Functions-isNavigationFailure" tabindex="-1">isNavigationFailure <a class="header-anchor" href="#Functions-isNavigationFailure" aria-label="Permalink to &quot;isNavigationFailure %{#Functions-isNavigationFailure}%&quot;">​</a></h3><p>▸ <strong>isNavigationFailure</strong>(<code>error</code>, <code>type?</code>): error is NavigationRedirectError</p><p>检查一个对象是否是 <a href="./interfaces/NavigationFailure.html">NavigationFailure</a>。</p><p><strong>示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">isNavigationFailure</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">NavigationFailureType</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">afterEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">failure</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 任何类型的导航失败</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 重复的导航</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">duplicated</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 中止或取消的导航</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">aborted</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">canceled</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { isNavigationFailure, NavigationFailureType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 任何类型的导航失败</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 重复的导航</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure, NavigationFailureType.duplicated)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 中止或取消的导航</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure, NavigationFailureType.aborted </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> NavigationFailureType.canceled)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h4 id="Functions-isNavigationFailure-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-isNavigationFailure-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-isNavigationFailure-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>error</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">可能的 <a href="./interfaces/NavigationFailure.html">NavigationFailure</a></td></tr><tr><td style="text-align:left;"><code>type?</code></td><td style="text-align:left;"><code>NAVIGATION_GUARD_REDIRECT</code></td><td style="text-align:left;">可选的待检查类型</td></tr></tbody></table><h4 id="Functions-isNavigationFailure-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-isNavigationFailure-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-isNavigationFailure-Returns}%&quot;">​</a></h4><p>error is NavigationRedirectError</p><p>▸ <strong>isNavigationFailure</strong>(<code>error</code>, <code>type?</code>): error is NavigationFailure</p><h4 id="Functions-isNavigationFailure-Parameters_1" tabindex="-1">参数 <a class="header-anchor" href="#Functions-isNavigationFailure-Parameters_1" aria-label="Permalink to &quot;参数 %{#Functions-isNavigationFailure-Parameters_1}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>error</code></td><td style="text-align:left;"><code>any</code></td></tr><tr><td style="text-align:left;"><code>type?</code></td><td style="text-align:left;"><code>ErrorTypes</code> | <a href="./enums/NavigationFailureType.html"><code>NavigationFailureType</code></a></td></tr></tbody></table><h4 id="Functions-isNavigationFailure-Returns_1" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-isNavigationFailure-Returns_1" aria-label="Permalink to &quot;返回值 %{#Functions-isNavigationFailure-Returns_1}%&quot;">​</a></h4><p>error is NavigationFailure</p><hr><h3 id="Functions-loadRouteLocation" tabindex="-1">loadRouteLocation <a class="header-anchor" href="#Functions-loadRouteLocation" aria-label="Permalink to &quot;loadRouteLocation %{#Functions-loadRouteLocation}%&quot;">​</a></h3><p>▸ <strong>loadRouteLocation</strong>(<code>route</code>): <code>Promise</code>&lt;<a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a>&gt;</p><p>确保路由被加载，所以它可以作为一个 prop 传递给 <code>&lt;RouterView&gt;</code>。</p><h4 id="Functions-loadRouteLocation-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-loadRouteLocation-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-loadRouteLocation-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>route</code></td><td style="text-align:left;"><a href="./interfaces/RouteLocationNormalized.html"><code>RouteLocationNormalized</code></a></td><td style="text-align:left;">解析要加载的路由</td></tr></tbody></table><h4 id="Functions-loadRouteLocation-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-loadRouteLocation-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-loadRouteLocation-Returns}%&quot;">​</a></h4><p><code>Promise</code>&lt;<a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a>&gt;</p><hr><h3 id="Functions-onBeforeRouteLeave" tabindex="-1">onBeforeRouteLeave <a class="header-anchor" href="#Functions-onBeforeRouteLeave" aria-label="Permalink to &quot;onBeforeRouteLeave %{#Functions-onBeforeRouteLeave}%&quot;">​</a></h3><p>▸ <strong>onBeforeRouteLeave</strong>(<code>leaveGuard</code>): <code>void</code></p><p>添加一个导航守卫，不论当前位置的组件何时离开都会触发。类似于 beforeRouteLeave，但可以在任意组件中使用。当组件被卸载时，该守卫会被移除。</p><h4 id="Functions-onBeforeRouteLeave-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-onBeforeRouteLeave-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-onBeforeRouteLeave-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>leaveGuard</code></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html"><code>NavigationGuard</code></a></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></td></tr></tbody></table><h4 id="Functions-onBeforeRouteLeave-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-onBeforeRouteLeave-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-onBeforeRouteLeave-Returns}%&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="Functions-onBeforeRouteUpdate" tabindex="-1">onBeforeRouteUpdate <a class="header-anchor" href="#Functions-onBeforeRouteUpdate" aria-label="Permalink to &quot;onBeforeRouteUpdate %{#Functions-onBeforeRouteUpdate}%&quot;">​</a></h3><p>▸ <strong>onBeforeRouteUpdate</strong>(<code>updateGuard</code>): <code>void</code></p><p>添加一个导航守卫，不论当前位置何时被更新都会触发。类似于 beforeRouteUpdate，但可以在任何组件中使用。当组件被卸载时，该守卫会被移除。</p><h4 id="Functions-onBeforeRouteUpdate-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-onBeforeRouteUpdate-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-onBeforeRouteUpdate-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>updateGuard</code></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html"><code>NavigationGuard</code></a></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></td></tr></tbody></table><h4 id="Functions-onBeforeRouteUpdate-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-onBeforeRouteUpdate-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-onBeforeRouteUpdate-Returns}%&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="Functions-useLink" tabindex="-1">useLink <a class="header-anchor" href="#Functions-useLink" aria-label="Permalink to &quot;useLink %{#Functions-useLink}%&quot;">​</a></h3><p>▸ <strong>useLink</strong>(<code>props</code>): <code>Object</code></p><h4 id="Functions-useLink-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Functions-useLink-Parameters" aria-label="Permalink to &quot;参数 %{#Functions-useLink-Parameters}%&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>props</code></td><td style="text-align:left;"><code>VueUseOptions</code>&lt;<code>RouterLinkOptions</code>&gt;</td></tr></tbody></table><h4 id="Functions-useLink-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-useLink-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-useLink-Returns}%&quot;">​</a></h4><p><code>Object</code></p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>href</code></td><td style="text-align:left;"><code>ComputedRef&lt;string\\&gt;</code></td></tr><tr><td style="text-align:left;"><code>isActive</code></td><td style="text-align:left;"><code>ComputedRef</code>&lt;<code>boolean</code>&gt;</td></tr><tr><td style="text-align:left;"><code>isExactActive</code></td><td style="text-align:left;"><code>ComputedRef</code>&lt;<code>boolean</code>&gt;</td></tr><tr><td style="text-align:left;"><code>navigate</code></td><td style="text-align:left;">(<code>e</code>: <code>MouseEvent</code>) =&gt; <code>Promise</code>&lt;<code>void</code> | <a href="./interfaces/NavigationFailure.html"><code>NavigationFailure</code></a>&gt;</td></tr><tr><td style="text-align:left;"><code>route</code></td><td style="text-align:left;"><code>ComputedRef</code>&lt;<a href="./interfaces/RouteLocation.html"><code>RouteLocation</code></a> &amp; { <code>href</code>: <code>string</code> }&gt;</td></tr></tbody></table><hr><h3 id="Functions-useRoute" tabindex="-1">useRoute <a class="header-anchor" href="#Functions-useRoute" aria-label="Permalink to &quot;useRoute %{#Functions-useRoute}%&quot;">​</a></h3><p>▸ <strong>useRoute</strong>(): <a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a></p><p>返回当前的路由地址。相当于在模板中使用 <code>$route</code>。</p><h4 id="Functions-useRoute-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-useRoute-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-useRoute-Returns}%&quot;">​</a></h4><p><a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a></p><hr><h3 id="Functions-useRouter" tabindex="-1">useRouter <a class="header-anchor" href="#Functions-useRouter" aria-label="Permalink to &quot;useRouter %{#Functions-useRouter}%&quot;">​</a></h3><p>▸ <strong>useRouter</strong>(): <a href="./interfaces/Router.html"><code>Router</code></a></p><p>返回路由器实例。相当于在模板中使用 <code>$router</code>。</p><h4 id="Functions-useRouter-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Functions-useRouter-Returns" aria-label="Permalink to &quot;返回值 %{#Functions-useRouter-Returns}%&quot;">​</a></h4><p><a href="./interfaces/Router.html"><code>Router</code></a></p>`,155),r=[n];function l(i,c,p,d,u,h){return a(),t("div",null,r)}const R=e(s,[["render",l]]);export{f as __pageData,R as default};

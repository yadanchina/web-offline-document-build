import{_ as e,v as a,b as t,R as o}from"./chunks/framework.dd59a003.js";const f=JSON.parse('{"title":"Interface: Router","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/interfaces/Router.md","filePath":"api/interfaces/Router.md"}'),s={name:"api/interfaces/Router.md"},r=o(`<p><a href="./../">API Documentation</a> / Router</p><h1 id="Interface-Router" tabindex="-1">Interface: Router <a class="header-anchor" href="#Interface-Router" aria-label="Permalink to &quot;Interface: Router&quot;">​</a></h1><p>Router instance.</p><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="currentRoute" tabindex="-1">currentRoute <a class="header-anchor" href="#currentRoute" aria-label="Permalink to &quot;currentRoute&quot;">​</a></h3><p>• <code>Readonly</code> <strong>currentRoute</strong>: <code>Ref</code>&lt;<a href="./RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a>&gt;</p><p>Current <a href="./RouteLocationNormalized.html">RouteLocationNormalized</a></p><hr><h3 id="listening" tabindex="-1">listening <a class="header-anchor" href="#listening" aria-label="Permalink to &quot;listening&quot;">​</a></h3><p>• <strong>listening</strong>: <code>boolean</code></p><p>Allows turning off the listening of history events. This is a low level api for micro-frontends.</p><hr><h3 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h3><p>• <code>Readonly</code> <strong>options</strong>: <a href="./RouterOptions.html"><code>RouterOptions</code></a></p><p>Original options object passed to create the Router</p><h2 id="Methods" tabindex="-1">Methods <a class="header-anchor" href="#Methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="addRoute" tabindex="-1">addRoute <a class="header-anchor" href="#addRoute" aria-label="Permalink to &quot;addRoute&quot;">​</a></h3><p>▸ <strong>addRoute</strong>(<code>parentName</code>, <code>route</code>): () =&gt; <code>void</code></p><p>Add a new <a href="./../#RouteRecordRaw">route record</a> as the child of an existing route.</p><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>parentName</code></td><td style="text-align:left;"><a href="./../#RouteRecordName"><code>RouteRecordName</code></a></td><td style="text-align:left;">Parent Route Record where <code>route</code> should be appended at</td></tr><tr><td style="text-align:left;"><code>route</code></td><td style="text-align:left;"><a href="./../#RouteRecordRaw"><code>RouteRecordRaw</code></a></td><td style="text-align:left;">Route Record to add</td></tr></tbody></table><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (): <code>void</code></p><p>Add a new <a href="./../#RouteRecordRaw">route record</a> as the child of an existing route.</p><h5 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><p>▸ <strong>addRoute</strong>(<code>route</code>): () =&gt; <code>void</code></p><p>Add a new <a href="./../#RouteRecordRaw">route record</a> to the router.</p><h4 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>route</code></td><td style="text-align:left;"><a href="./../#RouteRecordRaw"><code>RouteRecordRaw</code></a></td><td style="text-align:left;">Route Record to add</td></tr></tbody></table><h4 id="Returns-2" tabindex="-1">Returns <a class="header-anchor" href="#Returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (): <code>void</code></p><p>Add a new <a href="./../#RouteRecordRaw">route record</a> to the router.</p><h5 id="Returns-3" tabindex="-1">Returns <a class="header-anchor" href="#Returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><hr><h3 id="afterEach" tabindex="-1">afterEach <a class="header-anchor" href="#afterEach" aria-label="Permalink to &quot;afterEach&quot;">​</a></h3><p>▸ <strong>afterEach</strong>(<code>guard</code>): () =&gt; <code>void</code></p><p>Add a navigation hook that is executed after every navigation. Returns a function that removes the registered hook.</p><h4 id="Parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>guard</code></td><td style="text-align:left;"><a href="./NavigationHookAfter.html"><code>NavigationHookAfter</code></a></td><td style="text-align:left;">navigation hook to add</td></tr></tbody></table><h4 id="Returns-4" tabindex="-1">Returns <a class="header-anchor" href="#Returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>a function that removes the registered hook</p><p>▸ (): <code>void</code></p><p>Add a navigation hook that is executed after every navigation. Returns a function that removes the registered hook.</p><h5 id="Returns-5" tabindex="-1">Returns <a class="header-anchor" href="#Returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><p>a function that removes the registered hook</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">afterEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">failure</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;failed navigation&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure)) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;failed navigation&#39;</span><span style="color:#24292E;">, failure)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">afterEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">failure</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;failed navigation&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure)) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;failed navigation&#39;</span><span style="color:#24292E;">, failure)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><hr><h3 id="back" tabindex="-1">back <a class="header-anchor" href="#back" aria-label="Permalink to &quot;back&quot;">​</a></h3><p>▸ <strong>back</strong>(): <code>void</code></p><p>Go back in history if possible by calling <code>history.back()</code>. Equivalent to <code>router.go(-1)</code>.</p><h4 id="Returns-6" tabindex="-1">Returns <a class="header-anchor" href="#Returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="beforeEach" tabindex="-1">beforeEach <a class="header-anchor" href="#beforeEach" aria-label="Permalink to &quot;beforeEach&quot;">​</a></h3><p>▸ <strong>beforeEach</strong>(<code>guard</code>): () =&gt; <code>void</code></p><p>Add a navigation guard that executes before any navigation. Returns a function that removes the registered guard.</p><h4 id="Parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>guard</code></td><td style="text-align:left;"><a href="./NavigationGuardWithThis.html"><code>NavigationGuardWithThis</code></a>&lt;<code>undefined</code>&gt;</td><td style="text-align:left;">navigation guard to add</td></tr></tbody></table><h4 id="Returns-7" tabindex="-1">Returns <a class="header-anchor" href="#Returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (): <code>void</code></p><p>Add a navigation guard that executes before any navigation. Returns a function that removes the registered guard.</p><h5 id="Returns-8" tabindex="-1">Returns <a class="header-anchor" href="#Returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><hr><h3 id="beforeResolve" tabindex="-1">beforeResolve <a class="header-anchor" href="#beforeResolve" aria-label="Permalink to &quot;beforeResolve&quot;">​</a></h3><p>▸ <strong>beforeResolve</strong>(<code>guard</code>): () =&gt; <code>void</code></p><p>Add a navigation guard that executes before navigation is about to be resolved. At this state all component have been fetched and other navigation guards have been successful. Returns a function that removes the registered guard.</p><h4 id="Parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>guard</code></td><td style="text-align:left;"><a href="./NavigationGuardWithThis.html"><code>NavigationGuardWithThis</code></a>&lt;<code>undefined</code>&gt;</td><td style="text-align:left;">navigation guard to add</td></tr></tbody></table><h4 id="Returns-9" tabindex="-1">Returns <a class="header-anchor" href="#Returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>a function that removes the registered guard</p><p>▸ (): <code>void</code></p><p>Add a navigation guard that executes before navigation is about to be resolved. At this state all component have been fetched and other navigation guards have been successful. Returns a function that removes the registered guard.</p><h5 id="Returns-10" tabindex="-1">Returns <a class="header-anchor" href="#Returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><p>a function that removes the registered guard</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeResolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">requiresAuth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isAuthenticated</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeResolve</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to.meta.requiresAuth </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isAuthenticated) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeResolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">requiresAuth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isAuthenticated</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeResolve</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to.meta.requiresAuth </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isAuthenticated) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><hr><h3 id="forward" tabindex="-1">forward <a class="header-anchor" href="#forward" aria-label="Permalink to &quot;forward&quot;">​</a></h3><p>▸ <strong>forward</strong>(): <code>void</code></p><p>Go forward in history if possible by calling <code>history.forward()</code>. Equivalent to <code>router.go(1)</code>.</p><h4 id="Returns-11" tabindex="-1">Returns <a class="header-anchor" href="#Returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="getRoutes" tabindex="-1">getRoutes <a class="header-anchor" href="#getRoutes" aria-label="Permalink to &quot;getRoutes&quot;">​</a></h3><p>▸ <strong>getRoutes</strong>(): <a href="./RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a>[]</p><p>Get a full list of all the <a href="./../#RouteRecord">route records</a>.</p><h4 id="Returns-12" tabindex="-1">Returns <a class="header-anchor" href="#Returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a>[]</p><hr><h3 id="go" tabindex="-1">go <a class="header-anchor" href="#go" aria-label="Permalink to &quot;go&quot;">​</a></h3><p>▸ <strong>go</strong>(<code>delta</code>): <code>void</code></p><p>Allows you to move forward or backward through the history. Calls <code>history.go()</code>.</p><h4 id="Parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>delta</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The position in the history to which you want to move, relative to the current page</td></tr></tbody></table><h4 id="Returns-13" tabindex="-1">Returns <a class="header-anchor" href="#Returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="hasRoute" tabindex="-1">hasRoute <a class="header-anchor" href="#hasRoute" aria-label="Permalink to &quot;hasRoute&quot;">​</a></h3><p>▸ <strong>hasRoute</strong>(<code>name</code>): <code>boolean</code></p><p>Checks if a route with a given name exists</p><h4 id="Parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><a href="./../#RouteRecordName"><code>RouteRecordName</code></a></td><td style="text-align:left;">Name of the route to check</td></tr></tbody></table><h4 id="Returns-14" tabindex="-1">Returns <a class="header-anchor" href="#Returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><hr><h3 id="isReady" tabindex="-1">isReady <a class="header-anchor" href="#isReady" aria-label="Permalink to &quot;isReady&quot;">​</a></h3><p>▸ <strong>isReady</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Returns a Promise that resolves when the router has completed the initial navigation, which means it has resolved all async enter hooks and async components that are associated with the initial route. If the initial navigation already happened, the promise resolves immediately.</p><p>This is useful in server-side rendering to ensure consistent output on both the server and the client. Note that on server side, you need to manually push the initial location while on client side, the router automatically picks it up from the URL.</p><h4 id="Returns-15" tabindex="-1">Returns <a class="header-anchor" href="#Returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><hr><h3 id="onError" tabindex="-1">onError <a class="header-anchor" href="#onError" aria-label="Permalink to &quot;onError&quot;">​</a></h3><p>▸ <strong>onError</strong>(<code>handler</code>): () =&gt; <code>void</code></p><p>Adds an error handler that is called every time a non caught error happens during navigation. This includes errors thrown synchronously and asynchronously, errors returned or passed to <code>next</code> in any navigation guard, and errors occurred when trying to resolve an async component that is required to render a route.</p><h4 id="Parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>handler</code></td><td style="text-align:left;"><code>_ErrorListener</code></td><td style="text-align:left;">error handler to register</td></tr></tbody></table><h4 id="Returns-16" tabindex="-1">Returns <a class="header-anchor" href="#Returns-16" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (): <code>void</code></p><p>Adds an error handler that is called every time a non caught error happens during navigation. This includes errors thrown synchronously and asynchronously, errors returned or passed to <code>next</code> in any navigation guard, and errors occurred when trying to resolve an async component that is required to render a route.</p><h5 id="Returns-17" tabindex="-1">Returns <a class="header-anchor" href="#Returns-17" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><hr><h3 id="push" tabindex="-1">push <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push&quot;">​</a></h3><p>▸ <strong>push</strong>(<code>to</code>): <code>Promise</code>&lt;<code>undefined</code> | <code>void</code> | <a href="./NavigationFailure.html"><code>NavigationFailure</code></a>&gt;</p><p>Programmatically navigate to a new URL by pushing an entry in the history stack.</p><h4 id="Parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>to</code></td><td style="text-align:left;"><a href="./../#RouteLocationRaw"><code>RouteLocationRaw</code></a></td><td style="text-align:left;">Route location to navigate to</td></tr></tbody></table><h4 id="Returns-18" tabindex="-1">Returns <a class="header-anchor" href="#Returns-18" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>undefined</code> | <code>void</code> | <a href="./NavigationFailure.html"><code>NavigationFailure</code></a>&gt;</p><hr><h3 id="removeRoute" tabindex="-1">removeRoute <a class="header-anchor" href="#removeRoute" aria-label="Permalink to &quot;removeRoute&quot;">​</a></h3><p>▸ <strong>removeRoute</strong>(<code>name</code>): <code>void</code></p><p>Remove an existing route by its name.</p><h4 id="Parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><a href="./../#RouteRecordName"><code>RouteRecordName</code></a></td><td style="text-align:left;">Name of the route to remove</td></tr></tbody></table><h4 id="Returns-19" tabindex="-1">Returns <a class="header-anchor" href="#Returns-19" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="replace" tabindex="-1">replace <a class="header-anchor" href="#replace" aria-label="Permalink to &quot;replace&quot;">​</a></h3><p>▸ <strong>replace</strong>(<code>to</code>): <code>Promise</code>&lt;<code>undefined</code> | <code>void</code> | <a href="./NavigationFailure.html"><code>NavigationFailure</code></a>&gt;</p><p>Programmatically navigate to a new URL by replacing the current entry in the history stack.</p><h4 id="Parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>to</code></td><td style="text-align:left;"><a href="./../#RouteLocationRaw"><code>RouteLocationRaw</code></a></td><td style="text-align:left;">Route location to navigate to</td></tr></tbody></table><h4 id="Returns-20" tabindex="-1">Returns <a class="header-anchor" href="#Returns-20" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>undefined</code> | <code>void</code> | <a href="./NavigationFailure.html"><code>NavigationFailure</code></a>&gt;</p><hr><h3 id="resolve" tabindex="-1">resolve <a class="header-anchor" href="#resolve" aria-label="Permalink to &quot;resolve&quot;">​</a></h3><p>▸ <strong>resolve</strong>(<code>to</code>, <code>currentLocation?</code>): <a href="./RouteLocation.html"><code>RouteLocation</code></a> &amp; { <code>href</code>: <code>string</code> }</p><p>Returns the <a href="./RouteLocation.html">normalized version</a> of a <a href="./../#RouteLocationRaw">route location</a>. Also includes an <code>href</code> property that includes any existing <code>base</code>. By default, the <code>currentLocation</code> used is <code>router.currentRoute</code> and should only be overridden in advanced use cases.</p><h4 id="Parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>to</code></td><td style="text-align:left;"><a href="./../#RouteLocationRaw"><code>RouteLocationRaw</code></a></td><td style="text-align:left;">Raw route location to resolve</td></tr><tr><td style="text-align:left;"><code>currentLocation?</code></td><td style="text-align:left;"><a href="./RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a></td><td style="text-align:left;">Optional current location to resolve against</td></tr></tbody></table><h4 id="Returns-21" tabindex="-1">Returns <a class="header-anchor" href="#Returns-21" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./RouteLocation.html"><code>RouteLocation</code></a> &amp; { <code>href</code>: <code>string</code> }</p>`,170),n=[r];function l(d,c,i,p,h,u){return a(),t("div",null,n)}const g=e(s,[["render",l]]);export{f as __pageData,g as default};

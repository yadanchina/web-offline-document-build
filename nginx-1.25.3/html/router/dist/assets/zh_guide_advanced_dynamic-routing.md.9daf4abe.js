import{_ as n,v as o,b as p,t as l,F as s,L as e,R as t,M as c}from"./chunks/framework.dd59a003.js";const m=JSON.parse('{"title":"动态路由","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/advanced/dynamic-routing.md","filePath":"zh/guide/advanced/dynamic-routing.md"}'),r={name:"zh/guide/advanced/dynamic-routing.md"},y=s("h1",{id:"动态路由",tabindex:"-1"},[e("动态路由 "),s("a",{class:"header-anchor",href:"#动态路由","aria-label":'Permalink to "动态路由"'},"​")],-1),B=t(`<p>对路由的添加通常是通过 <a href="./../../api/#routes"><code>routes</code> 选项</a>来完成的，但是在某些情况下，你可能想在应用程序已经运行的时候添加或删除路由。具有可扩展接口(如 <a href="https://cli.vuejs.org/dev-guide/ui-api.html" target="_blank" rel="noreferrer">Vue CLI UI</a> )这样的应用程序可以使用它来扩展应用程序。</p><h2 id="添加路由" tabindex="-1">添加路由 <a class="header-anchor" href="#添加路由" aria-label="Permalink to &quot;添加路由&quot;">​</a></h2><p>动态路由主要通过两个函数实现。<code>router.addRoute()</code> 和 <code>router.removeRoute()</code>。它们<strong>只</strong>注册一个新的路由，也就是说，如果新增加的路由与当前位置相匹配，就需要你用 <code>router.push()</code> 或 <code>router.replace()</code> 来<strong>手动导航</strong>，才能显示该新路由。我们来看一个例子：</p><p>想象一下，只有一个路由的以下路由：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/:articleName&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Article</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  history: </span><span style="color:#6F42C1;">createWebHistory</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  routes: [{ path: </span><span style="color:#032F62;">&#39;/:articleName&#39;</span><span style="color:#24292E;">, component: Article }],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>进入任何页面，<code>/about</code>，<code>/store</code>，或者 <code>/3-tricks-to-improve-your-routing-code</code> 最终都会呈现 <code>Article</code> 组件。如果我们在 <code>/about</code> 上添加一个新的路由：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">About</span><span style="color:#ABB2BF;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">, component: About })</span></span></code></pre></div><p>页面仍然会显示 <code>Article</code> 组件，我们需要手动调用 <code>router.replace()</code> 来改变当前的位置，并覆盖我们原来的位置（而不是添加一个新的路由，最后在我们的历史中两次出现在同一个位置）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">About</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 我们也可以使用 this.$route 或 route = useRoute() （在 setup 中）</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">currentRoute</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">, component: About })</span></span>
<span class="line"><span style="color:#6A737D;">// 我们也可以使用 this.$route 或 route = useRoute() （在 setup 中）</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(router.currentRoute.value.fullPath)</span></span></code></pre></div><p>记住，如果你需要等待新的路由显示，可以使用 <code>await router.replace()</code>。</p><h2 id="在导航守卫中添加路由" tabindex="-1">在导航守卫中添加路由 <a class="header-anchor" href="#在导航守卫中添加路由" aria-label="Permalink to &quot;在导航守卫中添加路由&quot;">​</a></h2><p>如果你决定在导航守卫内部添加或删除路由，你不应该调用 <code>router.replace()</code>，而是通过返回新的位置来触发重定向：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">hasNecessaryRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">generateRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 触发重定向</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasNecessaryRoute</span><span style="color:#24292E;">(to)) {</span></span>
<span class="line"><span style="color:#24292E;">    router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">generateRoute</span><span style="color:#24292E;">(to))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 触发重定向</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> to.fullPath</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>上面的例子有两个假设：第一，新添加的路由记录将与 <code>to</code> 位置相匹配，实际上导致与我们试图访问的位置不同。第二，<code>hasNecessaryRoute()</code> 在添加新的路由后返回 <code>false</code>，以避免无限重定向。</p><p>因为是在重定向中，所以我们是在替换将要跳转的导航，实际上行为就像之前的例子一样。而在实际场景中，添加路由的行为更有可能发生在导航守卫之外，例如，当一个视图组件挂载时，它会注册新的路由。</p><h2 id="删除路由" tabindex="-1">删除路由 <a class="header-anchor" href="#删除路由" aria-label="Permalink to &quot;删除路由&quot;">​</a></h2><p>有几个不同的方法来删除现有的路由：</p><ul><li><p>通过添加一个名称冲突的路由。如果添加与现有途径名称相同的途径，会先删除路由，再添加路由：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">About</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/other&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Other</span><span style="color:#ABB2BF;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;about&#39;</span><span style="color:#24292E;">, component: About })</span></span>
<span class="line"><span style="color:#6A737D;">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/other&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;about&#39;</span><span style="color:#24292E;">, component: Other })</span></span></code></pre></div></li><li><p>通过调用 <code>router.addRoute()</code> 返回的回调：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">removeRoute</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">routeRecord</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">removeRoute</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 删除路由如果存在的话</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">removeRoute</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">(routeRecord)</span></span>
<span class="line"><span style="color:#6F42C1;">removeRoute</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 删除路由如果存在的话</span></span></code></pre></div><p>当路由没有名称时，这很有用。</p></li><li><p>通过使用 <code>router.removeRoute()</code> 按名称删除路由：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;about&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">About</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 删除路由</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;about&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;about&#39;</span><span style="color:#24292E;">, component: About })</span></span>
<span class="line"><span style="color:#6A737D;">// 删除路由</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">removeRoute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;about&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>需要注意的是，如果你想使用这个功能，但又想避免名字的冲突，可以在路由中使用 <code>Symbol</code> 作为名字。</p></li></ul><p>当路由被删除时，<strong>所有的别名和子路由也会被同时删除</strong></p><h2 id="添加嵌套路由" tabindex="-1">添加嵌套路由 <a class="header-anchor" href="#添加嵌套路由" aria-label="Permalink to &quot;添加嵌套路由&quot;">​</a></h2><p>要将嵌套路由添加到现有的路由中，可以将路由的 <em>name</em> 作为第一个参数传递给 <code>router.addRoute()</code>，这将有效地添加路由，就像通过 <code>children</code> 添加的一样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;admin&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/admin&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Admin</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;admin&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;settings&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">AdminSettings</span><span style="color:#ABB2BF;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;admin&#39;</span><span style="color:#24292E;">, path: </span><span style="color:#032F62;">&#39;/admin&#39;</span><span style="color:#24292E;">, component: Admin })</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;admin&#39;</span><span style="color:#24292E;">, { path: </span><span style="color:#032F62;">&#39;settings&#39;</span><span style="color:#24292E;">, component: AdminSettings })</span></span></code></pre></div><p>这等效于：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRoute</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;admin&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/admin&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Admin</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;settings&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">AdminSettings</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">addRoute</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;admin&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  path: </span><span style="color:#032F62;">&#39;/admin&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  component: Admin,</span></span>
<span class="line"><span style="color:#24292E;">  children: [{ path: </span><span style="color:#032F62;">&#39;settings&#39;</span><span style="color:#24292E;">, component: AdminSettings }],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="查看现有路由" tabindex="-1">查看现有路由 <a class="header-anchor" href="#查看现有路由" aria-label="Permalink to &quot;查看现有路由&quot;">​</a></h2><p>Vue Router 提供了两个功能来查看现有的路由：</p><ul><li><a href="./../../api/interfaces/Router.html#Methods-hasRoute"><code>router.hasRoute()</code></a>：检查路由是否存在。</li><li><a href="./../../api/interfaces/Router.html#Methods-getRoutes"><code>router.getRoutes()</code></a>：获取一个包含所有路由记录的数组。</li></ul>`,27);function i(d,u,F,A,E,h){const a=c("VueSchoolLink");return o(),p("div",null,[y,l(a,{href:"https://vueschool.io/lessons/vue-router-4-dynamic-routing",title:"Learn how to add routes at runtime"}),B])}const g=n(r,[["render",i]]);export{m as __pageData,g as default};

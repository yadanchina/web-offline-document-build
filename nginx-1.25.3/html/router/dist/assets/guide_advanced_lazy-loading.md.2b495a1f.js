import{_ as a,v as l,b as o,t as p,F as s,L as e,R as t,M as c}from"./chunks/framework.dd59a003.js";const g=JSON.parse('{"title":"Lazy Loading Routes","description":"","frontmatter":{},"headers":[],"relativePath":"guide/advanced/lazy-loading.md","filePath":"guide/advanced/lazy-loading.md"}'),r={name:"guide/advanced/lazy-loading.md"},i=s("h1",{id:"Lazy-Loading-Routes",tabindex:"-1"},[e("Lazy Loading Routes "),s("a",{class:"header-anchor",href:"#Lazy-Loading-Routes","aria-label":'Permalink to "Lazy Loading Routes"'},"​")],-1),y=t(`<p>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route&#39;s components into separate chunks, and only load them when the route is visited.</p><p>Vue Router supports <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer">dynamic imports</a> out of the box, meaning you can replace static imports with dynamic ones:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// replace</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// import UserDetails from &#39;./views/UserDetails&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">UserDetails</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./views/UserDetails.vue&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users/:id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserDetails</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// or use it directly in the route definition</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users/:id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./views/UserDetails.vue&#39;</span><span style="color:#ABB2BF;">) },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// replace</span></span>
<span class="line"><span style="color:#6A737D;">// import UserDetails from &#39;./views/UserDetails&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// with</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./views/UserDetails.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  routes: [</span></span>
<span class="line"><span style="color:#24292E;">    { path: </span><span style="color:#032F62;">&#39;/users/:id&#39;</span><span style="color:#24292E;">, component: UserDetails }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// or use it directly in the route definition</span></span>
<span class="line"><span style="color:#24292E;">    { path: </span><span style="color:#032F62;">&#39;/users/:id&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./views/UserDetails.vue&#39;</span><span style="color:#24292E;">) },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>The <code>component</code> (and <code>components</code>) option accepts a function that returns a Promise of a component and Vue Router <strong>will only fetch it when entering the page for the first time</strong>, then use the cached version. Which means you can also have more complex functions as long as they return a Promise:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">UserDetails</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* component definition */</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* component definition */</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span></code></pre></div><p>In general, it&#39;s a good idea <strong>to always use dynamic imports</strong> for all your routes.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Do <strong>not</strong> use <a href="https://v3.vuejs.org/guide/component-dynamic-async.html#async-components" target="_blank" rel="noreferrer">Async components</a> for routes. Async components can still be used inside route components but route component themselves are just dynamic imports.</p></div><p>When using a bundler like webpack, this will automatically benefit from <a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noreferrer">code splitting</a></p><p>When using Babel, you will need to add the <a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/" target="_blank" rel="noreferrer">syntax-dynamic-import</a> plugin so that Babel can properly parse the syntax.</p><h2 id="Grouping-Components-in-the-Same-Chunk" tabindex="-1">Grouping Components in the Same Chunk <a class="header-anchor" href="#Grouping-Components-in-the-Same-Chunk" aria-label="Permalink to &quot;Grouping Components in the Same Chunk&quot;">​</a></h2><h3 id="With-webpack" tabindex="-1">With webpack <a class="header-anchor" href="#With-webpack" aria-label="Permalink to &quot;With webpack&quot;">​</a></h3><p>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use <a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noreferrer">named chunks</a> by providing a chunk name using a special comment syntax (requires webpack &gt; 2.4):</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">UserDetails</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-user&quot; */</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./UserDetails.vue&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">UserDashboard</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-user&quot; */</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./UserDashboard.vue&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">UserProfileEdit</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-user&quot; */</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./UserProfileEdit.vue&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;group-user&quot; */</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./UserDetails.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDashboard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;group-user&quot; */</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./UserDashboard.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserProfileEdit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;group-user&quot; */</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./UserProfileEdit.vue&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>webpack will group any async module with the same chunk name into the same async chunk.</p><h3 id="With-Vite" tabindex="-1">With Vite <a class="header-anchor" href="#With-Vite" aria-label="Permalink to &quot;With Vite&quot;">​</a></h3><p>In Vite you can define the chunks under the <a href="https://vitejs.dev/config/#build-rollupoptions" target="_blank" rel="noreferrer"><code>rollupOptions</code></a>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">build</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">rollupOptions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// https://rollupjs.org/guide/en/#outputmanualchunks</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">manualChunks</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#98C379;">&#39;group-user&#39;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&#39;./src/UserDetails&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&#39;./src/UserDashboard&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&#39;./src/UserProfileEdit&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          ],</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  build: {</span></span>
<span class="line"><span style="color:#24292E;">    rollupOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// https://rollupjs.org/guide/en/#outputmanualchunks</span></span>
<span class="line"><span style="color:#24292E;">      output: {</span></span>
<span class="line"><span style="color:#24292E;">        manualChunks: {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;group-user&#39;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;./src/UserDetails&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;./src/UserDashboard&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;./src/UserProfileEdit&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          ],</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div>`,17);function B(u,d,h,F,A,E){const n=c("VueSchoolLink");return l(),o("div",null,[i,p(n,{href:"https://vueschool.io/lessons/lazy-loading-routes-vue-cli-only",title:"Learn about lazy loading routes"}),y])}const D=a(r,[["render",B]]);export{g as __pageData,D as default};

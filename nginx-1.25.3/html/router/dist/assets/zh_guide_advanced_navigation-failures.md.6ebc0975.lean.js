import{_ as n,v as l,b as o,t as p,F as s,L as e,R as t,M as c}from"./chunks/framework.dd59a003.js";const v=JSON.parse('{"title":"等待导航结果","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/advanced/navigation-failures.md","filePath":"zh/guide/advanced/navigation-failures.md"}'),r={name:"zh/guide/advanced/navigation-failures.md"},i=s("h1",{id:"等待导航结果",tabindex:"-1"},[e("等待导航结果 "),s("a",{class:"header-anchor",href:"#等待导航结果","aria-label":'Permalink to "等待导航结果"'},"​")],-1),y=t(`<p>当使用 <code>router-link</code> 组件时，Vue Router 会自动调用 <code>router.push</code> 来触发一次导航。虽然大多数链接的预期行为是将用户导航到一个新页面，但也有少数情况下用户将留在同一页面上：</p><ul><li>用户已经位于他们正在尝试导航到的页面</li><li>一个<a href="./navigation-guards.html">导航守卫</a>通过调用 <code>return false</code> 中断了这次导航</li><li>当前的导航守卫还没有完成时，一个新的导航守卫会出现了</li><li>一个<a href="./navigation-guards.html">导航守卫</a>通过返回一个新的位置，重定向到其他地方 (例如，<code>return &#39;/login&#39;</code>)</li><li>一个<a href="./navigation-guards.html">导航守卫</a>抛出了一个 <code>Error</code></li></ul><p>如果我们想在一个导航完成后做一些事情，我们需要一个在调用 <code>router.push</code> 后进行等待的方法。想象一下，我们有一个移动手机菜单，它允许我们进入不同的页面，而我们只想在导航到新页面后隐藏菜单，我们可能想这样做：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/my-profile&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isMenuOpen</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/my-profile&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.isMenuOpen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>但是这样做会马上关闭菜单，因为 <strong>导航是异步的</strong>，我们需要 <code>await</code> <code>router.push</code> 返回的 promise ：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/my-profile&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isMenuOpen</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/my-profile&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.isMenuOpen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>现在，一旦导航完成，菜单就会关闭，但如果导航被阻止，它也会关闭。我们需要一种方法来检测我们是否真的改变了页面。</p><h2 id="检测导航故障" tabindex="-1">检测导航故障 <a class="header-anchor" href="#检测导航故障" aria-label="Permalink to &quot;检测导航故障&quot;">​</a></h2><p>如果导航被阻止，导致用户停留在同一个页面上，由 <code>router.push</code> 返回的 <code>Promise</code> 的解析值将是 <em>Navigation Failure</em>。否则，它将是一个 <em>falsy</em> 值(通常是 <code>undefined</code>)。这样我们就可以区分我们导航是否离开了当前位置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">navigationResult</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/my-profile&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">navigationResult</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 导航被阻止</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 导航成功 (包括重新导航的情况)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isMenuOpen</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">navigationResult</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/my-profile&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (navigationResult) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 导航被阻止</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 导航成功 (包括重新导航的情况)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.isMenuOpen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><em>Navigation Failure</em> 是带有一些额外属性的 <code>Error</code> 实例，这些属性为我们提供了足够的信息，让我们知道哪些导航被阻止了以及为什么被阻止了。要检查导航结果的性质，请使用 <code>isNavigationFailure</code> 函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NavigationFailureType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isNavigationFailure</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 试图离开未保存的编辑文本界面</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">failure</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/articles/2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">aborted</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 给用户显示一个小通知</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">showToast</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;You have unsaved changes, discard and leave anyway?&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { NavigationFailureType, isNavigationFailure } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 试图离开未保存的编辑文本界面</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">failure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/articles/2&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure, NavigationFailureType.aborted)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 给用户显示一个小通知</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">showToast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;You have unsaved changes, discard and leave anyway?&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你忽略第二个参数： <code>isNavigationFailure(failure)</code>，那么就只会检查这个 <code>failure</code> 是不是一个 <em>Navigation Failure</em>。</p></div><h2 id="鉴别导航故障" tabindex="-1">鉴别导航故障 <a class="header-anchor" href="#鉴别导航故障" aria-label="Permalink to &quot;鉴别导航故障&quot;">​</a></h2><p>正如我们在一开始所说的，有不同的情况会导致导航的中止，所有这些情况都会导致不同的 <em>Navigation Failure</em>。它们可以用 <code>isNavigationFailure</code> 和 <code>NavigationFailureType</code> 来区分。总共有三种不同的类型：</p><ul><li><code>aborted</code>：在导航守卫中返回 <code>false</code> 中断了本次导航。</li><li><code>cancelled</code>： 在当前导航还没有完成之前又有了一个新的导航。比如，在等待导航守卫的过程中又调用了 <code>router.push</code>。</li><li><code>duplicated</code>：导航被阻止，因为我们已经在目标位置了。</li></ul><h2 id="导航故障的属性" tabindex="-1"><em>导航故障</em>的属性 <a class="header-anchor" href="#导航故障的属性" aria-label="Permalink to &quot;*导航故障*的属性&quot;">​</a></h2><p>所有的导航失败都会暴露 <code>to</code> 和 <code>from</code> 属性，以反映失败导航的当前位置和目标位置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 正在尝试访问 admin 页面</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/admin&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">failure</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">aborted</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">failure</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &#39;/admin&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">failure</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &#39;/&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 正在尝试访问 admin 页面</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/admin&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">failure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure, NavigationFailureType.aborted)) {</span></span>
<span class="line"><span style="color:#24292E;">    failure.to.path </span><span style="color:#6A737D;">// &#39;/admin&#39;</span></span>
<span class="line"><span style="color:#24292E;">    failure.from.path </span><span style="color:#6A737D;">// &#39;/&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>在所有情况下，<code>to</code> 和 <code>from</code> 都是规范化的路由地址。</p><h2 id="检测重定向" tabindex="-1">检测重定向 <a class="header-anchor" href="#检测重定向" aria-label="Permalink to &quot;检测重定向&quot;">​</a></h2><p>当在导航守卫中返回一个新的位置时，我们会触发一个新的导航，覆盖正在进行的导航。与其他返回值不同的是，重定向不会阻止导航，<strong>而是创建一个新的导航</strong>。因此，通过读取路由地址中的 <code>redirectedFrom</code> 属性，对其进行不同的检查：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/my-profile&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">currentRoute</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">redirectedFrom</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// redirectedFrom 是解析出的路由地址，就像导航守卫中的 to和 from</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/my-profile&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (router.currentRoute.value.redirectedFrom) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// redirectedFrom 是解析出的路由地址，就像导航守卫中的 to和 from</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,23);function B(d,u,F,A,h,E){const a=c("VueSchoolLink");return l(),o("div",null,[i,p(a,{href:"https://vueschool.io/lessons/vue-router-4-detecting-navigation-failures",title:"Learn how to detect navigation failures"}),y])}const g=n(r,[["render",B]]);export{v as __pageData,g as default};

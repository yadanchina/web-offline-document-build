import{_ as e,v as a,b as t,R as o}from"./chunks/framework.dd59a003.js";const f=JSON.parse('{"title":"API Documentation","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),s={name:"api/index.md"},n=o(`<p>API Documentation</p><h1 id="API-Documentation" tabindex="-1">API Documentation <a class="header-anchor" href="#API-Documentation" aria-label="Permalink to &quot;API Documentation&quot;">​</a></h1><h2 id="Enumerations" tabindex="-1">Enumerations <a class="header-anchor" href="#Enumerations" aria-label="Permalink to &quot;Enumerations&quot;">​</a></h2><ul><li><a href="./enums/NavigationFailureType.html">NavigationFailureType</a></li></ul><h2 id="Interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#Interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><ul><li><a href="./interfaces/HistoryState.html">HistoryState</a></li><li><a href="./interfaces/NavigationFailure.html">NavigationFailure</a></li><li><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></li><li><a href="./interfaces/NavigationGuardNext.html">NavigationGuardNext</a></li><li><a href="./interfaces/NavigationGuardWithThis.html">NavigationGuardWithThis</a></li><li><a href="./interfaces/NavigationHookAfter.html">NavigationHookAfter</a></li><li><a href="./interfaces/RouteLocation.html">RouteLocation</a></li><li><a href="./interfaces/RouteLocationMatched.html">RouteLocationMatched</a></li><li><a href="./interfaces/RouteLocationNormalized.html">RouteLocationNormalized</a></li><li><a href="./interfaces/RouteLocationNormalizedLoaded.html">RouteLocationNormalizedLoaded</a></li><li><a href="./interfaces/RouteLocationOptions.html">RouteLocationOptions</a></li><li><a href="./interfaces/RouteMeta.html">RouteMeta</a></li><li><a href="./interfaces/RouteRecordMultipleViews.html">RouteRecordMultipleViews</a></li><li><a href="./interfaces/RouteRecordMultipleViewsWithChildren.html">RouteRecordMultipleViewsWithChildren</a></li><li><a href="./interfaces/RouteRecordNormalized.html">RouteRecordNormalized</a></li><li><a href="./interfaces/RouteRecordRedirect.html">RouteRecordRedirect</a></li><li><a href="./interfaces/RouteRecordSingleView.html">RouteRecordSingleView</a></li><li><a href="./interfaces/RouteRecordSingleViewWithChildren.html">RouteRecordSingleViewWithChildren</a></li><li><a href="./interfaces/Router.html">Router</a></li><li><a href="./interfaces/RouterHistory.html">RouterHistory</a></li><li><a href="./interfaces/RouterLinkProps.html">RouterLinkProps</a></li><li><a href="./interfaces/RouterOptions.html">RouterOptions</a></li><li><a href="./interfaces/RouterScrollBehavior.html">RouterScrollBehavior</a></li><li><a href="./interfaces/RouterViewProps.html">RouterViewProps</a></li><li><a href="./interfaces/RouteRecordBase.html">_RouteRecordBase</a></li></ul><h2 id="Type-Aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#Type-Aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><h3 id="LocationQuery" tabindex="-1">LocationQuery <a class="header-anchor" href="#LocationQuery" aria-label="Permalink to &quot;LocationQuery&quot;">​</a></h3><p>Ƭ <strong>LocationQuery</strong>: <code>Record</code>&lt;<code>string</code>, <code>LocationQueryValue</code> | <code>LocationQueryValue</code>[]&gt;</p><p>Normalized query object that appears in <a href="./interfaces/RouteLocationNormalized.html">RouteLocationNormalized</a></p><hr><h3 id="LocationQueryRaw" tabindex="-1">LocationQueryRaw <a class="header-anchor" href="#LocationQueryRaw" aria-label="Permalink to &quot;LocationQueryRaw&quot;">​</a></h3><p>Ƭ <strong>LocationQueryRaw</strong>: <code>Record</code>&lt;<code>string</code> | <code>number</code>, <code>LocationQueryValueRaw</code> | <code>LocationQueryValueRaw</code>[]&gt;</p><p>Loose <a href="./#LocationQuery">LocationQuery</a> object that can be passed to functions like <a href="./interfaces/Router.html#push">push</a> and <a href="./interfaces/Router.html#replace">replace</a> or anywhere when creating a <a href="./#RouteLocationRaw">RouteLocationRaw</a></p><hr><h3 id="PathParserOptions" tabindex="-1">PathParserOptions <a class="header-anchor" href="#PathParserOptions" aria-label="Permalink to &quot;PathParserOptions&quot;">​</a></h3><p>Ƭ <strong>PathParserOptions</strong>: <code>Pick</code>&lt;<code>_PathParserOptions</code>, <code>&quot;end&quot;</code> | <code>&quot;sensitive&quot;</code> | <code>&quot;strict&quot;</code>&gt;</p><hr><h3 id="RouteComponent" tabindex="-1">RouteComponent <a class="header-anchor" href="#RouteComponent" aria-label="Permalink to &quot;RouteComponent&quot;">​</a></h3><p>Ƭ <strong>RouteComponent</strong>: <code>Component</code> | <code>DefineComponent</code></p><p>Allowed Component in <a href="./interfaces/RouteLocationMatched.html">RouteLocationMatched</a></p><hr><h3 id="RouteLocationRaw" tabindex="-1">RouteLocationRaw <a class="header-anchor" href="#RouteLocationRaw" aria-label="Permalink to &quot;RouteLocationRaw&quot;">​</a></h3><p>Ƭ <strong>RouteLocationRaw</strong>: <code>string</code> | <code>RouteLocationPathRaw</code> | <code>RouteLocationNamedRaw</code></p><p>User-level route location</p><hr><h3 id="RouteParams" tabindex="-1">RouteParams <a class="header-anchor" href="#RouteParams" aria-label="Permalink to &quot;RouteParams&quot;">​</a></h3><p>Ƭ <strong>RouteParams</strong>: <code>Record</code>&lt;<code>string</code>, <code>RouteParamValue</code> | <code>RouteParamValue</code>[]&gt;</p><hr><h3 id="RouteParamsRaw" tabindex="-1">RouteParamsRaw <a class="header-anchor" href="#RouteParamsRaw" aria-label="Permalink to &quot;RouteParamsRaw&quot;">​</a></h3><p>Ƭ <strong>RouteParamsRaw</strong>: <code>Record</code>&lt;<code>string</code>, <code>RouteParamValueRaw</code> | <code>Exclude</code>&lt;<code>RouteParamValueRaw</code>, <code>null</code> | <code>undefined</code>&gt;[]&gt;</p><hr><h3 id="RouteRecord" tabindex="-1">RouteRecord <a class="header-anchor" href="#RouteRecord" aria-label="Permalink to &quot;RouteRecord&quot;">​</a></h3><p>Ƭ <strong>RouteRecord</strong>: <a href="./interfaces/RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a></p><p>Normalized version of a <a href="./#RouteRecord">route record</a>.</p><hr><h3 id="RouteRecordName" tabindex="-1">RouteRecordName <a class="header-anchor" href="#RouteRecordName" aria-label="Permalink to &quot;RouteRecordName&quot;">​</a></h3><p>Ƭ <strong>RouteRecordName</strong>: <code>string</code> | <code>symbol</code></p><p>Possible values for a user-defined route record&#39;s name</p><hr><h3 id="RouteRecordRaw" tabindex="-1">RouteRecordRaw <a class="header-anchor" href="#RouteRecordRaw" aria-label="Permalink to &quot;RouteRecordRaw&quot;">​</a></h3><p>Ƭ <strong>RouteRecordRaw</strong>: <a href="./interfaces/RouteRecordSingleView.html"><code>RouteRecordSingleView</code></a> | <a href="./interfaces/RouteRecordSingleViewWithChildren.html"><code>RouteRecordSingleViewWithChildren</code></a> | <a href="./interfaces/RouteRecordMultipleViews.html"><code>RouteRecordMultipleViews</code></a> | <a href="./interfaces/RouteRecordMultipleViewsWithChildren.html"><code>RouteRecordMultipleViewsWithChildren</code></a> | <a href="./interfaces/RouteRecordRedirect.html"><code>RouteRecordRedirect</code></a></p><hr><h3 id="UseLinkOptions" tabindex="-1">UseLinkOptions <a class="header-anchor" href="#UseLinkOptions" aria-label="Permalink to &quot;UseLinkOptions&quot;">​</a></h3><p>Ƭ <strong>UseLinkOptions</strong>: <code>VueUseOptions</code>&lt;<code>RouterLinkOptions</code>&gt;</p><h2 id="Variables" tabindex="-1">Variables <a class="header-anchor" href="#Variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><h3 id="RouterLink" tabindex="-1">RouterLink <a class="header-anchor" href="#RouterLink" aria-label="Permalink to &quot;RouterLink&quot;">​</a></h3><p>• <code>Const</code> <strong>RouterLink</strong>: <code>_RouterLinkI</code></p><p>Component to render a link that triggers a navigation on click.</p><hr><h3 id="RouterView" tabindex="-1">RouterView <a class="header-anchor" href="#RouterView" aria-label="Permalink to &quot;RouterView&quot;">​</a></h3><p>• <code>Const</code> <strong>RouterView</strong>: () =&gt; { <code>$props</code>: <code>AllowedComponentProps</code> &amp; <code>ComponentCustomProps</code> &amp; <code>VNodeProps</code> &amp; <a href="./interfaces/RouterViewProps.html"><code>RouterViewProps</code></a> ; <code>$slots</code>: { <code>default?</code>: (<code>__namedParameters</code>: { <code>Component</code>: <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt; ; <code>route</code>: <a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a> }) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt;[] } }</p><h4 id="Type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#Type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>• <strong>new RouterView</strong>()</p><p>Component to display the current route the user is at.</p><hr><h3 id="START-LOCATION" tabindex="-1">START_LOCATION <a class="header-anchor" href="#START-LOCATION" aria-label="Permalink to &quot;START\\_LOCATION&quot;">​</a></h3><p>• <code>Const</code> <strong>START_LOCATION</strong>: <a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a></p><p>Initial route location where the router is. Can be used in navigation guards to differentiate the initial navigation.</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">START_LOCATION</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">START_LOCATION</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// initial navigation</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { START_LOCATION } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (from </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">START_LOCATION</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// initial navigation</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="Functions" tabindex="-1">Functions <a class="header-anchor" href="#Functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="createMemoryHistory" tabindex="-1">createMemoryHistory <a class="header-anchor" href="#createMemoryHistory" aria-label="Permalink to &quot;createMemoryHistory&quot;">​</a></h3><p>▸ <strong>createMemoryHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>Creates an in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere. It&#39;s up to the user to replace that location with the starter location by either calling <code>router.push</code> or <code>router.replace</code>.</p><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>&#39;&#39;</code></td><td style="text-align:left;">Base applied to all urls, defaults to &#39;/&#39;</td></tr></tbody></table><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>a history object that can be passed to the router constructor</p><hr><h3 id="createRouter" tabindex="-1">createRouter <a class="header-anchor" href="#createRouter" aria-label="Permalink to &quot;createRouter&quot;">​</a></h3><p>▸ <strong>createRouter</strong>(<code>options</code>): <a href="./interfaces/Router.html"><code>Router</code></a></p><p>Creates a Router instance that can be used by a Vue app.</p><h4 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><a href="./interfaces/RouterOptions.html"><code>RouterOptions</code></a></td><td style="text-align:left;"><a href="./interfaces/RouterOptions.html">RouterOptions</a></td></tr></tbody></table><h4 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/Router.html"><code>Router</code></a></p><hr><h3 id="createWebHashHistory" tabindex="-1">createWebHashHistory <a class="header-anchor" href="#createWebHashHistory" aria-label="Permalink to &quot;createWebHashHistory&quot;">​</a></h3><p>▸ <strong>createWebHashHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>Creates a hash history. Useful for web applications with no host (e.g. <code>file://</code>) or when configuring a server to handle any URL is not possible.</p><h4 id="Parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional base to provide. Defaults to <code>location.pathname + location.search</code> If there is a <code>&lt;base&gt;</code> tag in the <code>head</code>, its value will be ignored in favor of this parameter <strong>but note it affects all the history.pushState() calls</strong>, meaning that if you use a <code>&lt;base&gt;</code> tag, it&#39;s <code>href</code> value <strong>has to match this parameter</strong> (ignoring anything after the <code>#</code>).</td></tr></tbody></table><h4 id="Returns-2" tabindex="-1">Returns <a class="header-anchor" href="#Returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// at https://example.com/folder</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// gives a url of \`https://example.com/folder#\`</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/folder/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// gives a url of \`https://example.com/folder/#\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// if the \`#\` is provided in the base, it won&#39;t be added by \`createWebHashHistory\`</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/folder/#/app/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// gives a url of \`https://example.com/folder/#/app/\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// you should avoid doing this because it changes the original url and breaks copying urls</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/other-folder/&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// gives a url of \`https://example.com/other-folder/#\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// at file:///usr/etc/folder/index.html</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// for locations with no \`host\`, the base is ignored</span></span>
<span class="line"><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/iAmIgnored&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// gives a url of \`file:///usr/etc/folder/index.html#\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// at https://example.com/folder</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// gives a url of \`https://example.com/folder#\`</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/folder/&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// gives a url of \`https://example.com/folder/#\`</span></span>
<span class="line"><span style="color:#6A737D;">// if the \`#\` is provided in the base, it won&#39;t be added by \`createWebHashHistory\`</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/folder/#/app/&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// gives a url of \`https://example.com/folder/#/app/\`</span></span>
<span class="line"><span style="color:#6A737D;">// you should avoid doing this because it changes the original url and breaks copying urls</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/other-folder/&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// gives a url of \`https://example.com/other-folder/#\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// at file:///usr/etc/folder/index.html</span></span>
<span class="line"><span style="color:#6A737D;">// for locations with no \`host\`, the base is ignored</span></span>
<span class="line"><span style="color:#6F42C1;">createWebHashHistory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/iAmIgnored&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// gives a url of \`file:///usr/etc/folder/index.html#\`</span></span></code></pre></div><hr><h3 id="createWebHistory" tabindex="-1">createWebHistory <a class="header-anchor" href="#createWebHistory" aria-label="Permalink to &quot;createWebHistory&quot;">​</a></h3><p>▸ <strong>createWebHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>Creates an HTML5 history. Most common history for single page applications.</p><h4 id="Parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base?</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="Returns-3" tabindex="-1">Returns <a class="header-anchor" href="#Returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><hr><h3 id="isNavigationFailure" tabindex="-1">isNavigationFailure <a class="header-anchor" href="#isNavigationFailure" aria-label="Permalink to &quot;isNavigationFailure&quot;">​</a></h3><p>▸ <strong>isNavigationFailure</strong>(<code>error</code>, <code>type?</code>): error is NavigationRedirectError</p><p>Check if an object is a <a href="./interfaces/NavigationFailure.html">NavigationFailure</a>.</p><h4 id="Parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>error</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">possible <a href="./interfaces/NavigationFailure.html">NavigationFailure</a></td></tr><tr><td style="text-align:left;"><code>type?</code></td><td style="text-align:left;"><code>NAVIGATION_GUARD_REDIRECT</code></td><td style="text-align:left;">optional types to check for</td></tr></tbody></table><h4 id="Returns-4" tabindex="-1">Returns <a class="header-anchor" href="#Returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>error is NavigationRedirectError</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">isNavigationFailure</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">NavigationFailureType</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">afterEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">failure</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Any kind of navigation failure</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Only duplicated navigations</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">duplicated</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Aborted or canceled navigations</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">failure</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">aborted</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NavigationFailureType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">canceled</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { isNavigationFailure, NavigationFailureType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Any kind of navigation failure</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Only duplicated navigations</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure, NavigationFailureType.duplicated)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Aborted or canceled navigations</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNavigationFailure</span><span style="color:#24292E;">(failure, NavigationFailureType.aborted </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> NavigationFailureType.canceled)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>▸ <strong>isNavigationFailure</strong>(<code>error</code>, <code>type?</code>): error is NavigationFailure</p><h4 id="Parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>error</code></td><td style="text-align:left;"><code>any</code></td></tr><tr><td style="text-align:left;"><code>type?</code></td><td style="text-align:left;"><code>ErrorTypes</code> | <a href="./enums/NavigationFailureType.html"><code>NavigationFailureType</code></a></td></tr></tbody></table><h4 id="Returns-5" tabindex="-1">Returns <a class="header-anchor" href="#Returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>error is NavigationFailure</p><hr><h3 id="loadRouteLocation" tabindex="-1">loadRouteLocation <a class="header-anchor" href="#loadRouteLocation" aria-label="Permalink to &quot;loadRouteLocation&quot;">​</a></h3><p>▸ <strong>loadRouteLocation</strong>(<code>route</code>): <code>Promise</code>&lt;<a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a>&gt;</p><p>Ensures a route is loaded, so it can be passed as o prop to <code>&lt;RouterView&gt;</code>.</p><h4 id="Parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>route</code></td><td style="text-align:left;"><a href="./interfaces/RouteLocationNormalized.html"><code>RouteLocationNormalized</code></a></td><td style="text-align:left;">resolved route to load</td></tr></tbody></table><h4 id="Returns-6" tabindex="-1">Returns <a class="header-anchor" href="#Returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a>&gt;</p><hr><h3 id="onBeforeRouteLeave" tabindex="-1">onBeforeRouteLeave <a class="header-anchor" href="#onBeforeRouteLeave" aria-label="Permalink to &quot;onBeforeRouteLeave&quot;">​</a></h3><p>▸ <strong>onBeforeRouteLeave</strong>(<code>leaveGuard</code>): <code>void</code></p><p>Add a navigation guard that triggers whenever the component for the current location is about to be left. Similar to beforeRouteLeave but can be used in any component. The guard is removed when the component is unmounted.</p><h4 id="Parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>leaveGuard</code></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html"><code>NavigationGuard</code></a></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></td></tr></tbody></table><h4 id="Returns-7" tabindex="-1">Returns <a class="header-anchor" href="#Returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="onBeforeRouteUpdate" tabindex="-1">onBeforeRouteUpdate <a class="header-anchor" href="#onBeforeRouteUpdate" aria-label="Permalink to &quot;onBeforeRouteUpdate&quot;">​</a></h3><p>▸ <strong>onBeforeRouteUpdate</strong>(<code>updateGuard</code>): <code>void</code></p><p>Add a navigation guard that triggers whenever the current location is about to be updated. Similar to beforeRouteUpdate but can be used in any component. The guard is removed when the component is unmounted.</p><h4 id="Parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>updateGuard</code></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html"><code>NavigationGuard</code></a></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></td></tr></tbody></table><h4 id="Returns-8" tabindex="-1">Returns <a class="header-anchor" href="#Returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="useLink" tabindex="-1">useLink <a class="header-anchor" href="#useLink" aria-label="Permalink to &quot;useLink&quot;">​</a></h3><p>▸ <strong>useLink</strong>(<code>props</code>): <code>Object</code></p><h4 id="Parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>props</code></td><td style="text-align:left;"><code>VueUseOptions</code>&lt;<code>RouterLinkOptions</code>&gt;</td></tr></tbody></table><h4 id="Returns-9" tabindex="-1">Returns <a class="header-anchor" href="#Returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Object</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>href</code></td><td style="text-align:left;"><code>ComputedRef</code>&lt;<code>string</code>&gt;</td></tr><tr><td style="text-align:left;"><code>isActive</code></td><td style="text-align:left;"><code>ComputedRef</code>&lt;<code>boolean</code>&gt;</td></tr><tr><td style="text-align:left;"><code>isExactActive</code></td><td style="text-align:left;"><code>ComputedRef</code>&lt;<code>boolean</code>&gt;</td></tr><tr><td style="text-align:left;"><code>navigate</code></td><td style="text-align:left;">(<code>e</code>: <code>MouseEvent</code>) =&gt; <code>Promise</code>&lt;<code>void</code> | <a href="./interfaces/NavigationFailure.html"><code>NavigationFailure</code></a>&gt;</td></tr><tr><td style="text-align:left;"><code>route</code></td><td style="text-align:left;"><code>ComputedRef</code>&lt;<a href="./interfaces/RouteLocation.html"><code>RouteLocation</code></a> &amp; { <code>href</code>: <code>string</code> }&gt;</td></tr></tbody></table><hr><h3 id="useRoute" tabindex="-1">useRoute <a class="header-anchor" href="#useRoute" aria-label="Permalink to &quot;useRoute&quot;">​</a></h3><p>▸ <strong>useRoute</strong>(): <a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a></p><p>Returns the current route location. Equivalent to using <code>$route</code> inside templates.</p><h4 id="Returns-10" tabindex="-1">Returns <a class="header-anchor" href="#Returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouteLocationNormalizedLoaded.html"><code>RouteLocationNormalizedLoaded</code></a></p><hr><h3 id="useRouter" tabindex="-1">useRouter <a class="header-anchor" href="#useRouter" aria-label="Permalink to &quot;useRouter&quot;">​</a></h3><p>▸ <strong>useRouter</strong>(): <a href="./interfaces/Router.html"><code>Router</code></a></p><p>Returns the router instance. Equivalent to using <code>$router</code> inside templates.</p><h4 id="Returns-11" tabindex="-1">Returns <a class="header-anchor" href="#Returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/Router.html"><code>Router</code></a></p>`,155),r=[n];function l(i,c,p,d,h,u){return a(),t("div",null,r)}const R=e(s,[["render",l]]);export{f as __pageData,R as default};

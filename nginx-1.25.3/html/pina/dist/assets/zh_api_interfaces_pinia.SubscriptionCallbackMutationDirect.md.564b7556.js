import{_ as a,o as t,c as e,S as i}from"./chunks/framework.7ffc5276.js";const m=JSON.parse('{"title":"接口：SubscriptionCallbackMutationDirect","description":"","frontmatter":{"sidebar":"auto","editLinks":false,"sidebarDepth":3},"headers":[],"relativePath":"zh/api/interfaces/pinia.SubscriptionCallbackMutationDirect.md","filePath":"zh/api/interfaces/pinia.SubscriptionCallbackMutationDirect.md"}'),r={name:"zh/api/interfaces/pinia.SubscriptionCallbackMutationDirect.md"},o=i('<p><a href="./../">API 文档</a> / <a href="./../modules/pinia.html">pinia</a> / SubscriptionCallbackMutationDirect</p><h1 id="interface-subscriptioncallbackmutationdirect" tabindex="-1">接口：SubscriptionCallbackMutationDirect <a class="header-anchor" href="#interface-subscriptioncallbackmutationdirect" aria-label="Permalink to &quot;接口：SubscriptionCallbackMutationDirect %{#interface-subscriptioncallbackmutationdirect}%&quot;">​</a></h1><p><a href="./../modules/pinia.html">pinia</a>.SubscriptionCallbackMutationDirect</p><p>当用 <code>store.someState = newValue</code> 或 <code>store.$state.someState = newValue</code> 直接改变 store 的状态时， 传递给订阅回调的上下文。</p><h2 id="hierarchy" tabindex="-1">层次结构 <a class="header-anchor" href="#hierarchy" aria-label="Permalink to &quot;层次结构 %{#hierarchy}%&quot;">​</a></h2><ul><li><p><a href="./pinia._SubscriptionCallbackMutationBase.html"><code>_SubscriptionCallbackMutationBase</code></a></p><p>↳ <strong><code>SubscriptionCallbackMutationDirect</code></strong></p></li></ul><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><h3 id="events" tabindex="-1">事件 <a class="header-anchor" href="#events" aria-label="Permalink to &quot;事件 %{#events}%&quot;">​</a></h3><p>• <strong>events</strong>: <code>DebuggerEvent</code></p><p>只支持开发环境。不同的 mutation 调用。</p><hr><h3 id="storeid" tabindex="-1">storeId <a class="header-anchor" href="#storeid" aria-label="Permalink to &quot;storeId %{#storeid}%&quot;">​</a></h3><p>• <strong>storeId</strong>: <code>string</code></p><p>执行 mutation 的 store 的 <code>id</code></p><h4 id="继承于" tabindex="-1">继承于 <a class="header-anchor" href="#继承于" aria-label="Permalink to &quot;继承于&quot;">​</a></h4><p><a href="./pinia._SubscriptionCallbackMutationBase.html">_SubscriptionCallbackMutationBase</a>.<a href="./pinia._SubscriptionCallbackMutationBase.html#storeid">storeId</a></p><hr><h3 id="type" tabindex="-1">类型 <a class="header-anchor" href="#type" aria-label="Permalink to &quot;类型 %{#type}%&quot;">​</a></h3><p>• <strong>type</strong>: <a href="./../enums/pinia.MutationType.html#direct"><code>direct</code></a></p><p>mutation 的类型</p><h4 id="overrides" tabindex="-1">重写 <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;重写 %{#overrides}%&quot;">​</a></h4><p><a href="./pinia._SubscriptionCallbackMutationBase.html">_SubscriptionCallbackMutationBase</a>.<a href="./pinia._SubscriptionCallbackMutationBase.html#type">type</a></p>',22),n=[o];function c(s,l,p,u,d,h){return t(),e("div",null,n)}const _=a(r,[["render",c]]);export{m as __pageData,_ as default};
